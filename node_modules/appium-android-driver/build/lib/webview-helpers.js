"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHROMIUM_WIN = exports.WEBVIEW_BASE = exports.WEBVIEW_WIN = exports.NATIVE_WIN = exports.helpers = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _asyncbox = require("asyncbox");

const NATIVE_WIN = 'NATIVE_APP';
exports.NATIVE_WIN = NATIVE_WIN;
const WEBVIEW_WIN = 'WEBVIEW';
exports.WEBVIEW_WIN = WEBVIEW_WIN;
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
exports.WEBVIEW_BASE = WEBVIEW_BASE;
const WEBVIEW_REGEXP = new RegExp(`@?webview_devtools_remote_(\\d+)`);
const WEBVIEW_PID_REGEXP = new RegExp(`${WEBVIEW_BASE}(\\d+)`);
const CHROMIUM_WIN = 'CHROMIUM';
exports.CHROMIUM_WIN = CHROMIUM_WIN;
const CROSSWALK_SOCKET_SUFFIX = '_devtools_remote';
const CROSSWALK_REGEXP_STRING = `(\\S*)${CROSSWALK_SOCKET_SUFFIX}`;
const CROSSWALK_REGEXP = new RegExp(`@${CROSSWALK_REGEXP_STRING}`);
const CROSSWALK_PROCESS_REGEXP = new RegExp(WEBVIEW_BASE + CROSSWALK_REGEXP_STRING);
const DEFAULT_WEBVIEW_DEVTOOLS_PORT = 9222;
let helpers = {};
exports.helpers = helpers;

async function getPotentialWebviewProcs(adb) {
  const procs = [];
  const out = await adb.shell(['cat', '/proc/net/unix']);

  for (let line of out.split('\n')) {
    line = line.trim();
    let regexMatch;

    if (regexMatch = line.match(WEBVIEW_REGEXP) || line.match(CROSSWALK_REGEXP)) {
      procs.push(regexMatch[0]);
    }
  }

  return _lodash.default.uniq(procs);
}

async function webviewsFromProcs(adb, deviceSocket) {
  const procs = await getPotentialWebviewProcs(adb);
  const webviews = [];

  for (const proc of procs) {
    if (deviceSocket === 'chrome_devtools_remote' && proc === `@${deviceSocket}`) {
      webviews.push({
        proc,
        webview: CHROMIUM_WIN
      });
      continue;
    }

    let webviewPid;
    let crosswalkWebviewSocket;

    if (webviewPid = proc.match(WEBVIEW_REGEXP)) {
      webviews.push({
        proc,
        webview: `${WEBVIEW_BASE}${webviewPid[1]}`
      });
    } else if (crosswalkWebviewSocket = proc.match(CROSSWALK_REGEXP)) {
      if (deviceSocket) {
        if (crosswalkWebviewSocket[0] === `@${deviceSocket}`) {
          webviews.push({
            proc,
            webview: `${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}`
          });
        }
      } else {
        webviews.push({
          proc,
          webview: `${WEBVIEW_BASE}${crosswalkWebviewSocket[1]}${CROSSWALK_SOCKET_SUFFIX}`
        });
      }
    }
  }

  return webviews;
}

async function webviewHasPages(adb, {
  proc,
  webview
}, webviewDevtoolsPort) {
  let hasPages = false;
  const wvPort = webviewDevtoolsPort || DEFAULT_WEBVIEW_DEVTOOLS_PORT;
  const remotePort = proc.replace(/^@/, '');
  const portAlreadyForwarded = (await adb.getForwardList()).map(line => line.split(' ')[1]).reduce((acc, portSpec) => acc || portSpec === `tcp:${wvPort}`, false);

  if (portAlreadyForwarded) {
    _logger.default.warn(`Port ${wvPort} was already forwarded when attempting webview ` + `page presence check, so was unable to perform check.`);

    return false;
  }

  await adb.adbExec(['forward', `tcp:${wvPort}`, `localabstract:${remotePort}`]);

  try {
    const remoteDebugger = `http://localhost:${wvPort}/json/list`;

    _logger.default.debug(`Attempting to get list of pages for webview '${webview}' ` + `from the remote debugger at ${remoteDebugger}.`);

    const pages = await (0, _requestPromise.default)({
      uri: remoteDebugger,
      json: true
    });

    if (pages.length > 0) {
      hasPages = true;
    }

    _logger.default.info(`Webview '${webview}' has ${hasPages ? '' : 'no '} pages`);
  } catch (e) {
    _logger.default.warn(`Got error when retrieving page list, will assume no pages: ${e}`);
  }

  await adb.removePortForward(wvPort);
  return hasPages;
}

helpers.procFromWebview = async function procFromWebview(adb, webview) {
  if (webview.match(WEBVIEW_PID_REGEXP) === null) {
    let processName = webview.match(CROSSWALK_PROCESS_REGEXP);

    if (processName === null) {
      throw new Error(`Could not find process name for webview ${webview}`);
    }

    return processName[1];
  }

  let pid = webview.match(/\d+$/);

  if (!pid) {
    throw new Error(`Could not find PID for webview ${webview}`);
  }

  pid = pid[0];

  _logger.default.debug(`${webview} mapped to pid ${pid}`);

  _logger.default.debug('Getting process name for webview');

  let out = await adb.shell('ps');
  let pkg = 'unknown';
  let lines = out.split(/\r?\n/);
  const fullHeader = lines[0].trim();
  const header = fullHeader.split(/\s+/);
  const pidColumn = header.indexOf('PID');

  for (let line of lines) {
    const entries = line.trim().split(/\s+/);
    const pidEntry = entries[pidColumn];

    if (pidEntry === pid) {
      pkg = _lodash.default.last(entries);

      _logger.default.debug(`Parsed pid: '${pidEntry}' pkg: '${pkg}' from`);

      _logger.default.debug(`    ${fullHeader}`);

      _logger.default.debug(`    ${line}`);

      break;
    }
  }

  _logger.default.debug(`Returning process name: '${pkg}'`);

  return pkg;
};

helpers.getWebviews = async function getWebviews(adb, {
  androidDeviceSocket = null,
  ensureWebviewsHavePages = null,
  webviewDevtoolsPort = null
} = {}) {
  _logger.default.debug('Getting a list of available webviews');

  let webviewProcs = await webviewsFromProcs(adb, androidDeviceSocket);

  if (ensureWebviewsHavePages) {
    _logger.default.info('Retrieved potential webviews; will filter out ones with no active pages');

    webviewProcs = await (0, _asyncbox.asyncfilter)(webviewProcs, async wp => await webviewHasPages(adb, wp, webviewDevtoolsPort), false);
  } else {
    _logger.default.info('Not checking whether webviews have active pages; use the ' + "'ensureWebviewsHavePages' cap to turn this check on");
  }

  let webviews = webviewProcs.map(wp => wp.webview);

  if (androidDeviceSocket) {
    return webviews;
  }

  webviews = await (0, _asyncbox.asyncmap)(webviews, async webviewName => {
    let pkg = await helpers.procFromWebview(adb, webviewName);
    return WEBVIEW_BASE + pkg;
  });

  _logger.default.debug(`Found webviews: ${JSON.stringify(webviews)}`);

  return webviews;
};

helpers.decorateChromeOptions = function decorateChromeOptions(caps, opts, deviceId) {
  if (opts.chromeOptions) {
    if (opts.chromeOptions.Arguments) {
      opts.chromeOptions.args = [...(opts.chromeOptions.args || []), ...opts.chromeOptions.Arguments];
      delete opts.chromeOptions.Arguments;
    }

    for (let [opt, val] of _lodash.default.toPairs(opts.chromeOptions)) {
      if (_lodash.default.isUndefined(caps.chromeOptions[opt])) {
        caps.chromeOptions[opt] = val;
      } else {
        _logger.default.warn(`Cannot pass option ${caps.chromeOptions[opt]} because ` + 'Appium needs it to make chromeDriver work');
      }
    }
  }

  caps.chromeOptions.androidDeviceSerial = deviceId;
  return caps;
};

var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
