"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("../logger.js"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _helpers = require("../helpers.js");

var _asyncLock = _interopRequireDefault(require("async-lock"));

const BASE_APK = 'base-master.apk';

const LANGUAGE_APK = lang => `base-${lang}.apk`;

const APKS_CACHE = new _lruCache.default({
  max: 10,
  dispose: (apksHash, extractedFilesRoot) => _appiumSupport.fs.rimraf(extractedFilesRoot)
});
const APKS_CACHE_GUARD = new _asyncLock.default();

async function extractFromApks(apks, dstPath) {
  if (!_lodash.default.isArray(dstPath)) {
    dstPath = [dstPath];
  }

  return await APKS_CACHE_GUARD.acquire(apks, async () => {
    const apksHash = await _appiumSupport.fs.hash(apks);

    _logger.default.debug(`Calculated '${apks}' hash: ${apksHash}`);

    if (APKS_CACHE.has(apksHash)) {
      const resultPath = _path.default.resolve(APKS_CACHE.get(apksHash), ...dstPath);

      if (await _appiumSupport.fs.exists(resultPath)) {
        return resultPath;
      }

      APKS_CACHE.del(apksHash);
    }

    const tmpRoot = await _appiumSupport.tempDir.openDir();

    _logger.default.debug(`Unpacking application bundle at '${apks}' to '${tmpRoot}'`);

    await (0, _helpers.unzipFile)(apks, tmpRoot);

    const resultPath = _path.default.resolve(tmpRoot, ...dstPath);

    if (!(await _appiumSupport.fs.exists(resultPath))) {
      throw new Error(`${dstPath.join(_path.default.sep)} cannot be found in '${apks}' bundle. ` + `Does the archive contain a valid application bundle?`);
    }

    APKS_CACHE.set(apksHash, tmpRoot);
    return resultPath;
  });
}

let apksUtilsMethods = {};

apksUtilsMethods.execBundletool = async function execBundletool(args, errorMsg) {
  await this.initBundletool();
  args = ['-jar', this.binaries.bundletool, ...args];

  _logger.default.debug(`Executing bundletool with arguments: ${JSON.stringify(args)}`);

  let stdout;

  try {
    ({
      stdout
    } = await (0, _teen_process.exec)((0, _helpers.getJavaForOs)(), args));

    _logger.default.debug(`Command stdout: ${_lodash.default.truncate(stdout, {
      length: 300
    })}`);

    return stdout;
  } catch (e) {
    if (e.stdout) {
      _logger.default.debug(`Command stdout: ${e.stdout}`);
    }

    if (e.stderr) {
      _logger.default.debug(`Command stderr: ${e.stderr}`);
    }

    throw new Error(`${errorMsg}. Original error: ${e.message}`);
  }
};

apksUtilsMethods.getDeviceSpec = async function getDeviceSpec(specLocation) {
  const args = ['get-device-spec', '--adb', this.executable.path, '--device-id', this.curDeviceId, '--output', specLocation];

  _logger.default.debug(`Getting the spec for the device '${this.curDeviceId}'`);

  await this.execBundletool(args, 'Cannot retrieve the device spec');
  return specLocation;
};

apksUtilsMethods.installApks = async function installApks(apks, options = {}) {
  options = _lodash.default.cloneDeep(options);

  _lodash.default.defaults(options, {
    timeout: this.adbExecTimeout === _helpers.DEFAULT_ADB_EXEC_TIMEOUT ? _helpers.APKS_INSTALL_TIMEOUT : this.adbExecTimeout,
    timeoutCapName: 'androidInstallTimeout'
  });

  Object.assign(options, {
    replace: true
  });
  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    const specPath = await this.getDeviceSpec(_path.default.resolve(tmpRoot, 'deviceSpec.json'));
    const args = ['extract-apks', '--apks', apks, '--output-dir', tmpRoot, '--device-spec', specPath];

    _logger.default.debug(`Extracting the apk files from '${apks}'`);

    await this.execBundletool(args, `Cannot extract the application bundle at '${apks}'`);
    const installArgs = (0, _helpers.buildInstallArgs)((await this.getApiLevel()), options);
    const apkPathsToInstall = (await _appiumSupport.fs.readdir(tmpRoot)).filter(name => name.endsWith(_helpers.APK_EXTENSION)).map(name => _path.default.resolve(tmpRoot, name));

    _logger.default.debug('Got the following apk files to install: ' + JSON.stringify(apkPathsToInstall.map(x => _path.default.basename(x))));

    const output = await this.adbExec(['install-multiple', ...installArgs, ...apkPathsToInstall], {
      timeout: options.timeout,
      timeoutCapName: options.timeoutCapName
    });
    const truncatedOutput = !_lodash.default.isString(output) || output.length <= 300 ? output : `${output.substr(0, 150)}...${output.substr(output.length - 150)}`;

    _logger.default.debug(`Install command stdout: ${truncatedOutput}`);

    if (_lodash.default.includes(output, 'INSTALL_FAILED')) {
      throw new Error(output);
    }
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

apksUtilsMethods.extractBaseApk = async function extractBaseApk(apks) {
  return await extractFromApks(apks, ['splits', BASE_APK]);
};

apksUtilsMethods.extractLanguageApk = async function extractLanguageApk(apks, language = null) {
  if (language) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(language)]);
    } catch (e) {
      _logger.default.debug(e.message);

      _logger.default.info(`Assuming that splitting by language is not enabled for the '${apks}' bundle ` + `and returning the main apk instead`);

      return await this.extractBaseApk(apks);
    }
  }

  const defaultLanguages = ['en', 'en_us'];

  for (const lang of defaultLanguages) {
    try {
      return await extractFromApks(apks, ['splits', LANGUAGE_APK(lang)]);
    } catch (ign) {}
  }

  _logger.default.info(`Cannot find any split apk for the default languages ${JSON.stringify(defaultLanguages)}. ` + `Returning the main apk instead.`);

  return await this.extractBaseApk(apks);
};

apksUtilsMethods.isTestPackageOnlyError = function (output) {
  return /\[INSTALL_FAILED_TEST_ONLY\]/.test(output);
};

var _default = apksUtilsMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9hcGtzLXV0aWxzLmpzIl0sIm5hbWVzIjpbIkJBU0VfQVBLIiwiTEFOR1VBR0VfQVBLIiwibGFuZyIsIkFQS1NfQ0FDSEUiLCJMUlUiLCJtYXgiLCJkaXNwb3NlIiwiYXBrc0hhc2giLCJleHRyYWN0ZWRGaWxlc1Jvb3QiLCJmcyIsInJpbXJhZiIsIkFQS1NfQ0FDSEVfR1VBUkQiLCJBc3luY0xvY2siLCJleHRyYWN0RnJvbUFwa3MiLCJhcGtzIiwiZHN0UGF0aCIsIl8iLCJpc0FycmF5IiwiYWNxdWlyZSIsImhhc2giLCJsb2ciLCJkZWJ1ZyIsImhhcyIsInJlc3VsdFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImdldCIsImV4aXN0cyIsImRlbCIsInRtcFJvb3QiLCJ0ZW1wRGlyIiwib3BlbkRpciIsIkVycm9yIiwiam9pbiIsInNlcCIsInNldCIsImFwa3NVdGlsc01ldGhvZHMiLCJleGVjQnVuZGxldG9vbCIsImFyZ3MiLCJlcnJvck1zZyIsImluaXRCdW5kbGV0b29sIiwiYmluYXJpZXMiLCJidW5kbGV0b29sIiwiSlNPTiIsInN0cmluZ2lmeSIsInN0ZG91dCIsInRydW5jYXRlIiwibGVuZ3RoIiwiZSIsInN0ZGVyciIsIm1lc3NhZ2UiLCJnZXREZXZpY2VTcGVjIiwic3BlY0xvY2F0aW9uIiwiZXhlY3V0YWJsZSIsImN1ckRldmljZUlkIiwiaW5zdGFsbEFwa3MiLCJvcHRpb25zIiwiY2xvbmVEZWVwIiwiZGVmYXVsdHMiLCJ0aW1lb3V0IiwiYWRiRXhlY1RpbWVvdXQiLCJERUZBVUxUX0FEQl9FWEVDX1RJTUVPVVQiLCJBUEtTX0lOU1RBTExfVElNRU9VVCIsInRpbWVvdXRDYXBOYW1lIiwiT2JqZWN0IiwiYXNzaWduIiwicmVwbGFjZSIsInNwZWNQYXRoIiwiaW5zdGFsbEFyZ3MiLCJnZXRBcGlMZXZlbCIsImFwa1BhdGhzVG9JbnN0YWxsIiwicmVhZGRpciIsImZpbHRlciIsIm5hbWUiLCJlbmRzV2l0aCIsIkFQS19FWFRFTlNJT04iLCJtYXAiLCJ4IiwiYmFzZW5hbWUiLCJvdXRwdXQiLCJhZGJFeGVjIiwidHJ1bmNhdGVkT3V0cHV0IiwiaXNTdHJpbmciLCJzdWJzdHIiLCJpbmNsdWRlcyIsImV4dHJhY3RCYXNlQXBrIiwiZXh0cmFjdExhbmd1YWdlQXBrIiwibGFuZ3VhZ2UiLCJpbmZvIiwiZGVmYXVsdExhbmd1YWdlcyIsImlnbiIsImlzVGVzdFBhY2thZ2VPbmx5RXJyb3IiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUlBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxpQkFBakI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFJQyxJQUFELElBQVcsUUFBT0EsSUFBSyxNQUE1Qzs7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSUMsaUJBQUosQ0FBUTtBQUN6QkMsRUFBQUEsR0FBRyxFQUFFLEVBRG9CO0FBRXpCQyxFQUFBQSxPQUFPLEVBQUUsQ0FBQ0MsUUFBRCxFQUFXQyxrQkFBWCxLQUFrQ0Msa0JBQUdDLE1BQUgsQ0FBVUYsa0JBQVY7QUFGbEIsQ0FBUixDQUFuQjtBQUlBLE1BQU1HLGdCQUFnQixHQUFHLElBQUlDLGtCQUFKLEVBQXpCOztBQWVBLGVBQWVDLGVBQWYsQ0FBZ0NDLElBQWhDLEVBQXNDQyxPQUF0QyxFQUErQztBQUM3QyxNQUFJLENBQUNDLGdCQUFFQyxPQUFGLENBQVVGLE9BQVYsQ0FBTCxFQUF5QjtBQUN2QkEsSUFBQUEsT0FBTyxHQUFHLENBQUNBLE9BQUQsQ0FBVjtBQUNEOztBQUVELFNBQU8sTUFBTUosZ0JBQWdCLENBQUNPLE9BQWpCLENBQXlCSixJQUF6QixFQUErQixZQUFZO0FBSXRELFVBQU1QLFFBQVEsR0FBRyxNQUFNRSxrQkFBR1UsSUFBSCxDQUFRTCxJQUFSLENBQXZCOztBQUNBTSxvQkFBSUMsS0FBSixDQUFXLGVBQWNQLElBQUssV0FBVVAsUUFBUyxFQUFqRDs7QUFFQSxRQUFJSixVQUFVLENBQUNtQixHQUFY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Z0JBQWYsQ0FBaUMsSUFBeEYsR0FDTixpQ0FESDs7QUFFQSxTQUFPLE1BQU0sS0FBS0osY0FBTCxDQUFvQnZFLElBQXBCLENBQWI7QUFDRCxDQXRCRDs7QUF3QkFzQixnQkFBZ0IsQ0FBQ3VELHNCQUFqQixHQUEwQyxVQUFVWixNQUFWLEVBQWtCO0FBQzFELFNBQU8sK0JBQStCYSxJQUEvQixDQUFvQ2IsTUFBcEMsQ0FBUDtBQUNELENBRkQ7O2VBSWUzQyxnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXIuanMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZnMsIHRlbXBEaXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgTFJVIGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQge1xuICBnZXRKYXZhRm9yT3MsIHVuemlwRmlsZSwgYnVpbGRJbnN0YWxsQXJncyxcbiAgQVBLU19JTlNUQUxMX1RJTUVPVVQsIEFQS19FWFRFTlNJT04sXG4gIERFRkFVTFRfQURCX0VYRUNfVElNRU9VVCB9IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuaW1wb3J0IEFzeW5jTG9jayBmcm9tICdhc3luYy1sb2NrJztcblxuY29uc3QgQkFTRV9BUEsgPSAnYmFzZS1tYXN0ZXIuYXBrJztcbmNvbnN0IExBTkdVQUdFX0FQSyA9IChsYW5nKSA9PiBgYmFzZS0ke2xhbmd9LmFwa2A7XG5jb25zdCBBUEtTX0NBQ0hFID0gbmV3IExSVSh7XG4gIG1heDogMTAsXG4gIGRpc3Bvc2U6IChhcGtzSGFzaCwgZXh0cmFjdGVkRmlsZXNSb290KSA9PiBmcy5yaW1yYWYoZXh0cmFjdGVkRmlsZXNSb290KSxcbn0pO1xuY29uc3QgQVBLU19DQUNIRV9HVUFSRCA9IG5ldyBBc3luY0xvY2soKTtcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgcGFydGljdWxhciBhcGtzIHBhY2thZ2UgaW50byBhIHRlbXBvcmFyeSBmb2xkZXIsXG4gKiBmaW5kcyBhbmQgcmV0dXJucyB0aGUgZnVsbCBwYXRoIHRvIHRoZSBmaWxlIGNvbnRhaW5lZCBpbiB0aGlzIGFway5cbiAqIFRoZSByZXN1bHRpbmcgdGVtcG9yYXJ5IHBhdGgsIHdoZXJlIHRoZSAuYXBrcyBmaWxlIGhhcyBiZWVuIGV4dHJhY3RlZCxcbiAqIHdpbGwgYmUgc3RvcmVkIGludG8gdGhlIGludGVybmFsIExSVSBjYWNoZSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtzIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgLmFwa3MgZmlsZVxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8U3RyaW5nPn0gZHN0UGF0aCAtIFRoZSByZWxhdGl2ZSBwYXRoIHRvIHRoZSBkZXN0aW5hdGlvbiBmaWxlLFxuICogd2hpY2ggaXMgZ29pbmcgdG8gYmUgZXh0cmFjdGVkLCB3aGVyZSBlYWNoIHBhdGggY29tcG9uZW50IGlzIGFuIGFycmF5IGl0ZW1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZ1bGwgcGF0aCB0byB0aGUgZXh0cmFjdGVkIGZpbGVcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcmVxdWVzdGVkIGl0ZW0gZG9lcyBub3QgZXhpc3QgaW4gdGhlIGV4dHJhY3RlZCBhcmNoaXZlIG9yIHRoZSBwcm92aWRlc1xuICogYXBrcyBmaWxlIGlzIG5vdCBhIHZhbGlkIGJ1bmRsZVxuICovXG5hc3luYyBmdW5jdGlvbiBleHRyYWN0RnJvbUFwa3MgKGFwa3MsIGRzdFBhdGgpIHtcbiAgaWYgKCFfLmlzQXJyYXkoZHN0UGF0aCkpIHtcbiAgICBkc3RQYXRoID0gW2RzdFBhdGhdO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IEFQS1NfQ0FDSEVfR1VBUkQuYWNxdWlyZShhcGtzLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gSXQgbWlnaHQgYmUgdGhhdCB0aGUgb3JpZ2luYWwgZmlsZSBoYXMgYmVlbiByZXBsYWNlZCxcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIGtlZXAgdGhlIGhhc2ggc3VtcyBpbnN0ZWFkIG9mIHRoZSBhY3R1YWwgZmlsZSBwYXRoc1xuICAgIC8vIGFzIGNhY2hpbmcga2V5c1xuICAgIGNvbnN0IGFwa3NIYXNoID0gYXdhaXQgZnMuaGFzaChhcGtzKTtcbiAgICBsb2cuZGVidWcoYENhbGN1bGF0ZWQgJyR7YXBrc30nIGhhc2g6ICR7YXBrc0hhc2h9YCk7XG5cbiAgICBpZiAoQVBLU19DQUNIRS5oYXMoYXBrc0hhc2gpKSB7XG4gICAgICBjb25zdCByZXN1bHRQYXRoID0gcGF0aC5yZXNvbHZlKEFQS1NfQ0FDSEUuZ2V0KGFwa3NIYXNoKSwgLi4uZHN0UGF0aCk7XG4gICAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHJlc3VsdFBhdGgpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRQYXRoO1xuICAgICAgfVxuICAgICAgQVBLU19DQUNIRS5kZWwoYXBrc0hhc2gpO1xuICAgIH1cblxuICAgIGNvbnN0IHRtcFJvb3QgPSBhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKTtcbiAgICBsb2cuZGVidWcoYFVucGFja2luZyBhcHBsaWNhdGlvbiBidW5kbGUgYXQgJyR7YXBrc30nIHRvICcke3RtcFJvb3R9J2ApO1xuICAgIGF3YWl0IHVuemlwRmlsZShhcGtzLCB0bXBSb290KTtcbiAgICBjb25zdCByZXN1bHRQYXRoID0gcGF0aC5yZXNvbHZlKHRtcFJvb3QsIC4uLmRzdFBhdGgpO1xuICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKHJlc3VsdFBhdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZHN0UGF0aC5qb2luKHBhdGguc2VwKX0gY2Fubm90IGJlIGZvdW5kIGluICcke2Fwa3N9JyBidW5kbGUuIGAgK1xuICAgICAgICBgRG9lcyB0aGUgYXJjaGl2ZSBjb250YWluIGEgdmFsaWQgYXBwbGljYXRpb24gYnVuZGxlP2ApO1xuICAgIH1cbiAgICBBUEtTX0NBQ0hFLnNldChhcGtzSGFzaCwgdG1wUm9vdCk7XG4gICAgcmV0dXJuIHJlc3VsdFBhdGg7XG4gIH0pO1xufVxuXG5sZXQgYXBrc1V0aWxzTWV0aG9kcyA9IHt9O1xuXG4vKipcbiAqIEV4ZWN1dGVzIGJ1bmRsZXRvb2wgdXRpbGl0eSB3aXRoIGdpdmVuIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgYWN0dWFsIHN0ZG91dFxuICpcbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gYXJncyAtIHRoZSBsaXN0IG9mIGJ1bmRsZXRvb2wgYXJndW1lbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNc2cgLSBUaGUgY3VzdG9taXplZCBlcnJvciBtZXNzYWdlIHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gdGhlIGFjdHVhbCBjb21tYW5kIHN0ZG91dFxuICogQHRocm93cyB7RXJyb3J9IElmIGJ1bmRsZXRvb2wgamFyIGRvZXMgbm90IGV4aXN0IGluIFBBVEggb3IgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlXG4gKiBleGVjdXRpbmcgaXRcbiAqL1xuYXBrc1V0aWxzTWV0aG9kcy5leGVjQnVuZGxldG9vbCA9IGFzeW5jIGZ1bmN0aW9uIGV4ZWNCdW5kbGV0b29sIChhcmdzLCBlcnJvck1zZykge1xuICBhd2FpdCB0aGlzLmluaXRCdW5kbGV0b29sKCk7XG4gIGFyZ3MgPSBbXG4gICAgJy1qYXInLCB0aGlzLmJpbmFyaWVzLmJ1bmRsZXRvb2wsXG4gICAgLi4uYXJnc1xuICBdO1xuICBsb2cuZGVidWcoYEV4ZWN1dGluZyBidW5kbGV0b29sIHdpdGggYXJndW1lbnRzOiAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWApO1xuICBsZXQgc3Rkb3V0O1xuICB0cnkge1xuICAgICh7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoZ2V0SmF2YUZvck9zKCksIGFyZ3MpKTtcbiAgICBsb2cuZGVidWcoYENvbW1hbmQgc3Rkb3V0OiAke18udHJ1bmNhdGUoc3Rkb3V0LCB7bGVuZ3RoOiAzMDB9KX1gKTtcbiAgICByZXR1cm4gc3Rkb3V0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUuc3Rkb3V0KSB7XG4gICAgICBsb2cuZGVidWcoYENvbW1hbmQgc3Rkb3V0OiAke2Uuc3Rkb3V0fWApO1xuICAgIH1cbiAgICBpZiAoZS5zdGRlcnIpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgQ29tbWFuZCBzdGRlcnI6ICR7ZS5zdGRlcnJ9YCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgJHtlcnJvck1zZ30uIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3BlY0xvY2F0aW9uIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgZ2VuZXJhdGVkIGRldmljZSBzcGVjIGxvY2F0aW9uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgc2FtZSBgc3BlY0xvY2F0aW9uYCB2YWx1ZVxuICogQHRocm93cyB7RXJyb3J9IElmIGl0IGlzIG5vdCBwb3NzaWJsZSB0byByZXRyaWV2ZSB0aGUgc3BlYyBmb3IgdGhlIGN1cnJlbnQgZGV2aWNlXG4gKi9cbmFwa3NVdGlsc01ldGhvZHMuZ2V0RGV2aWNlU3BlYyA9IGFzeW5jIGZ1bmN0aW9uIGdldERldmljZVNwZWMgKHNwZWNMb2NhdGlvbikge1xuICBjb25zdCBhcmdzID0gW1xuICAgICdnZXQtZGV2aWNlLXNwZWMnLFxuICAgICctLWFkYicsIHRoaXMuZXhlY3V0YWJsZS5wYXRoLFxuICAgICctLWRldmljZS1pZCcsIHRoaXMuY3VyRGV2aWNlSWQsXG4gICAgJy0tb3V0cHV0Jywgc3BlY0xvY2F0aW9uLFxuICBdO1xuICBsb2cuZGVidWcoYEdldHRpbmcgdGhlIHNwZWMgZm9yIHRoZSBkZXZpY2UgJyR7dGhpcy5jdXJEZXZpY2VJZH0nYCk7XG4gIGF3YWl0IHRoaXMuZXhlY0J1bmRsZXRvb2woYXJncywgJ0Nhbm5vdCByZXRyaWV2ZSB0aGUgZGV2aWNlIHNwZWMnKTtcbiAgcmV0dXJuIHNwZWNMb2NhdGlvbjtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW5zdGFsbEFwa3NPcHRpb25zXG4gKiBAcHJvcGVydHkgez9udW1iZXJ8c3RyaW5nfSB0aW1lb3V0IFsyMDAwMF0gLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IHVudGlsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgaW5zdGFsbGF0aW9uIGlzIGNvbXBsZXRlZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRpbWVvdXRDYXBOYW1lIFthbmRyb2lkSW5zdGFsbFRpbWVvdXRdIC0gVGhlIHRpbWVvdXQgb3B0aW9uIG5hbWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJzIGNhbiBpbmNyZWFzZSB0aGUgdGltZW91dC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYWxsb3dUZXN0UGFja2FnZXMgW2ZhbHNlXSAtIFNldCB0byB0cnVlIGluIG9yZGVyIHRvIGFsbG93IHRlc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2thZ2VzIGluc3RhbGxhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdXNlU2RjYXJkIFtmYWxzZV0gLSBTZXQgdG8gdHJ1ZSB0byBpbnN0YWxsIHRoZSBhcHAgb24gc2RjYXJkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiB0aGUgZGV2aWNlIG1lbW9yeS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZ3JhbnRQZXJtaXNzaW9ucyBbZmFsc2VdIC0gU2V0IHRvIHRydWUgaW4gb3JkZXIgdG8gZ3JhbnQgYWxsIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucyByZXF1ZXN0ZWQgaW4gdGhlIGFwcGxpY2F0aW9uJ3MgbWFuaWZlc3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b21hdGljYWxseSBhZnRlciB0aGUgaW5zdGFsbGF0aW9uIGlzIGNvbXBsZXRlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlciBBbmRyb2lkIDYrLlxuICovXG5cbi8qKlxuICogSW5zdGFsbHMgdGhlIGdpdmVuIC5hcGtzIHBhY2thZ2UgaW50byB0aGUgZGV2aWNlIHVuZGVyIHRlc3RcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBrcyAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIC5hcGtzIGZpbGVcbiAqIEBwYXJhbSB7P0luc3RhbGxBcGtzT3B0aW9uc30gb3B0aW9ucyAtIEluc3RhbGxhdGlvbiBvcHRpb25zXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIC5hcGtzIGJ1bmRsZSBjYW5ub3QgYmUgaW5zdGFsbGVkXG4gKi9cbmFwa3NVdGlsc01ldGhvZHMuaW5zdGFsbEFwa3MgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsQXBrcyAoYXBrcywgb3B0aW9ucyA9IHt9KSB7XG4gIG9wdGlvbnMgPSBfLmNsb25lRGVlcChvcHRpb25zKTtcbiAgXy5kZWZhdWx0cyhvcHRpb25zLCB7XG4gICAgdGltZW91dDogdGhpcy5hZGJFeGVjVGltZW91dCA9PT0gREVGQVVMVF9BREJfRVhFQ19USU1FT1VUID8gQVBLU19JTlNUQUxMX1RJTUVPVVQgOiB0aGlzLmFkYkV4ZWNUaW1lb3V0LFxuICAgIHRpbWVvdXRDYXBOYW1lOiAnYW5kcm9pZEluc3RhbGxUaW1lb3V0JyxcbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24ob3B0aW9ucywge3JlcGxhY2U6IHRydWV9KTtcblxuICBjb25zdCB0bXBSb290ID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gIHRyeSB7XG4gICAgY29uc3Qgc3BlY1BhdGggPSBhd2FpdCB0aGlzLmdldERldmljZVNwZWMocGF0aC5yZXNvbHZlKHRtcFJvb3QsICdkZXZpY2VTcGVjLmpzb24nKSk7XG4gICAgY29uc3QgYXJncyA9IFtcbiAgICAgICdleHRyYWN0LWFwa3MnLFxuICAgICAgJy0tYXBrcycsIGFwa3MsXG4gICAgICAnLS1vdXRwdXQtZGlyJywgdG1wUm9vdCxcbiAgICAgICctLWRldmljZS1zcGVjJywgc3BlY1BhdGgsXG4gICAgXTtcbiAgICBsb2cuZGVidWcoYEV4dHJhY3RpbmcgdGhlIGFwayBmaWxlcyBmcm9tICcke2Fwa3N9J2ApO1xuICAgIGF3YWl0IHRoaXMuZXhlY0J1bmRsZXRvb2woYXJncywgYENhbm5vdCBleHRyYWN0IHRoZSBhcHBsaWNhdGlvbiBidW5kbGUgYXQgJyR7YXBrc30nYCk7XG4gICAgY29uc3QgaW5zdGFsbEFyZ3MgPSBidWlsZEluc3RhbGxBcmdzKGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKSwgb3B0aW9ucyk7XG4gICAgY29uc3QgYXBrUGF0aHNUb0luc3RhbGwgPSAoYXdhaXQgZnMucmVhZGRpcih0bXBSb290KSlcbiAgICAgIC5maWx0ZXIoKG5hbWUpID0+IG5hbWUuZW5kc1dpdGgoQVBLX0VYVEVOU0lPTikpXG4gICAgICAubWFwKChuYW1lKSA9PiBwYXRoLnJlc29sdmUodG1wUm9vdCwgbmFtZSkpO1xuICAgIGxvZy5kZWJ1ZygnR290IHRoZSBmb2xsb3dpbmcgYXBrIGZpbGVzIHRvIGluc3RhbGw6ICcgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkoYXBrUGF0aHNUb0luc3RhbGwubWFwKCh4KSA9PiBwYXRoLmJhc2VuYW1lKHgpKSkpO1xuICAgIGNvbnN0IG91dHB1dCA9IGF3YWl0IHRoaXMuYWRiRXhlYyhbJ2luc3RhbGwtbXVsdGlwbGUnLCAuLi5pbnN0YWxsQXJncywgLi4uYXBrUGF0aHNUb0luc3RhbGxdLCB7XG4gICAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0Q2FwTmFtZTogb3B0aW9ucy50aW1lb3V0Q2FwTmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCB0cnVuY2F0ZWRPdXRwdXQgPSAoIV8uaXNTdHJpbmcob3V0cHV0KSB8fCBvdXRwdXQubGVuZ3RoIDw9IDMwMCkgP1xuICAgICAgb3V0cHV0IDogYCR7b3V0cHV0LnN1YnN0cigwLCAxNTApfS4uLiR7b3V0cHV0LnN1YnN0cihvdXRwdXQubGVuZ3RoIC0gMTUwKX1gO1xuICAgIGxvZy5kZWJ1ZyhgSW5zdGFsbCBjb21tYW5kIHN0ZG91dDogJHt0cnVuY2F0ZWRPdXRwdXR9YCk7XG4gICAgaWYgKF8uaW5jbHVkZXMob3V0cHV0LCAnSU5TVEFMTF9GQUlMRUQnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG91dHB1dCk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IGZzLnJpbXJhZih0bXBSb290KTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeHRyYWN0cyBhbmQgcmV0dXJucyB0aGUgZnVsbCBwYXRoIHRvIHRoZSBtYXN0ZXIgLmFwayBmaWxlIGluc2lkZSB0aGUgYnVuZGxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtzIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgLmFwa3MgZmlsZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZ1bGwgcGF0aCB0byB0aGUgbWFzdGVyIGJ1bmRsZSAuYXBrXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGV4dHJhY3RpbmcvZmluZGluZyB0aGUgZmlsZVxuICovXG5hcGtzVXRpbHNNZXRob2RzLmV4dHJhY3RCYXNlQXBrID0gYXN5bmMgZnVuY3Rpb24gZXh0cmFjdEJhc2VBcGsgKGFwa3MpIHtcbiAgcmV0dXJuIGF3YWl0IGV4dHJhY3RGcm9tQXBrcyhhcGtzLCBbJ3NwbGl0cycsIEJBU0VfQVBLXSk7XG59O1xuXG4vKipcbiAqIEV4dHJhY3RzIGFuZCByZXR1cm5zIHRoZSBmdWxsIHBhdGggdG8gdGhlIC5hcGssIHdoaWNoIGNvbnRhaW5zIHRoZSBjb3JyZXNwb25kaW5nXG4gKiByZXNvdXJjZXMgZm9yIHRoZSBnaXZlbiBsYW5ndWFnZSBpbiB0aGUgLmFwa3MgYnVuZGxlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGtzIC0gVGhlIGZ1bGwgcGF0aCB0byB0aGUgLmFwa3MgZmlsZVxuICogQHBhcmFtIHs/c3RyaW5nfSBsYW5ndWFnZSAtIFRoZSBsYW5ndWFnZSBhYmJyZXZpYXRpb24uIFRoZSBkZWZhdWx0IGxhbmd1YWdlIGlzXG4gKiBnb2luZyB0byBiZSBzZWxlY3RlZCBpZiBpdCBpcyBub3Qgc2V0LlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZ1bGwgcGF0aCB0byB0aGUgY29ycmVzcG9uZGluZyBsYW5ndWFnZSAuYXBrIG9yIHRoZSBtYXN0ZXIgLmFwa1xuICogaWYgbGFuZ3VhZ2Ugc3BsaXQgaXMgbm90IGVuYWJsZWQgZm9yIHRoZSBidW5kbGUuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGV4dHJhY3RpbmcvZmluZGluZyB0aGUgZmlsZVxuICovXG5hcGtzVXRpbHNNZXRob2RzLmV4dHJhY3RMYW5ndWFnZUFwayA9IGFzeW5jIGZ1bmN0aW9uIGV4dHJhY3RMYW5ndWFnZUFwayAoYXBrcywgbGFuZ3VhZ2UgPSBudWxsKSB7XG4gIGlmIChsYW5ndWFnZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgZXh0cmFjdEZyb21BcGtzKGFwa3MsIFsnc3BsaXRzJywgTEFOR1VBR0VfQVBLKGxhbmd1YWdlKV0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGxvZy5kZWJ1ZyhlLm1lc3NhZ2UpO1xuICAgICAgbG9nLmluZm8oYEFzc3VtaW5nIHRoYXQgc3BsaXR0aW5nIGJ5IGxhbmd1YWdlIGlzIG5vdCBlbmFibGVkIGZvciB0aGUgJyR7YXBrc30nIGJ1bmRsZSBgICtcbiAgICAgICAgYGFuZCByZXR1cm5pbmcgdGhlIG1haW4gYXBrIGluc3RlYWRgKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4dHJhY3RCYXNlQXBrKGFwa3MpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRlZmF1bHRMYW5ndWFnZXMgPSBbJ2VuJywgJ2VuX3VzJ107XG4gIGZvciAoY29uc3QgbGFuZyBvZiBkZWZhdWx0TGFuZ3VhZ2VzKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBleHRyYWN0RnJvbUFwa3MoYXBrcywgWydzcGxpdHMnLCBMQU5HVUFHRV9BUEsobGFuZyldKTtcbiAgICB9IGNhdGNoIChpZ24pIHt9XG4gIH1cblxuICBsb2cuaW5mbyhgQ2Fubm90IGZpbmQgYW55IHNwbGl0IGFwayBmb3IgdGhlIGRlZmF1bHQgbGFuZ3VhZ2VzICR7SlNPTi5zdHJpbmdpZnkoZGVmYXVsdExhbmd1YWdlcyl9LiBgICtcbiAgICBgUmV0dXJuaW5nIHRoZSBtYWluIGFwayBpbnN0ZWFkLmApO1xuICByZXR1cm4gYXdhaXQgdGhpcy5leHRyYWN0QmFzZUFwayhhcGtzKTtcbn07XG5cbmFwa3NVdGlsc01ldGhvZHMuaXNUZXN0UGFja2FnZU9ubHlFcnJvciA9IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgcmV0dXJuIC9cXFtJTlNUQUxMX0ZBSUxFRF9URVNUX09OTFlcXF0vLnRlc3Qob3V0cHV0KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFwa3NVdGlsc01ldGhvZHM7XG4iXSwiZmlsZSI6ImxpYi90b29scy9hcGtzLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
