"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkForDependencies = checkForDependencies;
exports.PROJECT_FILE = exports.WDA_RUNNER_BUNDLE_ID = exports.WDA_BUNDLE_ID = exports.BOOTSTRAP_PATH = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _nodeSimctl = require("node-simctl");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _os = require("os");

var _utils = require("./lib/utils");

const log = _appiumSupport.logger.getLogger('WebDriverAgent');

const execLogger = {
  logNonEmptyLines(data, fn) {
    data = Buffer.isBuffer(data) ? data.toString() : data;

    for (const line of data.split(_os.EOL)) {
      if (line) {
        fn(line);
      }
    }
  },

  debug(data) {
    this.logNonEmptyLines(data, log.debug.bind(log));
  },

  error(data) {
    this.logNonEmptyLines(data, log.error.bind(log));
  }

};
const IOS = 'iOS';
const TVOS = 'tvOS';
const CARTHAGE_CMD = 'carthage';
const CARTFILE = 'Cartfile.resolved';
const CARTHAGE_ROOT = 'Carthage';
const BOOTSTRAP_PATH = __dirname.endsWith('build') ? _path.default.resolve(__dirname, '..') : __dirname;
exports.BOOTSTRAP_PATH = BOOTSTRAP_PATH;
const WDA_BUNDLE_ID = 'com.apple.test.WebDriverAgentRunner-Runner';
exports.WDA_BUNDLE_ID = WDA_BUNDLE_ID;
const WDA_RUNNER_BUNDLE_ID = 'com.facebook.WebDriverAgentRunner';
exports.WDA_RUNNER_BUNDLE_ID = WDA_RUNNER_BUNDLE_ID;
const PROJECT_FILE = 'project.pbxproj';
exports.PROJECT_FILE = PROJECT_FILE;

async function hasTvOSSims() {
  const devices = _lodash.default.flatten(Object.values((await (0, _nodeSimctl.getDevices)(null, TVOS))));

  return !_lodash.default.isEmpty(devices);
}

function getCartfileLocations() {
  const cartfile = _path.default.resolve(BOOTSTRAP_PATH, CARTFILE);

  const installedCartfile = _path.default.resolve(BOOTSTRAP_PATH, CARTHAGE_ROOT, CARTFILE);

  return {
    cartfile,
    installedCartfile
  };
}

async function needsUpdate(cartfile, installedCartfile) {
  return !(await (0, _utils.fileCompare)(cartfile, installedCartfile));
}

async function fetchDependencies(useSsl = false) {
  log.info('Fetching dependencies');

  if (!(await _appiumSupport.fs.which(CARTHAGE_CMD))) {
    log.errorAndThrow('Please make sure that you have Carthage installed (https://github.com/Carthage/Carthage)');
  }

  const {
    cartfile,
    installedCartfile
  } = getCartfileLocations();

  if (!(await needsUpdate(cartfile, installedCartfile))) {
    log.info('Dependencies up-to-date');
    return false;
  }

  let platforms = [IOS];

  if (await hasTvOSSims()) {
    platforms.push(TVOS);
  } else {
    log.debug('tvOS platform will not be included into Carthage bootstrap, because no Simulator devices have been created for it');
  }

  log.info(`Installing/updating dependencies for platforms ${platforms.map(p => `'${p}'`).join(', ')}`);
  let args = ['bootstrap'];

  if (useSsl) {
    args.push('--use-ssh');
  }

  args.push('--platform', platforms.join(','));

  try {
    await (0, _teen_process.exec)(CARTHAGE_CMD, args, {
      logger: execLogger,
      cwd: BOOTSTRAP_PATH
    });
  } catch (err) {
    await _appiumSupport.fs.rimraf(_path.default.resolve(BOOTSTRAP_PATH, CARTHAGE_ROOT));
    throw err;
  }

  await _appiumSupport.fs.copyFile(cartfile, installedCartfile);
  log.debug(`Finished fetching dependencies`);
  return true;
}

async function checkForDependencies(opts = {}) {
  return await fetchDependencies(opts.useSsl);
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(checkForDependencies);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
