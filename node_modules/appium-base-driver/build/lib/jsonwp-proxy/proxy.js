"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.JWProxy = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _status = require("../jsonwp-status/status");

var _errors = require("../protocol/errors");

var _driver = _interopRequireDefault(require("../basedriver/driver"));

var _routes = require("../protocol/routes");

var _protocolConverter = _interopRequireDefault(require("./protocol-converter"));

const log = _appiumSupport.logger.getLogger('WD Proxy');

const LOG_OBJ_LENGTH = 1024;
const DEFAULT_REQUEST_TIMEOUT = 240000;
const {
  MJSONWP,
  W3C
} = _driver.default.DRIVER_PROTOCOL;

class JWProxy {
  constructor(opts = {}) {
    Object.assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null,
      timeout: DEFAULT_REQUEST_TIMEOUT,
      keepAlive: false
    }, opts);
    this.scheme = this.scheme.toLowerCase();
    this._activeRequests = [];
    this._downstreamProtocol = null;
    this.protocolConverter = new _protocolConverter.default(this.proxy.bind(this));
  }

  async request(...args) {
    const currentRequest = (0, _requestPromise.default)(...args);

    this._activeRequests.push(currentRequest);

    return await currentRequest.finally(() => _lodash.default.pull(this._activeRequests, currentRequest));
  }

  getActiveRequestsCount() {
    return this._activeRequests.length;
  }

  cancelActiveRequests() {
    try {
      for (let r of this._activeRequests) {
        r.cancel();
      }
    } finally {
      this._activeRequests = [];
    }
  }

  endpointRequiresSessionId(endpoint) {
    return !_lodash.default.includes(['/session', '/sessions', '/status'], endpoint);
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
    this.protocolConverter.downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getUrlForProxy(url) {
    if (url === '') {
      url = '/';
    }

    const proxyBase = `${this.scheme}://${this.server}:${this.port}${this.base}`;
    const endpointRe = '(/(session|status))';
    let remainingUrl = '';

    if (/^http/.test(url)) {
      const first = new RegExp(`(https?://.+)${endpointRe}`).exec(url);

      if (!first) {
        throw new Error('Got a complete url but could not extract JWP endpoint');
      }

      remainingUrl = url.replace(first[1], '');
    } else if (new RegExp('^/').test(url)) {
      remainingUrl = url;
    } else {
      throw new Error(`Did not know what to do with url '${url}'`);
    }

    const stripPrefixRe = new RegExp('^.*?(/(session|status).*)$');

    if (stripPrefixRe.test(remainingUrl)) {
      remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
    }

    if (!new RegExp(endpointRe).test(remainingUrl)) {
      remainingUrl = `/session/${this.sessionId}${remainingUrl}`;
    }

    const requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

    if (requiresSessionId && this.sessionId === null) {
      throw new Error('Trying to proxy a session command without session id');
    }

    const sessionBaseRe = new RegExp('^/session/([^/]+)');

    if (sessionBaseRe.test(remainingUrl)) {
      const match = sessionBaseRe.exec(remainingUrl);
      remainingUrl = remainingUrl.replace(match[1], this.sessionId);
    } else if (requiresSessionId) {
      throw new Error(`Could not find :session section for url: ${remainingUrl}`);
    }

    remainingUrl = remainingUrl.replace(/\/$/, '');
    return proxyBase + remainingUrl;
  }

  async proxy(url, method, body = null) {
    method = method.toUpperCase();
    const newUrl = this.getUrlForProxy(url);
    const reqOpts = {
      agent: false,
      url: newUrl,
      method,
      headers: {
        'content-type': 'application/json; charset=utf-8',
        'user-agent': 'appium',
        accept: 'application/json, */*'
      },
      resolveWithFullResponse: true,
      timeout: this.timeout,
      forever: this.keepAlive
    };

    if (_appiumSupport.util.hasValue(body)) {
      if (typeof body !== 'object') {
        try {
          reqOpts.json = JSON.parse(body);
        } catch (e) {
          throw new Error('Cannot interpret the request body as valid JSON: ' + _lodash.default.truncate(_lodash.default.isString(body) ? body : JSON.stringify(body), {
            length: LOG_OBJ_LENGTH
          }));
        }
      } else {
        reqOpts.json = body;
      }
    }

    if (method === 'GET') {
      reqOpts.json = null;
    }

    log.debug(`Proxying [${method} ${url || '/'}] to [${method} ${newUrl}] ` + (body ? `with body: ${_lodash.default.truncate(_lodash.default.isString(body) ? body : JSON.stringify(body), {
      length: LOG_OBJ_LENGTH
    })}` : 'with no body'));

    const throwProxyError = error => {
      const message = `The request to ${url} has failed`;
      const err = new Error(message);
      err.message = message;
      err.error = error;
      err.statusCode = 500;
      throw err;
    };

    try {
      const res = await this.request(reqOpts);

      const resObj = _appiumSupport.util.safeJsonParse(res.body);

      if (!_lodash.default.isPlainObject(resObj)) {
        throwProxyError(res.body);
      }

      log.debug(`Got response with status ${res.statusCode}: ` + _lodash.default.truncate(_lodash.default.isString(res.body) ? res.body : JSON.stringify(res.body), {
        length: LOG_OBJ_LENGTH
      }));
      const isSessionCreationRequest = /\/session$/.test(url) && method === 'POST';

      if (isSessionCreationRequest && res.statusCode === 200) {
        this.sessionId = resObj.sessionId;
      }

      if (!this.downstreamProtocol) {
        this.downstreamProtocol = this.getProtocolFromResBody(resObj);
        log.debug(`Determined the downstream protocol as '${this.downstreamProtocol}'`);
      } else if (isSessionCreationRequest) {
        const previousValue = this.downstreamProtocol;
        this.downstreamProtocol = this.getProtocolFromResBody(resObj);

        if (previousValue && previousValue !== this.downstreamProtocol) {
          log.debug(`Updated the downstream protocol to '${this.downstreamProtocol}' ` + `as per session creation request`);
        } else {
          log.debug(`Determined the downstream protocol as '${this.downstreamProtocol}' ` + `per session creation request`);
        }
      }

      if (res.statusCode < 400 && this.downstreamProtocol === MJSONWP && _lodash.default.has(resObj, 'status') && parseInt(resObj.status, 10) !== 0) {
        throwProxyError(resObj);
      }

      return [res, resObj];
    } catch (e) {
      if (_appiumSupport.util.hasValue(e.error)) {
        log.warn(`Got an unexpected response: ` + _lodash.default.truncate(_lodash.default.isString(e.error) ? e.error : JSON.stringify(e.error), {
          length: LOG_OBJ_LENGTH
        }));
      } else {
        log.debug(e.stack);
      }

      throw new _errors.errors.ProxyRequestError(`Could not proxy command to remote server. ` + `Original error: ${e.message}`, e.error, e.statusCode);
    }
  }

  getProtocolFromResBody(resObj) {
    if (_appiumSupport.util.hasValue(resObj.status)) {
      return MJSONWP;
    }

    if (_appiumSupport.util.hasValue(resObj.value)) {
      return W3C;
    }
  }

  requestToCommandName(url, method) {
    const extractCommandName = pattern => {
      const pathMatch = pattern.exec(url);
      return pathMatch ? (0, _routes.routeToCommandName)(pathMatch[1], method) : null;
    };

    let commandName = (0, _routes.routeToCommandName)(url, method);

    if (!commandName && _lodash.default.includes(url, '/wd/hub/session/')) {
      commandName = extractCommandName(/\/wd\/hub\/session\/[^/]+(.+)/);
    }

    if (!commandName && _lodash.default.includes(url, '/wd/hub/')) {
      commandName = extractCommandName(/\/wd\/hub(\/.+)/);
    }

    return commandName;
  }

  async proxyCommand(url, method, body = null) {
    const commandName = this.requestToCommandName(url, method);

    if (!commandName) {
      return await this.proxy(url, method, body);
    }

    log.debug(`Matched '${url}' to command name '${commandName}'`);
    return await this.protocolConverter.convertAndProxy(commandName, url, method, body);
  }

  async command(url, method, body = null) {
    let response;
    let resObj;

    try {
      [response, resObj] = await this.proxyCommand(url, method, body);
    } catch (err) {
      if ((0, _errors.isErrorType)(err, _errors.errors.ProxyRequestError)) {
        throw err.getActualError();
      }

      throw new _errors.errors.UnknownError(err.message);
    }

    const protocol = this.getProtocolFromResBody(resObj);

    if (protocol === MJSONWP) {
      if (response.statusCode === 200 && resObj.status === 0) {
        return resObj.value;
      }

      const status = parseInt(resObj.status, 10);

      if (!isNaN(status) && status !== 0) {
        let message = resObj.value;

        if (_lodash.default.has(message, 'message')) {
          message = message.message;
        }

        throw (0, _errors.errorFromMJSONWPStatusCode)(status, _lodash.default.isEmpty(message) ? (0, _status.getSummaryByCode)(status) : message);
      }
    } else if (protocol === W3C) {
      if (response.statusCode < 300) {
        return resObj.value;
      }

      if (_lodash.default.isPlainObject(resObj.value) && resObj.value.error) {
        throw (0, _errors.errorFromW3CJsonCode)(resObj.value.error, resObj.value.message, resObj.value.stacktrace);
      }
    } else if (response.statusCode === 200) {
      return resObj;
    }

    throw new _errors.errors.UnknownError(`Did not know what to do with response code '${response.statusCode}' ` + `and response body '${_lodash.default.truncate(JSON.stringify(resObj), {
      length: 300
    })}'`);
  }

  getSessionIdFromUrl(url) {
    const match = url.match(/\/session\/([^/]+)/);
    return match ? match[1] : null;
  }

  async proxyReqRes(req, res) {
    let [response, body] = await this.proxyCommand(req.originalUrl, req.method, req.body);
    res.headers = response.headers;
    res.set('content-type', response.headers['content-type']);
    body = _appiumSupport.util.safeJsonParse(body);

    if (body && body.sessionId) {
      const reqSessionId = this.getSessionIdFromUrl(req.originalUrl);

      if (reqSessionId) {
        log.info(`Replacing sessionId ${body.sessionId} with ${reqSessionId}`);
        body.sessionId = reqSessionId;
      } else if (this.sessionId) {
        log.info(`Replacing sessionId ${body.sessionId} with ${this.sessionId}`);
        body.sessionId = this.sessionId;
      }
    }

    res.status(response.statusCode).send(JSON.stringify(body));
  }

}

exports.JWProxy = JWProxy;
var _default = JWProxy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
