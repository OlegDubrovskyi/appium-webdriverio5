"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _child_process = _interopRequireDefault(require("child_process"));

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const BASE_PATH = '/wd/hub';
const FEAT_FLAG = 'execute_driver_script';
const DEFAULT_SCRIPT_TIMEOUT = 1000 * 60 * 60;
const SCRIPT_TYPE_WDIO = 'webdriverio';
let commands = {};

commands.executeDriverScript = async function (script, scriptType = 'webdriverio', timeout = DEFAULT_SCRIPT_TIMEOUT) {
  if (!this.isFeatureEnabled(FEAT_FLAG)) {
    throw new Error(`Execute driver script functionality is not available ` + `unless server is started with --allow-insecure including ` + `the '${FEAT_FLAG}' flag, e.g., --allow-insecure=${FEAT_FLAG}`);
  }

  if (scriptType !== SCRIPT_TYPE_WDIO) {
    throw new Error(`Only the '${SCRIPT_TYPE_WDIO}' script type is currently supported`);
  }

  if (!this.opts.address || !this.opts.port) {
    throw new Error('Address or port of running server were not defined; this ' + 'is required. This is probably a programming error in the driver');
  }

  if (!_lodash.default.isNumber(timeout)) {
    throw new Error('Timeout parameter must be a number');
  }

  const driverOpts = {
    sessionId: this.sessionId,
    protocol: 'http',
    hostname: this.opts.address,
    port: this.opts.port,
    path: BASE_PATH,
    isW3C: this.isW3CProtocol(),
    isMobile: true,
    capabilities: this.caps
  };

  _logger.default.info(`Constructed webdriverio driver options; W3C mode is ${driverOpts.isW3C ? 'on' : 'off'}`);

  const childScript = _path.default.join(__dirname, 'execute-child.js');

  _logger.default.info(`Forking process to run webdriver script as child using ${childScript}`);

  const scriptProc = _child_process.default.fork(childScript);

  let timeoutCanceled = false;

  try {
    const timeoutStart = Date.now();

    const waitForResult = async function () {
      const resPromise = new _bluebird.default(res => {
        scriptProc.on('message', res);
      });
      const res = await resPromise;

      _logger.default.info('Received execute driver script result from child process, shutting it down');

      if (res.error) {
        throw new Error(res.error.message);
      }

      return res.success;
    };

    const waitForTimeout = async function () {
      while (!timeoutCanceled && Date.now() - timeoutStart < timeout) {
        await _bluebird.default.delay(500);
      }

      if (timeoutCanceled) {
        return;
      }

      throw new Error(`Execute driver script timed out after ${timeout}ms. ` + `You can adjust this with the 'timeout' parameter.`);
    };

    _logger.default.info('Sending driver and script data to child');

    scriptProc.send({
      driverOpts,
      script,
      timeout
    });
    return await _bluebird.default.race([waitForResult(), waitForTimeout()]);
  } catch (err) {
    throw new Error(`Could not execute driver script. Original error was: ${err}`);
  } finally {
    timeoutCanceled = true;

    _logger.default.info('Disconnecting from and killing driver script child proc');

    scriptProc.disconnect();
    scriptProc.kill();
  }
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
