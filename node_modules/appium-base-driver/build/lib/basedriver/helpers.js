"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureApp = configureApp;
exports.isPackageOrBundle = isPackageOrBundle;
exports.getCoordDefault = getCoordDefault;
exports.getSwipeTouchDuration = getSwipeTouchDuration;
exports.duplicateKeys = duplicateKeys;
exports.parseCapsArray = parseCapsArray;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _logger = _interopRequireDefault(require("./logger"));

var _fs2 = _interopRequireDefault(require("fs"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _request = _interopRequireDefault(require("request"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _sanitizeFilename = _interopRequireDefault(require("sanitize-filename"));

const ZIP_EXTS = ['.zip', '.ipa'];
const ZIP_MIME_TYPES = ['application/zip', 'application/x-zip-compressed', 'multipart/x-zip'];
const APPLICATIONS_CACHE = new _lruCache.default({
  max: 100
});
const APPLICATIONS_CACHE_GUARD = new _asyncLock.default();
const SANITIZE_REPLACEMENT = '-';
const DEFAULT_BASENAME = 'appium-app';

async function retrieveHeaders(link) {
  try {
    const response = await (0, _requestPromise.default)({
      url: link,
      method: 'HEAD',
      resolveWithFullResponse: true,
      timeout: 5000
    });
    return response.headers;
  } catch (e) {
    _logger.default.debug(`Cannot send HEAD request to '${link}'. Original error: ${e.message}`);
  }

  return {};
}

function getCachedApplicationPath(link, currentModified) {
  if (!APPLICATIONS_CACHE.has(link) || !currentModified) {
    return null;
  }

  const {
    lastModified,
    fullPath
  } = APPLICATIONS_CACHE.get(link);

  if (lastModified && currentModified.getTime() <= lastModified.getTime()) {
    _logger.default.debug(`Reusing already downloaded application at '${fullPath}'`);

    return fullPath;
  }

  _logger.default.debug(`'Last-Modified' timestamp of '${link}' has been updated. ` + `An updated copy of the application is going to be downloaded.`);

  return null;
}

function verifyAppExtension(app, supportedAppExtensions) {
  if (supportedAppExtensions.includes(_path.default.extname(app))) {
    return app;
  }

  throw new Error(`New app path '${app}' did not have extension(s) '${supportedAppExtensions}'`);
}

async function configureApp(app, supportedAppExtensions) {
  if (!_lodash.default.isString(app)) {
    return;
  }

  if (!_lodash.default.isArray(supportedAppExtensions)) {
    supportedAppExtensions = [supportedAppExtensions];
  }

  let newApp = app;
  let shouldUnzipApp = false;
  let archiveHash = null;
  let currentModified = null;

  const {
    protocol,
    pathname
  } = _url.default.parse(newApp);

  const isUrl = ['http:', 'https:'].includes(protocol);
  return await APPLICATIONS_CACHE_GUARD.acquire(app, async () => {
    if (isUrl) {
      _logger.default.info(`Using downloadable app '${newApp}'`);

      const headers = await retrieveHeaders(newApp);

      if (headers['last-modified']) {
        _logger.default.debug(`Last-Modified: ${headers['last-modified']}`);

        currentModified = new Date(headers['last-modified']);
      }

      const cachedPath = getCachedApplicationPath(app, currentModified);

      if (cachedPath) {
        if (await _appiumSupport.fs.exists(cachedPath)) {
          _logger.default.info(`Reusing the previously downloaded application at '${cachedPath}'`);

          return verifyAppExtension(cachedPath, supportedAppExtensions);
        }

        _logger.default.info(`The application at '${cachedPath}' does not exist anymore. Deleting it from the cache`);

        APPLICATIONS_CACHE.del(app);
      }

      let fileName = null;
      const basename = (0, _sanitizeFilename.default)(_path.default.basename(decodeURIComponent(pathname)), {
        replacement: SANITIZE_REPLACEMENT
      });

      const extname = _path.default.extname(basename);

      if (ZIP_EXTS.includes(extname)) {
        fileName = basename;
        shouldUnzipApp = true;
      }

      if (headers['content-type']) {
        _logger.default.debug(`Content-Type: ${headers['content-type']}`);

        if (ZIP_MIME_TYPES.includes(headers['content-type'])) {
          if (!fileName) {
            fileName = `${DEFAULT_BASENAME}.zip`;
          }

          shouldUnzipApp = true;
        }
      }

      if (headers['content-disposition'] && /^attachment/i.test(headers['content-disposition'])) {
        _logger.default.debug(`Content-Disposition: ${headers['content-disposition']}`);

        const match = /filename="([^"]+)/i.exec(headers['content-disposition']);

        if (match) {
          fileName = (0, _sanitizeFilename.default)(match[1], {
            replacement: SANITIZE_REPLACEMENT
          });
          shouldUnzipApp = shouldUnzipApp || ZIP_EXTS.includes(_path.default.extname(fileName));
        }
      }

      if (!fileName) {
        const resultingName = basename ? basename.substring(0, basename.length - extname.length) : DEFAULT_BASENAME;
        let resultingExt = extname;

        if (!supportedAppExtensions.includes(resultingExt)) {
          _logger.default.info(`The current file extension '${resultingExt}' is not supported. ` + `Defaulting to '${_lodash.default.first(supportedAppExtensions)}'`);

          resultingExt = _lodash.default.first(supportedAppExtensions);
        }

        fileName = `${resultingName}${resultingExt}`;
      }

      const targetPath = await _appiumSupport.tempDir.path({
        prefix: fileName,
        suffix: ''
      });
      newApp = await downloadApp(newApp, targetPath);
    } else if (await _appiumSupport.fs.exists(newApp)) {
      _logger.default.info(`Using local app '${newApp}'`);

      shouldUnzipApp = ZIP_EXTS.includes(_path.default.extname(newApp));
    } else {
      let errorMessage = `The application at '${newApp}' does not exist or is not accessible`;

      if (_lodash.default.isString(protocol) && protocol.length > 2) {
        errorMessage = `The protocol '${protocol}' used in '${newApp}' is not supported. ` + `Only http: and https: protocols are supported`;
      }

      throw new Error(errorMessage);
    }

    if (shouldUnzipApp) {
      const archivePath = newApp;
      archiveHash = await _appiumSupport.fs.hash(archivePath);

      if (APPLICATIONS_CACHE.has(app) && archiveHash === APPLICATIONS_CACHE.get(app).hash) {
        const {
          fullPath
        } = APPLICATIONS_CACHE.get(app);

        if (await _appiumSupport.fs.exists(fullPath)) {
          if (archivePath !== app) {
            await _appiumSupport.fs.rimraf(archivePath);
          }

          _logger.default.info(`Will reuse previously cached application at '${fullPath}'`);

          return verifyAppExtension(fullPath, supportedAppExtensions);
        }

        _logger.default.info(`The application at '${fullPath}' does not exist anymore. Deleting it from the cache`);

        APPLICATIONS_CACHE.del(app);
      }

      const tmpRoot = await _appiumSupport.tempDir.openDir();

      try {
        newApp = await unzipApp(archivePath, tmpRoot, supportedAppExtensions);
      } finally {
        if (newApp !== archivePath && archivePath !== app) {
          await _appiumSupport.fs.rimraf(archivePath);
        }
      }

      _logger.default.info(`Unzipped local app to '${newApp}'`);
    } else if (!_path.default.isAbsolute(newApp)) {
      newApp = _path.default.resolve(process.cwd(), newApp);

      _logger.default.warn(`The current application path '${app}' is not absolute ` + `and has been rewritten to '${newApp}'. Consider using absolute paths rather than relative`);

      app = newApp;
    }

    verifyAppExtension(newApp, supportedAppExtensions);

    if (app !== newApp && (archiveHash || currentModified)) {
      APPLICATIONS_CACHE.set(app, {
        hash: archiveHash,
        lastModified: currentModified,
        fullPath: newApp
      });
    }

    return newApp;
  });
}

async function downloadApp(app, targetPath) {
  const {
    href
  } = _url.default.parse(app);

  const started = process.hrtime();

  try {
    await new _bluebird.default((resolve, reject) => {
      (0, _request.default)(href).on('error', reject).on('response', res => {
        if (res.statusCode >= 400) {
          return reject(new Error(`${res.statusCode} - ${res.statusMessage}`));
        }
      }).pipe(_fs2.default.createWriteStream(targetPath)).on('close', resolve);
    });
  } catch (err) {
    throw new Error(`Problem downloading app from url ${href}: ${err.message}`);
  }

  const [seconds, ns] = process.hrtime(started);
  const secondsElapsed = seconds + ns / 1e09;
  const {
    size
  } = await _appiumSupport.fs.stat(targetPath);

  _logger.default.debug(`'${href}' (${_appiumSupport.util.toReadableSizeString(size)}) ` + `has been downloaded to '${targetPath}' in ${secondsElapsed.toFixed(3)}s`);

  if (secondsElapsed >= 2) {
    const bytesPerSec = Math.floor(size / secondsElapsed);

    _logger.default.debug(`Approximate download speed: ${_appiumSupport.util.toReadableSizeString(bytesPerSec)}/s`);
  }

  return targetPath;
}

async function walkDir(dir) {
  const result = [];

  for (const name of await _appiumSupport.fs.readdir(dir)) {
    const currentPath = _path.default.join(dir, name);

    result.push(currentPath);

    if ((await _appiumSupport.fs.stat(currentPath)).isDirectory()) {
      result.push(...(await walkDir(currentPath)));
    }
  }

  return result;
}

async function unzipApp(zipPath, dstRoot, supportedAppExtensions) {
  await _appiumSupport.zip.assertValidZip(zipPath);

  if (!_lodash.default.isArray(supportedAppExtensions)) {
    supportedAppExtensions = [supportedAppExtensions];
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();

  try {
    _logger.default.debug(`Unzipping '${zipPath}'`);

    await _appiumSupport.zip.extractAllTo(zipPath, tmpRoot);
    const allExtractedItems = await walkDir(tmpRoot);

    _logger.default.debug(`Extracted ${allExtractedItems.length} item(s) from '${zipPath}'`);

    const isSupportedAppItem = relativePath => supportedAppExtensions.includes(_path.default.extname(relativePath)) || _lodash.default.some(supportedAppExtensions, x => relativePath.includes(`${x}${_path.default.sep}`));

    const itemsToKeep = allExtractedItems.map(itemPath => _path.default.relative(tmpRoot, itemPath)).filter(relativePath => isSupportedAppItem(relativePath)).map(relativePath => _path.default.resolve(tmpRoot, relativePath));

    const itemsToRemove = _lodash.default.difference(allExtractedItems, itemsToKeep).filter(itemToRemovePath => !_lodash.default.some(itemsToKeep, itemToKeepPath => itemToKeepPath.startsWith(itemToRemovePath)));

    await _bluebird.default.all(itemsToRemove, async itemPath => {
      if (await _appiumSupport.fs.exists(itemPath)) {
        await _appiumSupport.fs.rimraf(itemPath);
      }
    });
    const allBundleItems = (await walkDir(tmpRoot)).map(itemPath => _path.default.relative(tmpRoot, itemPath)).filter(relativePath => isSupportedAppItem(relativePath)).sort((a, b) => a.split(_path.default.sep).length - b.split(_path.default.sep).length);

    if (_lodash.default.isEmpty(allBundleItems)) {
      throw new Error(`App zip unzipped OK, but we could not find ${supportedAppExtensions} bundle(s) ` + `in it. Make sure your archive contains ${supportedAppExtensions} package(s) ` + `and nothing else`);
    }

    const matchedBundle = _lodash.default.first(allBundleItems);

    _logger.default.debug(`Matched ${allBundleItems.length} item(s) in the extracted archive. ` + `Assuming '${matchedBundle}' is the correct bundle`);

    await _appiumSupport.fs.mv(_path.default.resolve(tmpRoot, matchedBundle), _path.default.resolve(dstRoot, matchedBundle), {
      mkdirp: true
    });
    return _path.default.resolve(dstRoot, matchedBundle);
  } finally {
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
}

function isPackageOrBundle(app) {
  return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
}

function getCoordDefault(val) {
  return _appiumSupport.util.hasValue(val) ? val : 0.5;
}

function getSwipeTouchDuration(waitGesture) {
  let duration = 0.8;

  if (typeof waitGesture.options.ms !== 'undefined' && waitGesture.options.ms) {
    duration = waitGesture.options.ms / 1000;

    if (duration === 0) {
      duration = 0.1;
    }
  }

  return duration;
}

function duplicateKeys(input, firstKey, secondKey) {
  if (_lodash.default.isArray(input)) {
    return input.map(item => duplicateKeys(item, firstKey, secondKey));
  }

  if (_lodash.default.isPlainObject(input)) {
    const resultObj = {};

    for (let [key, value] of _lodash.default.toPairs(input)) {
      const recursivelyCalledValue = duplicateKeys(value, firstKey, secondKey);

      if (key === firstKey) {
        resultObj[secondKey] = recursivelyCalledValue;
      } else if (key === secondKey) {
        resultObj[firstKey] = recursivelyCalledValue;
      }

      resultObj[key] = recursivelyCalledValue;
    }

    return resultObj;
  }

  return input;
}

function parseCapsArray(cap) {
  let parsedCaps;

  try {
    parsedCaps = JSON.parse(cap);

    if (_lodash.default.isArray(parsedCaps)) {
      return parsedCaps;
    }
  } catch (ign) {
    _logger.default.warn(`Failed to parse capability as JSON array`);
  }

  if (_lodash.default.isString(cap)) {
    return [cap];
  }

  throw new Error(`must provide a string or JSON Array; received ${cap}`);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2hlbHBlcnMuanMiXSwibmFtZXMiOlsiWklQX0VYVFMiLCJaSVBfTUlNRV9UWVBFUyIsIkFQUExJQ0FUSU9OU19DQUNIRSIsIkxSVSIsIm1heCIsIkFQUExJQ0FUSU9OU19DQUNIRV9HVUFSRCIsIkFzeW5jTG9jayIsIlNBTklUSVpFX1JFUExBQ0VNRU5UIiwiREVGQVVMVF9CQVNFTkFNRSIsInJldHJpZXZlSGVhZGVycyIsImxpbmsiLCJyZXNwb25zZSIsInVybCIsIm1ldGhvZCIsInJlc29sdmVXaXRoRnVsbFJlc3BvbnNlIiwidGltZW91dCIsImhlYWRlcnMiLCJlIiwibG9nZ2VyIiwiZGVidWciLCJtZXNzYWdlIiwiZ2V0Q2FjaGVkQXBwbGljYXRpb25QYXRoIiwiY3VycmVudE1vZGlmaWVkIiwiaGFzIiwibGFzdE1vZGlmaWVkIiwiZnVsbFBhdGgiLCJnZXQiLCJnZXRUaW1lIiwidmVyaWZ5QXBwRXh0ZW5zaW9uIiwiYXBwIiwic3VwcG9ydGVkQXBwRXh0ZW5zaW9ucyIsImluY2x1ZGVzIiwicGF0aCIsImV4dG5hbWUiLCJFcnJvciIsImNvbmZpZ3VyZUFwcCIsIl8iLCJpc1N0cmluZyIsImlzQXJyYXkiLCJuZXdBcHAiLCJzaG91bGRVbnppcEFwcCIsImFyY2hpdmVIYXNoIiwicHJvdG9jb2wiLCJwYXRobmFtZSIsInBhcnNlIiwiaXNVcmwiLCJhY3F1aXJlIiwiaW5mbyIsIkRhdGUiLCJjYWNoZWRQYXRoIiwiZnMiLCJleGlzdHMiLCJkZWwiLCJmaWxlTmFtZSIsImJhc2VuYW1lIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZW1lbnQiLCJ0ZXN0IiwibWF0Y2giLCJleGVjIiwicmVzdWx0aW5nTmFtZSIsInN1YnN0cmluZyIsImxlbmd0aCIsInJlc3VsdGluZ0V4dCIsImZpcnN0IiwidGFyZ2V0UGF0aCIsInRlbXBEaXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJkb3dubG9hZEFwcCIsImVycm9yTWVzc2FnZSIsImFyY2hpdmVQYXRoIiwiaGFzaCIsInJpbXJhZiIsInRtcFJvb3QiLCJvcGVuRGlyIiwidW56aXBBcHAiLCJpc0Fic29sdXRlIiwicmVzb2x2ZSIsInByb2Nlc3MiLCJjd2QiLCJ3YXJuIiwic2V0IiwiaHJlZiIsInN0YXJ0ZWQiLCJocnRpbWUiLCJCIiwicmVqZWN0Iiwib24iLCJyZXMiLCJzdGF0dXNDb2RlIiwic3RhdHVzTWVzc2FnZSIsInBpcGUiLCJfZnMiLCJjcmVhdGVXcml0ZVN0cmVhbSIsImVyciIsInNlY29uZHMiLCJucyIsInNlY29uZHNFbGFwc2VkIiwic2l6ZSIsInN0YXQiLCJ1dGlsIiwidG9SZWFkYWJsZVNpemVTdHJpbmciLCJ0b0ZpeGVkIiwiYnl0ZXNQZXJTZWMiLCJNYXRoIiwiZmxvb3IiLCJ3YWxrRGlyIiwiZGlyIiwicmVzdWx0IiwibmFtZSIsInJlYWRkaXIiLCJjdXJyZW50UGF0aCIsImpvaW4iLCJwdXNoIiwiaXNEaXJlY3RvcnkiLCJ6aXBQYXRoIiwiZHN0Um9vdCIsInppcCIsImFzc2VydFZhbGlkWmlwIiwiZXh0cmFjdEFsbFRvIiwiYWxsRXh0cmFjdGVkSXRlbXMiLCJpc1N1cHBvcnRlZEFwcEl0ZW0iLCJyZWxhdGl2ZVBhdGgiLCJzb21lIiwieCIsInNlcCIsIml0ZW1zVG9LZWVwIiwibWFwIiwiaXRlbVBhdGgiLCJyZWxhdGl2ZSIsImZpbHRlciIsIml0ZW1zVG9SZW1vdmUiLCJkaWZmZXJlbmNlIiwiaXRlbVRvUmVtb3ZlUGF0aCIsIml0ZW1Ub0tlZXBQYXRoIiwic3RhcnRzV2l0aCIsImFsbCIsImFsbEJ1bmRsZUl0ZW1zIiwic29ydCIsImEiLCJiIiwic3BsaXQiLCJpc0VtcHR5IiwibWF0Y2hlZEJ1bmRsZSIsIm12IiwibWtkaXJwIiwiaXNQYWNrYWdlT3JCdW5kbGUiLCJnZXRDb29yZERlZmF1bHQiLCJ2YWwiLCJoYXNWYWx1ZSIsImdldFN3aXBlVG91Y2hEdXJhdGlvbiIsIndhaXRHZXN0dXJlIiwiZHVyYXRpb24iLCJvcHRpb25zIiwibXMiLCJkdXBsaWNhdGVLZXlzIiwiaW5wdXQiLCJmaXJzdEtleSIsInNlY29uZEtleSIsIml0ZW0iLCJpc1BsYWluT2JqZWN0IiwicmVzdWx0T2JqIiwia2V5IiwidmFsdWUiLCJ0b1BhaXJzIiwicmVjdXJzaXZlbHlDYWxsZWRWYWx1ZSIsInBhcnNlQ2Fwc0FycmF5IiwiY2FwIiwicGFyc2VkQ2FwcyIsIkpTT04iLCJpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsQ0FBQyxNQUFELEVBQVMsTUFBVCxDQUFqQjtBQUNBLE1BQU1DLGNBQWMsR0FBRyxDQUNyQixpQkFEcUIsRUFFckIsOEJBRnFCLEVBR3JCLGlCQUhxQixDQUF2QjtBQUtBLE1BQU1DLGtCQUFrQixHQUFHLElBQUlDLGlCQUFKLENBQVE7QUFDakNDLEVBQUFBLEdBQUcsRUFBRTtBQUQ0QixDQUFSLENBQTNCO0FBR0EsTUFBTUMsd0JBQXdCLEdBQUcsSUFBSUMsa0JBQUosRUFBakM7QUFDQSxNQUFNQyxvQkFBb0IsR0FBRyxHQUE3QjtBQUNBLE1BQU1DLGdCQUFnQixHQUFHLFlBQXpCOztBQUVBLGVBQWVDLGVBQWYsQ0FBZ0NDLElBQWhDLEVBQXNDO0FBQ3BDLE1BQUk7QUFDRixVQUFNQyxRQUFRLEdBQUcsTUFBTSw2QkFBYTtBQUNsQ0MsTUFBQUEsR0FBRyxFQUFFRixJQUQ2QjtBQUVsQ0csTUFBQUEsTUFBTSxFQUFFLE1BRjBCO0FBR2xDQyxNQUFBQSx1QkFBdUIsRUFBRSxJQUhTO0FBSWxDQyxNQUFBQSxPQUFPLEVBQUU7QUFKeUIsS0FBYixDQUF2QjtBQU1BLFdBQU9KLFFBQVEsQ0FBQ0ssT0FBaEI7QUFDRCxHQVJELENBUUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1ZDLG9CQUFPQyxLQUFQLENBQWMsZ0NBQStCVCxJQUFLLHNCQUFxQk8sQ0FBQyxDQUFDRyxPQUFRLEVBQWpGO0FB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QUFVbUksVUFBVixDQUFKLEVBQTJCO0FBQ3pCLGFBQU9BLFVBQVA7QUFDRDtBQUNGLEdBTEQsQ0FLRSxPQUFPRSxHQUFQLEVBQVk7QUFDWnpKLG9CQUFPK0QsSUFBUCxDQUFhLDBDQUFiO0FBQ0Q7O0FBQ0QsTUFBSTdDLGdCQUFFQyxRQUFGLENBQVdtSSxHQUFYLENBQUosRUFBcUI7QUFDbkIsV0FBTyxDQUFDQSxHQUFELENBQVA7QUFDRDs7QUFDRCxRQUFNLElBQUl0SSxLQUFKLENBQVcsaURBQWdEc0ksR0FBSSxFQUEvRCxDQUFOO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfZnMgZnJvbSAnZnMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdGVtcERpciwgZnMsIHV0aWwsIHppcCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnO1xuaW1wb3J0IGFzeW5jUmVxdWVzdCBmcm9tICdyZXF1ZXN0LXByb21pc2UnO1xuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IEFzeW5jTG9jayBmcm9tICdhc3luYy1sb2NrJztcbmltcG9ydCBzYW5pdGl6ZSBmcm9tICdzYW5pdGl6ZS1maWxlbmFtZSc7XG5cbmNvbnN0IFpJUF9FWFRTID0gWycuemlwJywgJy5pcGEnXTtcbmNvbnN0IFpJUF9NSU1FX1RZUEVTID0gW1xuICAnYXBwbGljYXRpb24vemlwJyxcbiAgJ2FwcGxpY2F0aW9uL3gtemlwLWNvbXByZXNzZWQnLFxuICAnbXVsdGlwYXJ0L3gtemlwJyxcbl07XG5jb25zdCBBUFBMSUNBVElPTlNfQ0FDSEUgPSBuZXcgTFJVKHtcbiAgbWF4OiAxMDAsXG59KTtcbmNvbnN0IEFQUExJQ0FUSU9OU19DQUNIRV9HVUFSRCA9IG5ldyBBc3luY0xvY2soKTtcbmNvbnN0IFNBTklUSVpFX1JFUExBQ0VNRU5UID0gJy0nO1xuY29uc3QgREVGQVVMVF9CQVNFTkFNRSA9ICdhcHBpdW0tYXBwJztcblxuYXN5bmMgZnVuY3Rpb24gcmV0cmlldmVIZWFkZXJzIChsaW5rKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhc3luY1JlcXVlc3Qoe1xuICAgICAgdXJsOiBsaW5rLFxuICAgICAgbWV0aG9kOiAnSEVBRCcsXG4gICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZSxcbiAgICAgIHRpbWVvdXQ6IDUwMDAsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmhlYWRlcnM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIuZGVidWcoYENhbm5vdCBzZW5kIEhFQUQgcmVxdWVzdCB0byAnJHtsaW5rfScuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIGdldENhY2hlZEFwcGxpY2F0aW9uUGF0aCAobGluaywgY3VycmVudE1vZGlmaWVkKSB7XG4gIGlmICghQVBQTElDQVRJT05TX0NBQ0hFLmhhcyhsaW5rKSB8fCAhY3VycmVudE1vZGlmaWVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCB7bGFzdE1vZGlmaWVkLCBmdWxsUGF0aH0gPSBBUFBMSUNBVElPTlNfQ0FDSEUuZ2V0KGxpbmspO1xuICBpZiAobGFzdE1vZGlmaWVkICYmIGN1cnJlbnRNb2RpZmllZC5nZXRUaW1lKCkgPD0gbGFzdE1vZGlmaWVkLmdldFRpbWUoKSkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgUmV1c2luZyBhbHJlYWR5IGRvd25sb2FkZWQgYXBwbGljYXRpb24gYXQgJyR7ZnVsbFBhdGh9J2ApO1xuICAgIHJldHVybiBmdWxsUGF0aDtcbiAgfVxuICBsb2dnZXIuZGVidWcoYCdMYXN0LU1vZGlmaWVkJyB0aW1lc3RhbXAgb2YgJyR7bGlua30nIGhhcyBiZWVuIHVwZGF0ZWQuIGAgK1xuICAgIGBBbiB1cGRhdGVkIGNvcHkgb2YgdGhlIGFwcGxpY2F0aW9uIGlzIGdvaW5nIHRvIGJlIGRvd25sb2FkZWQuYCk7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiB2ZXJpZnlBcHBFeHRlbnNpb24gKGFwcCwgc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucykge1xuICBpZiAoc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucy5pbmNsdWRlcyhwYXRoLmV4dG5hbWUoYXBwKSkpIHtcbiAgICByZXR1cm4gYXBwO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgTmV3IGFwcCBwYXRoICcke2FwcH0nIGRpZCBub3QgaGF2ZSBleHRlbnNpb24ocykgJyR7c3VwcG9ydGVkQXBwRXh0ZW5zaW9uc30nYCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbmZpZ3VyZUFwcCAoYXBwLCBzdXBwb3J0ZWRBcHBFeHRlbnNpb25zKSB7XG4gIGlmICghXy5pc1N0cmluZyhhcHApKSB7XG4gICAgLy8gaW1tZWRpYXRlbHkgc2hvcnRjaXJjdWl0IGlmIG5vdCBnaXZlbiBhbiBhcHBcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFfLmlzQXJyYXkoc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucykpIHtcbiAgICBzdXBwb3J0ZWRBcHBFeHRlbnNpb25zID0gW3N1cHBvcnRlZEFwcEV4dGVuc2lvbnNdO1xuICB9XG5cbiAgbGV0IG5ld0FwcCA9IGFwcDtcbiAgbGV0IHNob3VsZFVuemlwQXBwID0gZmFsc2U7XG4gIGxldCBhcmNoaXZlSGFzaCA9IG51bGw7XG4gIGxldCBjdXJyZW50TW9kaWZpZWQgPSBudWxsO1xuICBjb25zdCB7cHJvdG9jb2wsIHBhdGhuYW1lfSA9IHVybC5wYXJzZShuZXdBcHApO1xuICBjb25zdCBpc1VybCA9IFsnaHR0cDonLCAnaHR0cHM6J10uaW5jbHVkZXMocHJvdG9jb2wpO1xuXG4gIHJldHVybiBhd2FpdCBBUFBMSUNBVElPTlNfQ0FDSEVfR1VBUkQuYWNxdWlyZShhcHAsIGFzeW5jICgpID0+IHtcbiAgICBpZiAoaXNVcmwpIHtcbiAgICAgIC8vIFVzZSB0aGUgYXBwIGZyb20gcmVtb3RlIFVSTFxuICAgICAgbG9nZ2VyLmluZm8oYFVzaW5nIGRvd25sb2FkYWJsZSBhcHAgJyR7bmV3QXBwfSdgKTtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBhd2FpdCByZXRyaWV2ZUhlYWRlcnMobmV3QXBwKTtcbiAgICAgIGlmIChoZWFkZXJzWydsYXN0LW1vZGlmaWVkJ10pIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBMYXN0LU1vZGlmaWVkOiAke2hlYWRlcnNbJ2xhc3QtbW9kaWZpZWQnXX1gKTtcbiAgICAgICAgY3VycmVudE1vZGlmaWVkID0gbmV3IERhdGUoaGVhZGVyc1snbGFzdC1tb2RpZmllZCddKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNhY2hlZFBhdGggPSBnZXRDYWNoZWRBcHBsaWNhdGlvblBhdGgoYXBwLCBjdXJyZW50TW9kaWZpZWQpO1xuICAgICAgaWYgKGNhY2hlZFBhdGgpIHtcbiAgICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhjYWNoZWRQYXRoKSkge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKGBSZXVzaW5nIHRoZSBwcmV2aW91c2x5IGRvd25sb2FkZWQgYXBwbGljYXRpb24gYXQgJyR7Y2FjaGVkUGF0aH0nYCk7XG4gICAgICAgICAgcmV0dXJuIHZlcmlmeUFwcEV4dGVuc2lvbihjYWNoZWRQYXRoLCBzdXBwb3J0ZWRBcHBFeHRlbnNpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuaW5mbyhgVGhlIGFwcGxpY2F0aW9uIGF0ICcke2NhY2hlZFBhdGh9JyBkb2VzIG5vdCBleGlzdCBhbnltb3JlLiBEZWxldGluZyBpdCBmcm9tIHRoZSBjYWNoZWApO1xuICAgICAgICBBUFBMSUNBVElPTlNfQ0FDSEUuZGVsKGFwcCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBmaWxlTmFtZSA9IG51bGw7XG4gICAgICBjb25zdCBiYXNlbmFtZSA9IHNhbml0aXplKHBhdGguYmFzZW5hbWUoZGVjb2RlVVJJQ29tcG9uZW50KHBhdGhuYW1lKSksIHtcbiAgICAgICAgcmVwbGFjZW1lbnQ6IFNBTklUSVpFX1JFUExBQ0VNRU5UXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGV4dG5hbWUgPSBwYXRoLmV4dG5hbWUoYmFzZW5hbWUpO1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG8gdW56aXAgdGhlIGFwcCwgd2UgaGF2ZSBhIG51bWJlciBvZiBwbGFjZXNcbiAgICAgIC8vIHRvIGxvb2s6IGNvbnRlbnQgdHlwZSwgY29udGVudCBkaXNwb3NpdGlvbiwgb3IgdGhlIGZpbGUgZXh0ZW5zaW9uXG4gICAgICBpZiAoWklQX0VYVFMuaW5jbHVkZXMoZXh0bmFtZSkpIHtcbiAgICAgICAgZmlsZU5hbWUgPSBiYXNlbmFtZTtcbiAgICAgICAgc2hvdWxkVW56aXBBcHAgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgQ29udGVudC1UeXBlOiAke2hlYWRlcnNbJ2NvbnRlbnQtdHlwZSddfWApO1xuICAgICAgICAvLyB0aGUgZmlsZXR5cGUgbWF5IG5vdCBiZSBvYnZpb3VzIGZvciBjZXJ0YWluIHVybHMsIHNvIGNoZWNrIHRoZSBtaW1lIHR5cGUgdG9vXG4gICAgICAgIGlmIChaSVBfTUlNRV9UWVBFUy5pbmNsdWRlcyhoZWFkZXJzWydjb250ZW50LXR5cGUnXSkpIHtcbiAgICAgICAgICBpZiAoIWZpbGVOYW1lKSB7XG4gICAgICAgICAgICBmaWxlTmFtZSA9IGAke0RFRkFVTFRfQkFTRU5BTUV9LnppcGA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNob3VsZFVuemlwQXBwID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGhlYWRlcnNbJ2NvbnRlbnQtZGlzcG9zaXRpb24nXSAmJiAvXmF0dGFjaG1lbnQvaS50ZXN0KGhlYWRlcnNbJ2NvbnRlbnQtZGlzcG9zaXRpb24nXSkpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBDb250ZW50LURpc3Bvc2l0aW9uOiAke2hlYWRlcnNbJ2NvbnRlbnQtZGlzcG9zaXRpb24nXX1gKTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSAvZmlsZW5hbWU9XCIoW15cIl0rKS9pLmV4ZWMoaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgZmlsZU5hbWUgPSBzYW5pdGl6ZShtYXRjaFsxXSwge1xuICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IFNBTklUSVpFX1JFUExBQ0VNRU5UXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2hvdWxkVW56aXBBcHAgPSBzaG91bGRVbnppcEFwcCB8fCBaSVBfRVhUUy5pbmNsdWRlcyhwYXRoLmV4dG5hbWUoZmlsZU5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFmaWxlTmFtZSkge1xuICAgICAgICAvLyBhc3NpZ24gdGhlIGRlZmF1bHQgZmlsZSBuYW1lIGFuZCB0aGUgZXh0ZW5zaW9uIGlmIG5vbmUgaGFzIGJlZW4gZGV0ZWN0ZWRcbiAgICAgICAgY29uc3QgcmVzdWx0aW5nTmFtZSA9IGJhc2VuYW1lXG4gICAgICAgICAgPyBiYXNlbmFtZS5zdWJzdHJpbmcoMCwgYmFzZW5hbWUubGVuZ3RoIC0gZXh0bmFtZS5sZW5ndGgpXG4gICAgICAgICAgOiBERUZBVUxUX0JBU0VOQU1FO1xuICAgICAgICBsZXQgcmVzdWx0aW5nRXh0ID0gZXh0bmFtZTtcbiAgICAgICAgaWYgKCFzdXBwb3J0ZWRBcHBFeHRlbnNpb25zLmluY2x1ZGVzKHJlc3VsdGluZ0V4dCkpIHtcbiAgICAgICAgICBsb2dnZXIuaW5mbyhgVGhlIGN1cnJlbnQgZmlsZSBleHRlbnNpb24gJyR7cmVzdWx0aW5nRXh0fScgaXMgbm90IHN1cHBvcnRlZC4gYCArXG4gICAgICAgICAgICBgRGVmYXVsdGluZyB0byAnJHtfLmZpcnN0KHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpfSdgKTtcbiAgICAgICAgICByZXN1bHRpbmdFeHQgPSBfLmZpcnN0KHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGZpbGVOYW1lID0gYCR7cmVzdWx0aW5nTmFtZX0ke3Jlc3VsdGluZ0V4dH1gO1xuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0UGF0aCA9IGF3YWl0IHRlbXBEaXIucGF0aCh7XG4gICAgICAgIHByZWZpeDogZmlsZU5hbWUsXG4gICAgICAgIHN1ZmZpeDogJycsXG4gICAgICB9KTtcbiAgICAgIG5ld0FwcCA9IGF3YWl0IGRvd25sb2FkQXBwKG5ld0FwcCwgdGFyZ2V0UGF0aCk7XG4gICAgfSBlbHNlIGlmIChhd2FpdCBmcy5leGlzdHMobmV3QXBwKSkge1xuICAgICAgLy8gVXNlIHRoZSBsb2NhbCBhcHBcbiAgICAgIGxvZ2dlci5pbmZvKGBVc2luZyBsb2NhbCBhcHAgJyR7bmV3QXBwfSdgKTtcbiAgICAgIHNob3VsZFVuemlwQXBwID0gWklQX0VYVFMuaW5jbHVkZXMocGF0aC5leHRuYW1lKG5ld0FwcCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFRoZSBhcHBsaWNhdGlvbiBhdCAnJHtuZXdBcHB9JyBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgYWNjZXNzaWJsZWA7XG4gICAgICAvLyBwcm90b2NvbCB2YWx1ZSBmb3IgJ0M6XFxcXHRlbXAnIGlzICdjOicsIHNvIHdlIGNoZWNrIHRoZSBsZW5ndGggYXMgd2VsbFxuICAgICAgaWYgKF8uaXNTdHJpbmcocHJvdG9jb2wpICYmIHByb3RvY29sLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gYFRoZSBwcm90b2NvbCAnJHtwcm90b2NvbH0nIHVzZWQgaW4gJyR7bmV3QXBwfScgaXMgbm90IHN1cHBvcnRlZC4gYCArXG4gICAgICAgICAgYE9ubHkgaHR0cDogYW5kIGh0dHBzOiBwcm90b2NvbHMgYXJlIHN1cHBvcnRlZGA7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVW56aXBBcHApIHtcbiAgICAgIGNvbnN0IGFyY2hpdmVQYXRoID0gbmV3QXBwO1xuICAgICAgYXJjaGl2ZUhhc2ggPSBhd2FpdCBmcy5oYXNoKGFyY2hpdmVQYXRoKTtcbiAgICAgIGlmIChBUFBMSUNBVElPTlNfQ0FDSEUuaGFzKGFwcCkgJiYgYXJjaGl2ZUhhc2ggPT09IEFQUExJQ0FUSU9OU19DQUNIRS5nZXQoYXBwKS5oYXNoKSB7XG4gICAgICAgIGNvbnN0IHtmdWxsUGF0aH0gPSBBUFBMSUNBVElPTlNfQ0FDSEUuZ2V0KGFwcCk7XG4gICAgICAgIGlmIChhd2FpdCBmcy5leGlzdHMoZnVsbFBhdGgpKSB7XG4gICAgICAgICAgaWYgKGFyY2hpdmVQYXRoICE9PSBhcHApIHtcbiAgICAgICAgICAgIGF3YWl0IGZzLnJpbXJhZihhcmNoaXZlUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZ2dlci5pbmZvKGBXaWxsIHJldXNlIHByZXZpb3VzbHkgY2FjaGVkIGFwcGxpY2F0aW9uIGF0ICcke2Z1bGxQYXRofSdgKTtcbiAgICAgICAgICByZXR1cm4gdmVyaWZ5QXBwRXh0ZW5zaW9uKGZ1bGxQYXRoLCBzdXBwb3J0ZWRBcHBFeHRlbnNpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuaW5mbyhgVGhlIGFwcGxpY2F0aW9uIGF0ICcke2Z1bGxQYXRofScgZG9lcyBub3QgZXhpc3QgYW55bW9yZS4gRGVsZXRpbmcgaXQgZnJvbSB0aGUgY2FjaGVgKTtcbiAgICAgICAgQVBQTElDQVRJT05TX0NBQ0hFLmRlbChhcHApO1xuICAgICAgfVxuICAgICAgY29uc3QgdG1wUm9vdCA9IGF3YWl0IHRlbXBEaXIub3BlbkRpcigpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3QXBwID0gYXdhaXQgdW56aXBBcHAoYXJjaGl2ZVBhdGgsIHRtcFJvb3QsIHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG5ld0FwcCAhPT0gYXJjaGl2ZVBhdGggJiYgYXJjaGl2ZVBhdGggIT09IGFwcCkge1xuICAgICAgICAgIGF3YWl0IGZzLnJpbXJhZihhcmNoaXZlUGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxvZ2dlci5pbmZvKGBVbnppcHBlZCBsb2NhbCBhcHAgdG8gJyR7bmV3QXBwfSdgKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoLmlzQWJzb2x1dGUobmV3QXBwKSkge1xuICAgICAgbmV3QXBwID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIG5ld0FwcCk7XG4gICAgICBsb2dnZXIud2FybihgVGhlIGN1cnJlbnQgYXBwbGljYXRpb24gcGF0aCAnJHthcHB9JyBpcyBub3QgYWJzb2x1dGUgYCArXG4gICAgICAgIGBhbmQgaGFzIGJlZW4gcmV3cml0dGVuIHRvICcke25ld0FwcH0nLiBDb25zaWRlciB1c2luZyBhYnNvbHV0ZSBwYXRocyByYXRoZXIgdGhhbiByZWxhdGl2ZWApO1xuICAgICAgYXBwID0gbmV3QXBwO1xuICAgIH1cblxuICAgIHZlcmlmeUFwcEV4dGVuc2lvbihuZXdBcHAsIHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpO1xuXG4gICAgaWYgKGFwcCAhPT0gbmV3QXBwICYmIChhcmNoaXZlSGFzaCB8fCBjdXJyZW50TW9kaWZpZWQpKSB7XG4gICAgICBBUFBMSUNBVElPTlNfQ0FDSEUuc2V0KGFwcCwge1xuICAgICAgICBoYXNoOiBhcmNoaXZlSGFzaCxcbiAgICAgICAgbGFzdE1vZGlmaWVkOiBjdXJyZW50TW9kaWZpZWQsXG4gICAgICAgIGZ1bGxQYXRoOiBuZXdBcHAsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0FwcDtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkQXBwIChhcHAsIHRhcmdldFBhdGgpIHtcbiAgY29uc3Qge2hyZWZ9ID0gdXJsLnBhcnNlKGFwcCk7XG4gIGNvbnN0IHN0YXJ0ZWQgPSBwcm9jZXNzLmhydGltZSgpO1xuICB0cnkge1xuICAgIC8vIGRvbid0IHVzZSByZXF1ZXN0LXByb21pc2UgaGVyZSwgd2UgbmVlZCBzdHJlYW1zXG4gICAgYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcmVxdWVzdChocmVmKVxuICAgICAgICAub24oJ2Vycm9yJywgcmVqZWN0KSAvLyBoYW5kbGUgcmVhbCBlcnJvcnMsIGxpa2UgY29ubmVjdGlvbiBlcnJvcnNcbiAgICAgICAgLm9uKCdyZXNwb25zZScsIChyZXMpID0+IHtcbiAgICAgICAgICAvLyBoYW5kbGUgcmVzcG9uc2VzIHRoYXQgZmFpbCwgbGlrZSA0MDRzXG4gICAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID49IDQwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYCR7cmVzLnN0YXR1c0NvZGV9IC0gJHtyZXMuc3RhdHVzTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAucGlwZShfZnMuY3JlYXRlV3JpdGVTdHJlYW0odGFyZ2V0UGF0aCkpXG4gICAgICAgIC5vbignY2xvc2UnLCByZXNvbHZlKTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBQcm9ibGVtIGRvd25sb2FkaW5nIGFwcCBmcm9tIHVybCAke2hyZWZ9OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIGNvbnN0IFtzZWNvbmRzLCBuc10gPSBwcm9jZXNzLmhydGltZShzdGFydGVkKTtcbiAgY29uc3Qgc2Vjb25kc0VsYXBzZWQgPSBzZWNvbmRzICsgbnMgLyAxZTA5O1xuICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KHRhcmdldFBhdGgpO1xuICBsb2dnZXIuZGVidWcoYCcke2hyZWZ9JyAoJHt1dGlsLnRvUmVhZGFibGVTaXplU3RyaW5nKHNpemUpfSkgYCArXG4gICAgYGhhcyBiZWVuIGRvd25sb2FkZWQgdG8gJyR7dGFyZ2V0UGF0aH0nIGluICR7c2Vjb25kc0VsYXBzZWQudG9GaXhlZCgzKX1zYCk7XG4gIGlmIChzZWNvbmRzRWxhcHNlZCA+PSAyKSB7XG4gICAgY29uc3QgYnl0ZXNQZXJTZWMgPSBNYXRoLmZsb29yKHNpemUgLyBzZWNvbmRzRWxhcHNlZCk7XG4gICAgbG9nZ2VyLmRlYnVnKGBBcHByb3hpbWF0ZSBkb3dubG9hZCBzcGVlZDogJHt1dGlsLnRvUmVhZGFibGVTaXplU3RyaW5nKGJ5dGVzUGVyU2VjKX0vc2ApO1xuICB9XG4gIHJldHVybiB0YXJnZXRQYXRoO1xufVxuXG5hc3luYyBmdW5jdGlvbiB3YWxrRGlyIChkaXIpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAoY29uc3QgbmFtZSBvZiBhd2FpdCBmcy5yZWFkZGlyKGRpcikpIHtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IHBhdGguam9pbihkaXIsIG5hbWUpO1xuICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRQYXRoKTtcbiAgICBpZiAoKGF3YWl0IGZzLnN0YXQoY3VycmVudFBhdGgpKS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICByZXN1bHQucHVzaCguLi4oYXdhaXQgd2Fsa0RpcihjdXJyZW50UGF0aCkpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdW56aXBBcHAgKHppcFBhdGgsIGRzdFJvb3QsIHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpIHtcbiAgYXdhaXQgemlwLmFzc2VydFZhbGlkWmlwKHppcFBhdGgpO1xuXG4gIGlmICghXy5pc0FycmF5KHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMpKSB7XG4gICAgc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucyA9IFtzdXBwb3J0ZWRBcHBFeHRlbnNpb25zXTtcbiAgfVxuXG4gIGNvbnN0IHRtcFJvb3QgPSBhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKTtcbiAgdHJ5IHtcbiAgICBsb2dnZXIuZGVidWcoYFVuemlwcGluZyAnJHt6aXBQYXRofSdgKTtcbiAgICBhd2FpdCB6aXAuZXh0cmFjdEFsbFRvKHppcFBhdGgsIHRtcFJvb3QpO1xuICAgIGNvbnN0IGFsbEV4dHJhY3RlZEl0ZW1zID0gYXdhaXQgd2Fsa0Rpcih0bXBSb290KTtcbiAgICBsb2dnZXIuZGVidWcoYEV4dHJhY3RlZCAke2FsbEV4dHJhY3RlZEl0ZW1zLmxlbmd0aH0gaXRlbShzKSBmcm9tICcke3ppcFBhdGh9J2ApO1xuICAgIGNvbnN0IGlzU3VwcG9ydGVkQXBwSXRlbSA9IChyZWxhdGl2ZVBhdGgpID0+IHN1cHBvcnRlZEFwcEV4dGVuc2lvbnMuaW5jbHVkZXMocGF0aC5leHRuYW1lKHJlbGF0aXZlUGF0aCkpXG4gICAgICB8fCBfLnNvbWUoc3VwcG9ydGVkQXBwRXh0ZW5zaW9ucywgKHgpID0+IHJlbGF0aXZlUGF0aC5pbmNsdWRlcyhgJHt4fSR7cGF0aC5zZXB9YCkpO1xuICAgIGNvbnN0IGl0ZW1zVG9LZWVwID0gYWxsRXh0cmFjdGVkSXRlbXNcbiAgICAgIC5tYXAoKGl0ZW1QYXRoKSA9PiBwYXRoLnJlbGF0aXZlKHRtcFJvb3QsIGl0ZW1QYXRoKSlcbiAgICAgIC5maWx0ZXIoKHJlbGF0aXZlUGF0aCkgPT4gaXNTdXBwb3J0ZWRBcHBJdGVtKHJlbGF0aXZlUGF0aCkpXG4gICAgICAubWFwKChyZWxhdGl2ZVBhdGgpID0+IHBhdGgucmVzb2x2ZSh0bXBSb290LCByZWxhdGl2ZVBhdGgpKTtcbiAgICBjb25zdCBpdGVtc1RvUmVtb3ZlID0gXy5kaWZmZXJlbmNlKGFsbEV4dHJhY3RlZEl0ZW1zLCBpdGVtc1RvS2VlcClcbiAgICAgIC8vIEF2b2lkIHBhcmVudCBmb2xkZXJzIHRvIGJlIHJlY3Vyc2l2ZWx5IHJlbW92ZWRcbiAgICAgIC5maWx0ZXIoKGl0ZW1Ub1JlbW92ZVBhdGgpID0+ICFfLnNvbWUoaXRlbXNUb0tlZXAsIChpdGVtVG9LZWVwUGF0aCkgPT4gaXRlbVRvS2VlcFBhdGguc3RhcnRzV2l0aChpdGVtVG9SZW1vdmVQYXRoKSkpO1xuICAgIGF3YWl0IEIuYWxsKGl0ZW1zVG9SZW1vdmUsIGFzeW5jIChpdGVtUGF0aCkgPT4ge1xuICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhpdGVtUGF0aCkpIHtcbiAgICAgICAgYXdhaXQgZnMucmltcmFmKGl0ZW1QYXRoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBhbGxCdW5kbGVJdGVtcyA9IChhd2FpdCB3YWxrRGlyKHRtcFJvb3QpKVxuICAgICAgLm1hcCgoaXRlbVBhdGgpID0+IHBhdGgucmVsYXRpdmUodG1wUm9vdCwgaXRlbVBhdGgpKVxuICAgICAgLmZpbHRlcigocmVsYXRpdmVQYXRoKSA9PiBpc1N1cHBvcnRlZEFwcEl0ZW0ocmVsYXRpdmVQYXRoKSlcbiAgICAgIC8vIEdldCB0aGUgdG9wIGxldmVsIG1hdGNoXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5zcGxpdChwYXRoLnNlcCkubGVuZ3RoIC0gYi5zcGxpdChwYXRoLnNlcCkubGVuZ3RoKTtcbiAgICBpZiAoXy5pc0VtcHR5KGFsbEJ1bmRsZUl0ZW1zKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBcHAgemlwIHVuemlwcGVkIE9LLCBidXQgd2UgY291bGQgbm90IGZpbmQgJHtzdXBwb3J0ZWRBcHBFeHRlbnNpb25zfSBidW5kbGUocykgYCArXG4gICAgICAgIGBpbiBpdC4gTWFrZSBzdXJlIHlvdXIgYXJjaGl2ZSBjb250YWlucyAke3N1cHBvcnRlZEFwcEV4dGVuc2lvbnN9IHBhY2thZ2UocykgYCArXG4gICAgICAgIGBhbmQgbm90aGluZyBlbHNlYCk7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoZWRCdW5kbGUgPSBfLmZpcnN0KGFsbEJ1bmRsZUl0ZW1zKTtcbiAgICBsb2dnZXIuZGVidWcoYE1hdGNoZWQgJHthbGxCdW5kbGVJdGVtcy5sZW5ndGh9IGl0ZW0ocykgaW4gdGhlIGV4dHJhY3RlZCBhcmNoaXZlLiBgICtcbiAgICAgIGBBc3N1bWluZyAnJHttYXRjaGVkQnVuZGxlfScgaXMgdGhlIGNvcnJlY3QgYnVuZGxlYCk7XG4gICAgYXdhaXQgZnMubXYocGF0aC5yZXNvbHZlKHRtcFJvb3QsIG1hdGNoZWRCdW5kbGUpLCBwYXRoLnJlc29sdmUoZHN0Um9vdCwgbWF0Y2hlZEJ1bmRsZSksIHtcbiAgICAgIG1rZGlycDogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBwYXRoLnJlc29sdmUoZHN0Um9vdCwgbWF0Y2hlZEJ1bmRsZSk7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgZnMucmltcmFmKHRtcFJvb3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUGFja2FnZU9yQnVuZGxlIChhcHApIHtcbiAgcmV0dXJuICgvXihbYS16QS1aMC05XFwtX10rXFwuW2EtekEtWjAtOVxcLV9dKykrJC8pLnRlc3QoYXBwKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29vcmREZWZhdWx0ICh2YWwpIHtcbiAgLy8gZ29pbmcgdGhlIGxvbmcgd2F5IGFuZCBjaGVja2luZyBmb3IgdW5kZWZpbmVkIGFuZCBudWxsIHNpbmNlXG4gIC8vIHdlIGNhbid0IGJlIGFzc3VyZWQgYGVsSWRgIGlzIGEgc3RyaW5nIGFuZCBub3QgYW4gaW50LiBTYW1lXG4gIC8vIHRoaW5nIHdpdGggZGVzdEVsZW1lbnQgYmVsb3cuXG4gIHJldHVybiB1dGlsLmhhc1ZhbHVlKHZhbCkgPyB2YWwgOiAwLjU7XG59XG5cbmZ1bmN0aW9uIGdldFN3aXBlVG91Y2hEdXJhdGlvbiAod2FpdEdlc3R1cmUpIHtcbiAgLy8gdGhlIHRvdWNoIGFjdGlvbiBhcGkgdXNlcyBtcywgd2Ugd2FudCBzZWNvbmRzXG4gIC8vIDAuOCBpcyB0aGUgZGVmYXVsdCB0aW1lIGZvciB0aGUgb3BlcmF0aW9uXG4gIGxldCBkdXJhdGlvbiA9IDAuODtcbiAgaWYgKHR5cGVvZiB3YWl0R2VzdHVyZS5vcHRpb25zLm1zICE9PSAndW5kZWZpbmVkJyAmJiB3YWl0R2VzdHVyZS5vcHRpb25zLm1zKSB7XG4gICAgZHVyYXRpb24gPSB3YWl0R2VzdHVyZS5vcHRpb25zLm1zIC8gMTAwMDtcbiAgICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICAgIC8vIHNldCB0byBhIHZlcnkgbG93IG51bWJlciwgc2luY2UgdGhleSB3YW50ZWQgaXQgZmFzdFxuICAgICAgLy8gYnV0IGJlbG93IDAuMSBiZWNvbWVzIDAgc3RlcHMsIHdoaWNoIGNhdXNlcyBlcnJvcnNcbiAgICAgIGR1cmF0aW9uID0gMC4xO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHVyYXRpb247XG59XG5cbi8qKlxuICogRmluZHMgYWxsIGluc3RhbmNlcyAnZmlyc3RLZXknIGFuZCBjcmVhdGUgYSBkdXBsaWNhdGUgd2l0aCB0aGUga2V5ICdzZWNvbmRLZXknLFxuICogRG8gdGhlIHNhbWUgdGhpbmcgaW4gcmV2ZXJzZS4gSWYgd2UgZmluZCAnc2Vjb25kS2V5JywgY3JlYXRlIGEgZHVwbGljYXRlIHdpdGggdGhlIGtleSAnZmlyc3RLZXknLlxuICpcbiAqIFRoaXMgd2lsbCBjYXVzZSBrZXlzIHRvIGJlIG92ZXJ3cml0dGVuIGlmIHRoZSBvYmplY3QgY29udGFpbnMgJ2ZpcnN0S2V5JyBhbmQgJ3NlY29uZEtleScuXG5cbiAqIEBwYXJhbSB7Kn0gaW5wdXQgQW55IHR5cGUgb2YgaW5wdXRcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaXJzdEtleSBUaGUgZmlyc3Qga2V5IHRvIGR1cGxpY2F0ZVxuICogQHBhcmFtIHtTdHJpbmd9IHNlY29uZEtleSBUaGUgc2Vjb25kIGtleSB0byBkdXBsaWNhdGVcbiAqL1xuZnVuY3Rpb24gZHVwbGljYXRlS2V5cyAoaW5wdXQsIGZpcnN0S2V5LCBzZWNvbmRLZXkpIHtcbiAgLy8gSWYgYXJyYXkgcHJvdmlkZWQsIHJlY3Vyc2l2ZWx5IGNhbGwgb24gYWxsIGVsZW1lbnRzXG4gIGlmIChfLmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgcmV0dXJuIGlucHV0Lm1hcCgoaXRlbSkgPT4gZHVwbGljYXRlS2V5cyhpdGVtLCBmaXJzdEtleSwgc2Vjb25kS2V5KSk7XG4gIH1cblxuICAvLyBJZiBvYmplY3QsIGNyZWF0ZSBkdXBsaWNhdGVzIGZvciBrZXlzIGFuZCB0aGVuIHJlY3Vyc2l2ZWx5IGNhbGwgb24gdmFsdWVzXG4gIGlmIChfLmlzUGxhaW5PYmplY3QoaW5wdXQpKSB7XG4gICAgY29uc3QgcmVzdWx0T2JqID0ge307XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIF8udG9QYWlycyhpbnB1dCkpIHtcbiAgICAgIGNvbnN0IHJlY3Vyc2l2ZWx5Q2FsbGVkVmFsdWUgPSBkdXBsaWNhdGVLZXlzKHZhbHVlLCBmaXJzdEtleSwgc2Vjb25kS2V5KTtcbiAgICAgIGlmIChrZXkgPT09IGZpcnN0S2V5KSB7XG4gICAgICAgIHJlc3VsdE9ialtzZWNvbmRLZXldID0gcmVjdXJzaXZlbHlDYWxsZWRWYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBzZWNvbmRLZXkpIHtcbiAgICAgICAgcmVzdWx0T2JqW2ZpcnN0S2V5XSA9IHJlY3Vyc2l2ZWx5Q2FsbGVkVmFsdWU7XG4gICAgICB9XG4gICAgICByZXN1bHRPYmpba2V5XSA9IHJlY3Vyc2l2ZWx5Q2FsbGVkVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRPYmo7XG4gIH1cblxuICAvLyBCYXNlIGNhc2UuIFJldHVybiBwcmltaXRpdmVzIHdpdGhvdXQgZG9pbmcgYW55dGhpbmcuXG4gIHJldHVybiBpbnB1dDtcbn1cblxuLyoqXG4gKiBUYWtlcyBhIGRlc2lyZWQgY2FwYWJpbGl0eSBhbmQgdHJpZXMgdG8gSlNPTi5wYXJzZSBpdCBhcyBhbiBhcnJheSxcbiAqIGFuZCBlaXRoZXIgcmV0dXJucyB0aGUgcGFyc2VkIGFycmF5IG9yIGEgc2luZ2xldG9uIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PFN0cmluZz59IGNhcCBBIGRlc2lyZWQgY2FwYWJpbGl0eVxuICovXG5mdW5jdGlvbiBwYXJzZUNhcHNBcnJheSAoY2FwKSB7XG4gIGxldCBwYXJzZWRDYXBzO1xuICB0cnkge1xuICAgIHBhcnNlZENhcHMgPSBKU09OLnBhcnNlKGNhcCk7XG4gICAgaWYgKF8uaXNBcnJheShwYXJzZWRDYXBzKSkge1xuICAgICAgcmV0dXJuIHBhcnNlZENhcHM7XG4gICAgfVxuICB9IGNhdGNoIChpZ24pIHtcbiAgICBsb2dnZXIud2FybihgRmFpbGVkIHRvIHBhcnNlIGNhcGFiaWxpdHkgYXMgSlNPTiBhcnJheWApO1xuICB9XG4gIGlmIChfLmlzU3RyaW5nKGNhcCkpIHtcbiAgICByZXR1cm4gW2NhcF07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBtdXN0IHByb3ZpZGUgYSBzdHJpbmcgb3IgSlNPTiBBcnJheTsgcmVjZWl2ZWQgJHtjYXB9YCk7XG59XG5cbmV4cG9ydCB7XG4gIGNvbmZpZ3VyZUFwcCwgaXNQYWNrYWdlT3JCdW5kbGUsIGdldENvb3JkRGVmYXVsdCwgZ2V0U3dpcGVUb3VjaER1cmF0aW9uLCBkdXBsaWNhdGVLZXlzLCBwYXJzZUNhcHNBcnJheVxufTtcbiJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
