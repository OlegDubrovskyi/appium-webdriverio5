"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _utils = require("../utils");

var _appiumSupport = require("appium-support");

let commands = {};

commands.getAttribute = async function (attribute, el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'getAttribute',
    args: [`${el}`, `${attribute}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from getAttribute");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_INVALID_SELECTOR) {
    throw new _appiumBaseDriver.errors.InvalidSelectorError(result.value);
  }

  return result.value;
};

commands.setValue = async function (value, el) {
  el = (0, _utils.unwrapEl)(el);

  if (value instanceof Array) {
    value = value.join("");
  }

  if (typeof value !== 'string') {
    value = `${value}`;
  }

  value = _appiumSupport.util.escapeSpecialChars(value, "'");
  value = value.replace(/\\\\n/g, "\\n");
  let commandObject = {
    name: 'sendkeys',
    args: [`${el}`, `${value}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from setValue");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
  }

  return result.value;
};

commands.getText = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'getText',
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from getText");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_STALE_ELEMENT) {
    throw new _appiumBaseDriver.errors.StaleElementReferenceError(result.value);
  }

  return result.value;
};

commands.elementEnabled = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'elementEnabled',
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from elementEnabled");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
    throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
  }

  return result.value;
};

commands.elementSelected = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'elementSelected',
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from elementSelected");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_ELEMENT_IS_NOT_SELECTABLE) {
    throw new _appiumBaseDriver.errors.ElementIsNotSelectableError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
    throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
  }

  return result.value;
};

commands.elementDisplayed = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'elementDisplayed',
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from elementDisplayed");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
    throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
  }

  return result.value;
};

commands.clear = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'clear',
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from clear");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
    throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
  }

  return result.value;
};

commands.getLocation = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'elementLocation',
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from elementLocation");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
    throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
  }

  return result.value;
};

commands.getLocationInView = async function (elementId) {
  return await this.getLocation(elementId);
};

commands.getSize = async function (el) {
  el = (0, _utils.unwrapEl)(el);
  let commandObject = {
    name: 'elementSize',
    args: [`${el}`]
  };
  let commandJSON = JSON.stringify(commandObject);
  let data = await this.executeSocketCommand(commandJSON);
  let result;

  try {
    result = JSON.parse(data);
  } catch (e) {
    throw new Error("Bad response from getSize");
  }

  if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_UNKNOWN_COMMAND) {
    throw new _appiumBaseDriver.errors.UnknownCommandError(result.value);
  } else if (result.status === _utils.youiEngineDriverReturnValues.WEBDRIVER_NO_SUCH_ELEMENT) {
    throw new _appiumBaseDriver.errors.NoSuchElementError(result.value);
  }

  return result.value;
};

var _default = commands;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
