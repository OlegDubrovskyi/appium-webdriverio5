#!/usr/bin/env node
"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.main = main;

require("source-map-support/register");

var _logsink = require("./logsink");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _parser = _interopRequireWildcard(require("./parser"));

var _config = require("./config");

var _appium = require("./appium");

var _gridRegister = _interopRequireDefault(require("./grid-register"));

var _utils = require("./utils");

async function preflightChecks(parser, args, throwInsteadOfExit = false) {
  try {
    (0, _config.checkNodeOk)();

    if (args.longStacktrace) {
      require('longjohn').async_trace_limit = -1;
    }

    if (args.showConfig) {
      await (0, _config.showConfig)();
      process.exit(0);
    }

    (0, _config.warnNodeDeprecations)();
    (0, _config.validateServerArgs)(parser, args);

    if (args.tmpDir) {
      await (0, _config.validateTmpDir)(args.tmpDir);
    }
  } catch (err) {
    _logger.default.error(err.message.red);

    if (throwInsteadOfExit) {
      throw err;
    }

    process.exit(1);
  }
}

function logDeprecationWarning(deprecatedArgs) {
  _logger.default.warn('Deprecated server args:');

  for (let [arg, realArg] of _lodash.default.toPairs(deprecatedArgs)) {
    _logger.default.warn(`  ${arg.red} => ${realArg}`);
  }
}

function logNonDefaultArgsWarning(args) {
  _logger.default.info('Non-default server args:');

  (0, _utils.inspectObject)(args);
}

function logDefaultCapabilitiesWarning(caps) {
  _logger.default.info('Default capabilities, which will be added to each request ' + 'unless overridden by desired capabilities:');

  (0, _utils.inspectObject)(caps);
}

async function logStartupInfo(parser, args) {
  let welcome = `Welcome to Appium v${_config.APPIUM_VER}`;
  let appiumRev = await (0, _config.getGitRev)();

  if (appiumRev) {
    welcome += ` (REV ${appiumRev})`;
  }

  _logger.default.info(welcome);

  let showArgs = (0, _config.getNonDefaultArgs)(parser, args);

  if (_lodash.default.size(showArgs)) {
    logNonDefaultArgsWarning(showArgs);
  }

  let deprecatedArgs = (0, _config.getDeprecatedArgs)(parser, args);

  if (_lodash.default.size(deprecatedArgs)) {
    logDeprecationWarning(deprecatedArgs);
  }

  if (!_lodash.default.isEmpty(args.defaultCapabilities)) {
    logDefaultCapabilitiesWarning(args.defaultCapabilities);
  }
}

function logServerPort(address, port) {
  let logMessage = `Appium REST http interface listener started on ` + `${address}:${port}`;

  _logger.default.info(logMessage);
}

function initHeapdump(args) {
  if (args.heapdumpEnabled) {
    try {
      require('heapdump');
    } catch (err) {
      _logger.default.error(`Memory dump enabled through the '--enable-heapdump' server argument\n` + `but 'heapdump' not installed.\n` + `See https://github.com/appium/appium/tree/master/docs/en/advanced-concepts/memory-collection.md ` + `for more information.`);
    }
  }
}

async function main(args = null) {
  let parser = (0, _parser.default)();
  let throwInsteadOfExit = false;

  if (args) {
    args = Object.assign({}, (0, _parser.getDefaultArgs)(), args);

    if (args.throwInsteadOfExit) {
      throwInsteadOfExit = true;
      delete args.throwInsteadOfExit;
    }
  } else {
    args = parser.parseArgs();
  }

  initHeapdump(args);
  await (0, _logsink.init)(args);
  await preflightChecks(parser, args, throwInsteadOfExit);
  await logStartupInfo(parser, args);
  let appiumDriver = new _appium.AppiumDriver(args);
  let router = (0, _appiumBaseDriver.routeConfiguringFunction)(appiumDriver);
  let server = await (0, _appiumBaseDriver.server)(router, args.port, args.address, args.allowCors);

  if (args.allowCors) {
    _logger.default.warn('You have enabled CORS requests from any host. Be careful not ' + 'to visit sites which could maliciously try to start Appium ' + 'sessions on your machine');
  }

  appiumDriver.server = server;

  try {
    if (args.nodeconfig !== null) {
      await (0, _gridRegister.default)(args.nodeconfig, args.address, args.port);
    }
  } catch (err) {
    await server.close();
    throw err;
  }

  process.once('SIGINT', async function onSigint() {
    _logger.default.info(`Received SIGINT - shutting down`);

    await server.close();
  });
  process.once('SIGTERM', async function onSigterm() {
    _logger.default.info(`Received SIGTERM - shutting down`);

    await server.close();
  });
  logServerPort(args.address, args.port);
  return server;
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
