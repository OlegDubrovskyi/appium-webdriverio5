"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _utils = require("./utils");

var _lodash = _interopRequireDefault(require("lodash"));

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _request = _interopRequireDefault(require("request"));

var _xpath = _interopRequireDefault(require("xpath"));

var _xmldom = require("xmldom");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

const STORAGE_URL = 'https://chromedriver.storage.googleapis.com';
const TIMEOUT_MS = 15000;
const MAX_PARALLEL_DOWNLOADS = 5;

const log = _appiumSupport.logger.getLogger('ChromedriverStorageClient');

async function walkDir(dir) {
  const result = [];

  for (const name of await _appiumSupport.fs.readdir(dir)) {
    const currentPath = _path.default.join(dir, name);

    result.push(currentPath);

    if ((await _appiumSupport.fs.stat(currentPath)).isDirectory()) {
      result.push(...(await walkDir(currentPath)));
    }
  }

  return result;
}

async function getOsInfo() {
  let name = 'linux';

  if (_appiumSupport.system.isWindows()) {
    name = 'win';
  } else if (_appiumSupport.system.isMac()) {
    name = 'mac';
  }

  return {
    name,
    arch: await _appiumSupport.system.arch()
  };
}

async function isCrcOk(src, checksum) {
  const md5 = await _appiumSupport.fs.hash(src, 'md5');
  return _lodash.default.toLower(md5) === _lodash.default.toLower(checksum);
}

function findChildNode(parent, childName = null, text = null) {
  if (!childName && !text) {
    return null;
  }

  if (!parent.hasChildNodes()) {
    return null;
  }

  for (let childNodeIdx = 0; childNodeIdx < parent.childNodes.length; childNodeIdx++) {
    const childNode = parent.childNodes[childNodeIdx];

    if (childName && !text && childName === childNode.localName) {
      return childNode;
    }

    if (text) {
      const childText = extractNodeText(childNode);

      if (!childText) {
        continue;
      }

      if (childName && childName === childNode.localName && text === childText) {
        return childNode;
      }

      if (!childName && text === childText) {
        return childNode;
      }
    }
  }

  return null;
}

function extractNodeText(node) {
  return !node || !node.firstChild || !_appiumSupport.util.hasValue(node.firstChild.nodeValue) ? null : node.firstChild.nodeValue;
}

class ChromedriverStorageClient {
  constructor(args = {}) {
    const {
      chromedriverDir = (0, _utils.getChromedriverDir)(),
      timeout = TIMEOUT_MS
    } = args;
    this.chromedriverDir = chromedriverDir;
    this.timeout = timeout;
    this.mapping = {};
  }

  parseNotes(content) {
    const result = {};
    const versionMatch = /^\s*[-]+ChromeDriver[\D]+([\d.]+)/im.exec(content);

    if (versionMatch) {
      result.version = versionMatch[1];
    }

    const minBrowserVersionMatch = /^\s*Supports Chrome[\D]+(\d+)/im.exec(content);

    if (minBrowserVersionMatch) {
      result.minBrowserVersion = minBrowserVersionMatch[1];
    }

    return result;
  }

  async retrieveAdditionalDriverInfo(driverKey, notesUrl, infoDict) {
    const response = await (0, _requestPromise.default)({
      url: notesUrl,
      method: 'GET',
      headers: {
        'user-agent': 'appium',
        accept: '*/*'
      },
      resolveWithFullResponse: true,
      timeout: this.timeout
    });
    const {
      minBrowserVersion
    } = this.parseNotes(response.body);

    if (!minBrowserVersion) {
      log.debug(`The driver '${driverKey}' does not contain valid release notes at ${notesUrl}. ` + `Skipping it`);
      return;
    }

    infoDict.minBrowserVersion = minBrowserVersion;
  }

  async parseStorageXml(doc, shouldParseNotes = true) {
    const driverNodes = _xpath.default.select(`//*[local-name(.)='Contents']`, doc);

    log.debug(`Parsed ${driverNodes.length} entries from storage XML`);

    if (_lodash.default.isEmpty(driverNodes)) {
      return;
    }

    const promises = [];

    for (const driverNode of driverNodes) {
      const key = extractNodeText(findChildNode(driverNode, 'Key'));

      if (!_lodash.default.includes(key, '/chromedriver_')) {
        continue;
      }

      log.debug(`Processing chromedriver entry '${key}'`);
      const etag = extractNodeText(findChildNode(driverNode, 'ETag'));

      if (!etag) {
        log.debug(`The entry '${key}' does not contain the checksum. Skipping it`);
        continue;
      }

      const cdInfo = {
        url: `${STORAGE_URL}/${key}`,
        etag: _lodash.default.trim(etag, '"'),
        version: _lodash.default.first(key.split('/'))
      };
      this.mapping[key] = cdInfo;
      const notesPath = `${cdInfo.version}/notes.txt`;
      const isNotesPresent = !!driverNodes.reduce((acc, node) => acc || findChildNode(node, 'Key', notesPath), false);

      if (!isNotesPresent) {
        cdInfo.minBrowserVersion = null;

        if (shouldParseNotes) {
          log.info(`The entry '${key}' does not contain any notes. Skipping it`);
        }

        continue;
      } else if (!shouldParseNotes) {
        continue;
      }

      promises.push(this.retrieveAdditionalDriverInfo(key, `${STORAGE_URL}/${notesPath}`, cdInfo));

      if (promises.length % MAX_PARALLEL_DOWNLOADS === 0) {
        await _bluebird.default.all(promises);
      }
    }

    await _bluebird.default.all(promises);
    log.info(`The total count of entries in the mapping: ${_lodash.default.size(this.mapping)}`);
  }

  async retrieveMapping(shouldParseNotes = true) {
    const response = await (0, _requestPromise.default)({
      url: STORAGE_URL,
      method: 'GET',
      headers: {
        'user-agent': 'appium',
        accept: 'application/xml, */*'
      },
      resolveWithFullResponse: true,
      timeout: this.timeout
    });
    const doc = new _xmldom.DOMParser().parseFromString(response.body);
    await this.parseStorageXml(doc, shouldParseNotes);
    return _lodash.default.cloneDeep(this.mapping);
  }

  async unzipDriver(src, dst) {
    const tmpRoot = await _appiumSupport.tempDir.openDir();

    try {
      await _appiumSupport.zip.extractAllTo(src, tmpRoot);
      const allExtractedItems = await walkDir(tmpRoot);
      const chromedriverPath = allExtractedItems.find(p => _path.default.parse(p).name === 'chromedriver');

      if (!chromedriverPath) {
        throw new Error('The archive was unzipped properly, but we could not find any chromedriver executable');
      }

      log.debug(`Moving the extracted '${_path.default.basename(chromedriverPath)}' to '${dst}'`);
      await _appiumSupport.fs.mv(chromedriverPath, dst, {
        mkdirp: true
      });
    } finally {
      await _appiumSupport.fs.rimraf(tmpRoot);
    }
  }

  selectMatchingDrivers(osInfo, opts = {}) {
    const {
      minBrowserVersion,
      versions = []
    } = opts;

    let driversToSync = _lodash.default.keys(this.mapping);

    if (!_lodash.default.isEmpty(versions)) {
      log.debug(`Selecting chromedrivers whose versions match to ${versions}`);
      driversToSync = driversToSync.filter(x => versions.includes(`${this.mapping[x].version}`));
      log.debug(`Got ${driversToSync.length} item${driversToSync.length === 1 ? '' : 's'}`);
    }

    if (minBrowserVersion) {
      log.debug(`Selecting chromedrivers whose minimum supported browser version matches to ${minBrowserVersion}`);
      driversToSync = driversToSync.reduce((acc, x) => this.mapping[x].minBrowserVersion === `${minBrowserVersion}` ? [...acc, x] : acc, []);
      log.debug(`Got ${driversToSync.length} item${driversToSync.length === 1 ? '' : 's'}`);
    }

    let {
      name,
      arch
    } = osInfo;

    if (arch === '64' && !driversToSync.some(x => x.includes(`_${name}64`))) {
      arch = '32';
    }

    log.debug(`Selecting chromedrivers whose platform matches to ${name}${arch}`);
    driversToSync = driversToSync.filter(x => x.includes(`_${name}${arch}`));
    log.debug(`Got ${driversToSync.length} item${driversToSync.length === 1 ? '' : 's'}`);
    return driversToSync;
  }

  async retrieveDriver(index, driverKey, archivesRoot, isStrict = false) {
    const {
      url,
      etag,
      version
    } = this.mapping[driverKey];

    const archivePath = _path.default.resolve(archivesRoot, `${index}.zip`);

    log.debug(`Retrieving '${url}' to '${archivePath}'`);

    try {
      await new _bluebird.default((resolve, reject) => {
        (0, _request.default)(url).on('error', reject).on('response', res => {
          if (res.statusCode >= 400) {
            return reject(`Error downloading chromedriver at ${url}: ${res.statusCode}`);
          }
        }).pipe(_appiumSupport.fs.createWriteStream(archivePath)).on('close', resolve);
      });
    } catch (e) {
      const msg = `Cannot download chromedriver archive. Original error: ${e.message}`;

      if (isStrict) {
        throw new Error(msg);
      }

      log.error(msg);
      return false;
    }

    if (!(await isCrcOk(archivePath, etag))) {
      const msg = `The checksum for the downloaded chromedriver '${driverKey}' did not match`;

      if (isStrict) {
        throw new Error(msg);
      }

      log.error(msg);
      return false;
    }

    const fileName = `${_path.default.parse(url).name}_v${version}` + (_appiumSupport.system.isWindows() ? '.exe' : '');

    const targetPath = _path.default.resolve(this.chromedriverDir, fileName);

    try {
      await this.unzipDriver(archivePath, targetPath);
    } catch (e) {
      if (isStrict) {
        throw e;
      }

      log.error(e.message);
      return false;
    }

    return true;
  }

  async syncDrivers(opts = {}) {
    if (_lodash.default.isEmpty(this.mapping)) {
      await this.retrieveMapping(!!opts.minBrowserVersion);
    }

    if (_lodash.default.isEmpty(this.mapping)) {
      throw new Error('Cannot retrieve chromedrivers mapping from Google storage');
    }

    const driversToSync = this.selectMatchingDrivers((await getOsInfo()), opts);

    if (_lodash.default.isEmpty(driversToSync)) {
      log.debug(`There are no drivers to sync. Exiting`);
      return [];
    }

    log.debug(`Got ${driversToSync.length} driver(s) to sync: ${driversToSync}`);
    const synchronizedDrivers = [];
    const promises = [];
    const archivesRoot = await _appiumSupport.tempDir.openDir();

    try {
      for (const [idx, driverKey] of driversToSync.entries()) {
        promises.push((async () => {
          if (await this.retrieveDriver(idx, driverKey, archivesRoot, !_lodash.default.isEmpty(opts))) {
            synchronizedDrivers.push(driverKey);
          }
        })());

        if (promises.length % MAX_PARALLEL_DOWNLOADS === 0) {
          await _bluebird.default.all(promises);
        }
      }

      await _bluebird.default.all(promises);
    } finally {
      await _appiumSupport.fs.rimraf(archivesRoot);
    }

    if (!_lodash.default.isEmpty(synchronizedDrivers)) {
      log.info(`Successfully synchronized ${synchronizedDrivers.length} ` + `chromedriver${synchronizedDrivers.length === 1 ? '' : 's'}`);
    } else {
      log.info(`No chromedrivers were synchronized`);
    }

    return synchronizedDrivers;
  }

}

var _default = ChromedriverStorageClient;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
