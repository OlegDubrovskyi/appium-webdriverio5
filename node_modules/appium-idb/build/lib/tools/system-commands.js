"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _lodash = _interopRequireDefault(require("lodash"));

var _shellQuote = require("shell-quote");

var _asyncbox = require("asyncbox");

var _helpers = require("../helpers");

var _logger = _interopRequireDefault(require("../logger.js"));

const PROCESS_INIT_TIMEOUT = 5000;

const COMPANION_PGREP_PATTERN = udid => `${_helpers.IDB_COMPANION_EXECUTABLE}.*--udid[[:space:]]+${udid}`;

function buildDaemonArgs(opts = {}) {
  const {
    port,
    grpcPort
  } = opts;
  const result = ['daemon', '--notifier-path', _helpers.IDB_COMPANION_EXECUTABLE];

  if (port) {
    result.push('--port', port);
  }

  if (grpcPort) {
    result.push('--grpc-port', grpcPort);
  }

  return result;
}

const systemCallMethods = {};

systemCallMethods.connect = async function connect(opts = {}) {
  const {
    onlineTimeout
  } = opts;

  _logger.default.debug(`Connecting ${_helpers.IDB_EXECUTABLE} service to '${this.udid}'`);

  const binaryPaths = {};

  for (const binary of [_helpers.IDB_EXECUTABLE, _helpers.IDB_COMPANION_EXECUTABLE]) {
    try {
      binaryPaths[binary] = await _appiumSupport.fs.which(binary);
    } catch (e) {
      throw new Error(`'${binary}' has not been found in PATH. ` + `Is it installed? Read https://www.fbidb.io for more details`);
    }
  }

  try {
    try {
      await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['connect', this.udid]);
    } catch (connectionError) {
      await (0, _asyncbox.retryInterval)(2, 100, async () => {
        await this.disconnect();

        try {
          await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['kill']);
        } catch (ign) {}

        let isStartupMonitorEnabled = true;

        try {
          const daemon = new _teen_process.SubProcess(_helpers.IDB_EXECUTABLE, buildDaemonArgs(this.executable));
          let daemonOutput = '';
          daemon.on('output', (stdout, stderr) => {
            if (isStartupMonitorEnabled && _lodash.default.trim(stdout || stderr)) {
              daemonOutput += `[daemon] ${stdout || stderr}\n`;
            }
          });

          try {
            await daemon.start(null, PROCESS_INIT_TIMEOUT);
            await _bluebird.default.delay(300);
          } catch (ign) {}

          if (daemon.isRunning) {
            _logger.default.debug(`${_helpers.IDB_EXECUTABLE} daemon started on port ${this.executable.port || _helpers.DEFAULT_IDB_PORT}`);
          } else {
            if (!daemonOutput.includes('address already in use')) {
              const message = `${_helpers.IDB_EXECUTABLE} daemon has failed to start: ${daemonOutput}`;

              _logger.default.warn(message);

              throw new Error(message);
            }

            _logger.default.debug(`The port ${this.executable.port || _helpers.DEFAULT_IDB_PORT} is already in use. ` + `Assuming it is used by ${_helpers.IDB_EXECUTABLE} daemon`);
          }

          await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['connect', this.udid]);
        } catch (connectionError2) {
          if (connectionError2.stderr || connectionError2.stdout) {
            _logger.default.debug(connectionError2.stderr || connectionError2.stdout);
          }

          throw connectionError2;
        } finally {
          isStartupMonitorEnabled = false;
        }
      });
    }
  } catch (e) {
    if (e.stderr) {
      _logger.default.debug(e.stderr);
    }

    throw new Error(`Cannot start ${_helpers.IDB_EXECUTABLE} service for '${this.udid}'. ` + `Check the server log for more details.`);
  }

  _logger.default.info(`Successfully established the connection to ${_helpers.IDB_EXECUTABLE} service for '${this.udid}'`);

  if (onlineTimeout) {
    await this.waitForDevice(onlineTimeout);
  }

  this.executable.path = binaryPaths[_helpers.IDB_EXECUTABLE];
  this.companion.path = binaryPaths[_helpers.IDB_COMPANION_EXECUTABLE];
};

systemCallMethods.waitForDevice = async function waitForDevice(timeoutMs = 10000) {
  if (!timeoutMs) {
    _logger.default.debug('No timeout is provided, so not waiting until the device is online');

    return;
  }

  _logger.default.debug(`Waiting ${timeoutMs}ms until the device is online`);

  const started = process.hrtime();

  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['describe', '--json', '--udid', this.udid]);
        return true;
      } catch (e) {
        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 300
    });
  } catch (e) {
    throw new Error(`The device '${this.udid}' is not responding to idb requests after ${timeoutMs}ms timeout. ` + `Original error: ${e.stderr || e.message}`);
  }

  const [seconds, ns] = process.hrtime(started);

  _logger.default.debug(`The device '${this.udid}' is online and is ready to accept idb commands in ` + `${(seconds + ns / 1e9).toFixed(2)}s`);
};

systemCallMethods.disconnect = async function disconnect() {
  _logger.default.debug(`Disconnecting ${_helpers.IDB_EXECUTABLE} service from '${this.udid}'`);

  try {
    await (0, _teen_process.exec)(this.executable.path, ['disconnect', this.udid]);
  } catch (ign) {}

  const companionPids = await (0, _helpers.getPids)(COMPANION_PGREP_PATTERN(this.udid));

  if (_lodash.default.isEmpty(companionPids)) {
    return;
  }

  _logger.default.debug(`Cleaning up ${companionPids.length} obsolete ${_helpers.IDB_COMPANION_EXECUTABLE} ` + `process${companionPids.length === 1 ? '' : 'es'}`);

  await (0, _teen_process.exec)('kill', ['-2', ...companionPids]);
};

systemCallMethods.exec = async function exec(cmd, opts = {}) {
  if (!cmd) {
    throw new Error('You need to pass in a command to exec()');
  }

  cmd = _lodash.default.isArray(cmd) ? cmd : [cmd];
  opts = _lodash.default.cloneDeep(opts);
  opts.timeout = opts.timeout || this.execTimeout || _helpers.DEFAULT_IDB_EXEC_TIMEOUT;
  opts.timeoutCapName = opts.timeoutCapName || 'execTimeout';
  const args = [...cmd, ...this.executable.defaultArgs];

  _logger.default.debug(`Running '${this.executable.path} ${(0, _shellQuote.quote)(args)}'`);

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(this.executable.path, args, opts);
    return stdout;
  } catch (e) {
    if (_appiumSupport.util.hasValue(e.code)) {
      e.message = `Error executing ${_helpers.IDB_EXECUTABLE}. Original error: '${e.message}'; ` + `Stdout: '${(e.stdout || '').trim()}'; ` + `Stderr: '${(e.stderr || '').trim()}'; ` + `Code: '${e.code}'`;
    } else {
      e.message = `Error executing ${_helpers.IDB_EXECUTABLE}. Original error: '${e.message}'. ` + `Try to increase the ${opts.timeout}ms ${_helpers.IDB_EXECUTABLE} execution timeout represented by '${opts.timeoutCapName}' capability`;
    }

    throw e;
  }
};

systemCallMethods.createSubProcess = function createSubProcess(args = []) {
  const idbArgs = [...args, ...this.executable.defaultArgs];

  _logger.default.debug(`Creating ${_helpers.IDB_EXECUTABLE} subprocess with args: ${(0, _shellQuote.quote)(args)}`);

  return new _teen_process.SubProcess(this.executable.path, idbArgs);
};

var _default = systemCallMethods;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi90b29scy9zeXN0ZW0tY29tbWFuZHMuanMiXSwibmFtZXMiOlsiUFJPQ0VTU19JTklUX1RJTUVPVVQiLCJDT01QQU5JT05fUEdSRVBfUEFUVEVSTiIsInVkaWQiLCJJREJfQ09NUEFOSU9OX0VYRUNVVEFCTEUiLCJidWlsZERhZW1vbkFyZ3MiLCJvcHRzIiwicG9ydCIsImdycGNQb3J0IiwicmVzdWx0IiwicHVzaCIsInN5c3RlbUNhbGxNZXRob2RzIiwiY29ubmVjdCIsIm9ubGluZVRpbWVvdXQiLCJsb2ciLCJkZWJ1ZyIsIklEQl9FWEVDVVRBQkxFIiwiYmluYXJ5UGF0aHMiLCJiaW5hcnkiLCJmcyIsIndoaWNoIiwiZSIsIkVycm9yIiwiY29ubmVjdGlvbkVycm9yIiwiZGlzY29ubmVjdCIsImlnbiIsImlzU3RhcnR1cE1vbml0b3JFbmFibGVkIiwiZGFlbW9uIiwiU3ViUHJvY2VzcyIsImV4ZWN1dGFibGUiLCJkYWVtb25PdXRwdXQiLCJvbiIsInN0ZG91dCIsInN0ZGVyciIsIl8iLCJ0cmltIiwic3RhcnQiLCJCIiwiZGVsYXkiLCJpc1J1bm5pbmciLCJERUZBVUxUX0lEQl9QT1JUIiwiaW5jbHVkZXMiLCJtZXNzYWdlIiwid2FybiIsImNvbm5lY3Rpb25FcnJvcjIiLCJpbmZvIiwid2FpdEZvckRldmljZSIsInBhdGgiLCJjb21wYW5pb24iLCJ0aW1lb3V0TXMiLCJzdGFydGVkIiwicHJvY2VzcyIsImhydGltZSIsIndhaXRNcyIsImludGVydmFsTXMiLCJzZWNvbmRzIiwibnMiLCJ0b0ZpeGVkIiwiY29tcGFuaW9uUGlkcyIsImlzRW1wdHkiLCJsZW5ndGgiLCJleGVjIiwiY21kIiwiaXNBcnJheSIsImNsb25lRGVlcCIsInRpbWVvdXQiLCJleGVjVGltZW91dCIsIkRFRkFVTFRfSURCX0VYRUNfVElNRU9VVCIsInRpbWVvdXRDYXBOYW1lIiwiYXJncyIsImRlZmF1bHRBcmdzIiwidXRpbCIsImhhc1ZhbHVlIiwiY29kZSIsImNyZWF0ZVN1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YSxtQkFBa0IxQix1QkFBZSxzQkFBcUJLLENBQUMsQ0FBQ3FCLE9BQVEsS0FBakUsR0FDVCxZQUFXLENBQUNyQixDQUFDLENBQUNXLE1BQUYsSUFBWSxFQUFiLEVBQWlCRyxJQUFqQixFQUF3QixLQUQxQixHQUVULFlBQVcsQ0FBQ2QsQ0FBQyxDQUFDWSxNQUFGLElBQVksRUFBYixFQUFpQkUsSUFBakIsRUFBd0IsS0FGMUIsR0FHVCxVQUFTZCxDQUFDLENBQUNvRCxJQUFLLEdBSG5CO0FBSUQsS0FMRCxNQUtPO0FBQ0xwRCxNQUFBQSxDQUFDLENBQUNxQixPQUFGLEdBQWEsbUJBQWtCMUIsdUJBQWUsc0JBQXFCSyxDQUFDLENBQUNxQixPQUFRLEtBQWpFLEdBQ1QsdUJBQXNCcEMsSUFBSSxDQUFDMkQsT0FBUSxNQUFLakQsdUJBQWUsc0NBQXFDVixJQUFJLENBQUM4RCxjQUFlLGNBRG5IO0FBRUQ7O0FBQ0QsVUFBTS9DLENBQU47QUFDRDtBQUNGLENBNUJEOztBQXFDQVYsaUJBQWlCLENBQUMrRCxnQkFBbEIsR0FBcUMsU0FBU0EsZ0JBQVQsQ0FBMkJMLElBQUksR0FBRyxFQUFsQyxFQUFzQztBQUN6RSxRQUFNTSxPQUFPLEdBQUcsQ0FBQyxHQUFHTixJQUFKLEVBQVUsR0FBRyxLQUFLeEMsVUFBTCxDQUFnQnlDLFdBQTdCLENBQWhCOztBQUNBeEQsa0JBQUlDLEtBQUosQ0FBVyxZQUFXQyx1QkFBZSwwQkFBeUIsdUJBQU1xRCxJQUFOLENBQVksRUFBMUU7O0FBQ0EsU0FBTyxJQUFJekMsd0JBQUosQ0FBZSxLQUFLQyxVQUFMLENBQWdCa0IsSUFBL0IsRUFBcUM0QixPQUFyQyxDQUFQO0FBQ0QsQ0FKRDs7ZUFNZWhFLGlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgZnMsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyBleGVjIGFzIHRwRXhlYywgU3ViUHJvY2VzcyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgcXVvdGUgfSBmcm9tICdzaGVsbC1xdW90ZSc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsLCB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHtcbiAgZ2V0UGlkcywgREVGQVVMVF9JREJfRVhFQ19USU1FT1VULCBJREJfRVhFQ1VUQUJMRSxcbiAgSURCX0NPTVBBTklPTl9FWEVDVVRBQkxFLCBERUZBVUxUX0lEQl9QT1JULFxufSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcblxuXG5jb25zdCBQUk9DRVNTX0lOSVRfVElNRU9VVCA9IDUwMDA7XG5jb25zdCBDT01QQU5JT05fUEdSRVBfUEFUVEVSTiA9ICh1ZGlkKSA9PlxuICBgJHtJREJfQ09NUEFOSU9OX0VYRUNVVEFCTEV9LiotLXVkaWRbWzpzcGFjZTpdXSske3VkaWR9YDtcblxuZnVuY3Rpb24gYnVpbGREYWVtb25BcmdzIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHBvcnQsXG4gICAgZ3JwY1BvcnQsXG4gIH0gPSBvcHRzO1xuXG4gIGNvbnN0IHJlc3VsdCA9IFtcbiAgICAnZGFlbW9uJyxcbiAgICAnLS1ub3RpZmllci1wYXRoJywgSURCX0NPTVBBTklPTl9FWEVDVVRBQkxFLFxuICBdO1xuICBpZiAocG9ydCkge1xuICAgIHJlc3VsdC5wdXNoKCctLXBvcnQnLCBwb3J0KTtcbiAgfVxuICBpZiAoZ3JwY1BvcnQpIHtcbiAgICByZXN1bHQucHVzaCgnLS1ncnBjLXBvcnQnLCBncnBjUG9ydCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5jb25zdCBzeXN0ZW1DYWxsTWV0aG9kcyA9IHt9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENvbm5lY3RPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHs/bnVtYmVyfSBvbmxpbmVUaW1lb3V0IC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gd2FpdFxuICogdW50aWwgdGhlIGRldmljZSB1bmRlciB0ZXN0cyBpcyBvbmxpbmUuIE5vIHdhaXQgaXMgZ29pbmcgdG8gYmUgcGVyZm9ybWVkXG4gKiBpZiB0aGUgdGltZW91dCBpcyBub3Qgc2V0LiBJdCBpcyByZWNvbW1lbmRlZCB0byBwcm92aWRlIHRoaXMgdmFsdWUgaWZcbiAqIGBjb25uZWN0YCBpcyBjYWxsZWQgcmlnaHQgYWZ0ZXIgZGV2aWNlIGlzIGJvb3RlZCwgc28gbm90IGFsbCB0aGUgcmVxdWlyZWRcbiAqIGRldmljZSBzZXJ2aWNlcyBoYXZlIGJlZW4gc3RhcnRlZCB5ZXQuXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplcyBpZGIgYW5kIGNvbXBhbmlvbiBwcm9jZXNzZXMgaWYgbmVjZXNzYXJ5IGFuZFxuICogYXNzaWducyBwYXRoIHByb3BlcnRpZXMuIEl0IGlzIG1hbmRhdG9yeSB0byBjYWxsIHRoaXMgbWV0aG9kIGJlZm9yZVxuICogb25lIGNhbiBzdGFydCB1c2luZyBJREIgaW5zdGFuY2UsXG4gKlxuICogQHRocm93cyB7RXJyb3J9IElmIG1hbmRhdG9yeSBpZGIgZXhlY3V0YWJsZXMgYXJlIG5vdCBwcmVzZW50IG9uIHRoZVxuICogbG9jYWxob3N0IG9yIHRoZXJlIHdhcyBhIGZhaWx1cmUgd2hpbGUgc3RhcnRpbmcvZGV0ZWN0aW5nIHRoZW1cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuY29ubmVjdCA9IGFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QgKG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgb25saW5lVGltZW91dCxcbiAgfSA9IG9wdHM7XG5cbiAgbG9nLmRlYnVnKGBDb25uZWN0aW5nICR7SURCX0VYRUNVVEFCTEV9IHNlcnZpY2UgdG8gJyR7dGhpcy51ZGlkfSdgKTtcblxuICBjb25zdCBiaW5hcnlQYXRocyA9IHt9O1xuICBmb3IgKGNvbnN0IGJpbmFyeSBvZiBbSURCX0VYRUNVVEFCTEUsIElEQl9DT01QQU5JT05fRVhFQ1VUQUJMRV0pIHtcbiAgICB0cnkge1xuICAgICAgYmluYXJ5UGF0aHNbYmluYXJ5XSA9IGF3YWl0IGZzLndoaWNoKGJpbmFyeSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtiaW5hcnl9JyBoYXMgbm90IGJlZW4gZm91bmQgaW4gUEFUSC4gYCArXG4gICAgICAgIGBJcyBpdCBpbnN0YWxsZWQ/IFJlYWQgaHR0cHM6Ly93d3cuZmJpZGIuaW8gZm9yIG1vcmUgZGV0YWlsc2ApO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRwRXhlYyhJREJfRVhFQ1VUQUJMRSwgWydjb25uZWN0JywgdGhpcy51ZGlkXSk7XG4gICAgfSBjYXRjaCAoY29ubmVjdGlvbkVycm9yKSB7XG4gICAgICBhd2FpdCByZXRyeUludGVydmFsKDIsIDEwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB0cEV4ZWMoSURCX0VYRUNVVEFCTEUsIFsna2lsbCddKTtcbiAgICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgICAgICBsZXQgaXNTdGFydHVwTW9uaXRvckVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGRhZW1vbiA9IG5ldyBTdWJQcm9jZXNzKElEQl9FWEVDVVRBQkxFLCBidWlsZERhZW1vbkFyZ3ModGhpcy5leGVjdXRhYmxlKSk7XG4gICAgICAgICAgbGV0IGRhZW1vbk91dHB1dCA9ICcnO1xuICAgICAgICAgIGRhZW1vbi5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNTdGFydHVwTW9uaXRvckVuYWJsZWQgJiYgXy50cmltKHN0ZG91dCB8fCBzdGRlcnIpKSB7XG4gICAgICAgICAgICAgIGRhZW1vbk91dHB1dCArPSBgW2RhZW1vbl0gJHtzdGRvdXQgfHwgc3RkZXJyfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IGRhZW1vbi5zdGFydChudWxsLCBQUk9DRVNTX0lOSVRfVElNRU9VVCk7XG4gICAgICAgICAgICBhd2FpdCBCLmRlbGF5KDMwMCk7XG4gICAgICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgICAgICAgIGlmIChkYWVtb24uaXNSdW5uaW5nKSB7XG4gICAgICAgICAgICBsb2cuZGVidWcoYCR7SURCX0VYRUNVVEFCTEV9IGRhZW1vbiBzdGFydGVkIG9uIHBvcnQgJHt0aGlzLmV4ZWN1dGFibGUucG9ydCB8fCBERUZBVUxUX0lEQl9QT1JUfWApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWRhZW1vbk91dHB1dC5pbmNsdWRlcygnYWRkcmVzcyBhbHJlYWR5IGluIHVzZScpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtJREJfRVhFQ1VUQUJMRX0gZGFlbW9uIGhhcyBmYWlsZWQgdG8gc3RhcnQ6ICR7ZGFlbW9uT3V0cHV0fWA7XG4gICAgICAgICAgICAgIGxvZy53YXJuKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2cuZGVidWcoYFRoZSBwb3J0ICR7dGhpcy5leGVjdXRhYmxlLnBvcnQgfHwgREVGQVVMVF9JREJfUE9SVH0gaXMgYWxyZWFkeSBpbiB1c2UuIGAgK1xuICAgICAgICAgICAgICBgQXNzdW1pbmcgaXQgaXMgdXNlZCBieSAke0lEQl9FWEVDVVRBQkxFfSBkYWVtb25gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXdhaXQgdHBFeGVjKElEQl9FWEVDVVRBQkxFLCBbJ2Nvbm5lY3QnLCB0aGlzLnVkaWRdKTtcbiAgICAgICAgfSBjYXRjaCAoY29ubmVjdGlvbkVycm9yMikge1xuICAgICAgICAgIGlmIChjb25uZWN0aW9uRXJyb3IyLnN0ZGVyciB8fCBjb25uZWN0aW9uRXJyb3IyLnN0ZG91dCkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKGNvbm5lY3Rpb25FcnJvcjIuc3RkZXJyIHx8IGNvbm5lY3Rpb25FcnJvcjIuc3Rkb3V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgY29ubmVjdGlvbkVycm9yMjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpc1N0YXJ0dXBNb25pdG9yRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZS5zdGRlcnIpIHtcbiAgICAgIGxvZy5kZWJ1ZyhlLnN0ZGVycik7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHN0YXJ0ICR7SURCX0VYRUNVVEFCTEV9IHNlcnZpY2UgZm9yICcke3RoaXMudWRpZH0nLiBgICtcbiAgICAgIGBDaGVjayB0aGUgc2VydmVyIGxvZyBmb3IgbW9yZSBkZXRhaWxzLmApO1xuICB9XG4gIGxvZy5pbmZvKGBTdWNjZXNzZnVsbHkgZXN0YWJsaXNoZWQgdGhlIGNvbm5lY3Rpb24gdG8gJHtJREJfRVhFQ1VUQUJMRX0gc2VydmljZSBmb3IgJyR7dGhpcy51ZGlkfSdgKTtcblxuICBpZiAob25saW5lVGltZW91dCkge1xuICAgIGF3YWl0IHRoaXMud2FpdEZvckRldmljZShvbmxpbmVUaW1lb3V0KTtcbiAgfVxuXG4gIHRoaXMuZXhlY3V0YWJsZS5wYXRoID0gYmluYXJ5UGF0aHNbSURCX0VYRUNVVEFCTEVdO1xuICB0aGlzLmNvbXBhbmlvbi5wYXRoID0gYmluYXJ5UGF0aHNbSURCX0NPTVBBTklPTl9FWEVDVVRBQkxFXTtcbn07XG5cbi8qKlxuICogQmxvY2tzIHVudGlsIHRoZSBkZXZpY2UgdW5kZXIgdGVzdCBzdGFydHMgcmVzcG9uZGluZyB0byBpZGIgY29tbWFuZHMuXG4gKiBUaGUgZGV2aWNlIG11c3QgYmUgYm9vdGVkL29ubGluZSBhbmQgaWRiIG11c3QgYmUgYWxyZWFkeSBjb25uZWN0ZWQgZm9yIHRoYXQgdG8gaGFwcGVuXG4gKlxuICogQHBhcmFtIHs/bnVtYmVyfSB0aW1lb3V0TXMgWzEwMDAwXSAtIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHdhaXRcbiAqIHVudGlsIHRoZSBkZXZpY2UgdW5kZXIgdGVzdHMgaXMgb25saW5lLiBUaGUgbWV0aG9kIHdpbGwgcmV0dXJuIGltbWVkaWF0ZWx5XG4gKiBpZiB0aGUgdGltZW91dCBpcyBmYWxzeVxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBkZXZpY2UgaXMgbm90IHJlc3BvbmRpbmcgd2l0aGluIHRoZSBnaXZlbiB0aW1lb3V0XG4gKi9cbnN5c3RlbUNhbGxNZXRob2RzLndhaXRGb3JEZXZpY2UgPSBhc3luYyBmdW5jdGlvbiB3YWl0Rm9yRGV2aWNlICh0aW1lb3V0TXMgPSAxMDAwMCkge1xuICBpZiAoIXRpbWVvdXRNcykge1xuICAgIGxvZy5kZWJ1ZygnTm8gdGltZW91dCBpcyBwcm92aWRlZCwgc28gbm90IHdhaXRpbmcgdW50aWwgdGhlIGRldmljZSBpcyBvbmxpbmUnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2cuZGVidWcoYFdhaXRpbmcgJHt0aW1lb3V0TXN9bXMgdW50aWwgdGhlIGRldmljZSBpcyBvbmxpbmVgKTtcbiAgY29uc3Qgc3RhcnRlZCA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0cEV4ZWMoSURCX0VYRUNVVEFCTEUsIFsnZGVzY3JpYmUnLCAnLS1qc29uJywgJy0tdWRpZCcsIHRoaXMudWRpZF0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHdhaXRNczogdGltZW91dE1zLFxuICAgICAgaW50ZXJ2YWxNczogMzAwLFxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgZGV2aWNlICcke3RoaXMudWRpZH0nIGlzIG5vdCByZXNwb25kaW5nIHRvIGlkYiByZXF1ZXN0cyBhZnRlciAke3RpbWVvdXRNc31tcyB0aW1lb3V0LiBgICtcbiAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLnN0ZGVyciB8fCBlLm1lc3NhZ2V9YCk7XG4gIH1cbiAgY29uc3QgW3NlY29uZHMsIG5zXSA9IHByb2Nlc3MuaHJ0aW1lKHN0YXJ0ZWQpO1xuICBsb2cuZGVidWcoYFRoZSBkZXZpY2UgJyR7dGhpcy51ZGlkfScgaXMgb25saW5lIGFuZCBpcyByZWFkeSB0byBhY2NlcHQgaWRiIGNvbW1hbmRzIGluIGAgK1xuICAgIGAkeyhzZWNvbmRzICsgbnMgLyAxZTkpLnRvRml4ZWQoMil9c2ApO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBjbGVhbnVwIG9mIG9ic29sZXRlIGNvbXBhbmlvbiBwcm9jZXNzZXNcbiAqIFRoZSBkYWVtb24gcHJvY2VzcyBpcyBsZWZ0IHVudG91Y2hlZCwgYmVjYXVzZSBraWxsaW5nIGl0IG1pZ2h0XG4gKiBwb3RlbnRpYWxseSBhZmZlY3Qgb3RoZXIgcGFyYWxsZWwgc2Vzc2lvbnMuIE5vdGhpbmdcbiAqIGlzIGRvbmUgaWYgbm8gb2Jzb2xldGUgcHJvY2Vzc2VzIGFyZSBmb3VuZC5cbiAqL1xuc3lzdGVtQ2FsbE1ldGhvZHMuZGlzY29ubmVjdCA9IGFzeW5jIGZ1bmN0aW9uIGRpc2Nvbm5lY3QgKCkge1xuICBsb2cuZGVidWcoYERpc2Nvbm5lY3RpbmcgJHtJREJfRVhFQ1VUQUJMRX0gc2VydmljZSBmcm9tICcke3RoaXMudWRpZH0nYCk7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCB0cEV4ZWModGhpcy5leGVjdXRhYmxlLnBhdGgsIFsnZGlzY29ubmVjdCcsIHRoaXMudWRpZF0pO1xuICB9IGNhdGNoIChpZ24pIHt9XG5cbiAgY29uc3QgY29tcGFuaW9uUGlkcyA9IGF3YWl0IGdldFBpZHMoQ09NUEFOSU9OX1BHUkVQX1BBVFRFUk4odGhpcy51ZGlkKSk7XG4gIGlmIChfLmlzRW1wdHkoY29tcGFuaW9uUGlkcykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsb2cuZGVidWcoYENsZWFuaW5nIHVwICR7Y29tcGFuaW9uUGlkcy5sZW5ndGh9IG9ic29sZXRlICR7SURCX0NPTVBBTklPTl9FWEVDVVRBQkxFfSBgICtcbiAgICBgcHJvY2VzcyR7Y29tcGFuaW9uUGlkcy5sZW5ndGggPT09IDEgPyAnJyA6ICdlcyd9YCk7XG4gIGF3YWl0IHRwRXhlYygna2lsbCcsIFsnLTInLCAuLi5jb21wYW5pb25QaWRzXSk7XG59O1xuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIGdpdmVuIGlkYiBjb21tYW5kLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGNtZCAtIFRoZSBhcnJheSBvZiByZXN0IGNvbW1hbmQgbGluZSBwYXJhbWV0ZXJzXG4gKiAgICAgICAgICAgICAgICAgICAgICBvciBhIHNpbmdsZSBzdHJpbmcgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgbWFwcGluZy4gU2VlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIHtAbGluayBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL25vZGUtdGVlbl9wcm9jZXNzfVxuICogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHJldHVybiB7c3RyaW5nfSAtIENvbW1hbmQncyBzdGRvdXQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGNvbW1hbmQgcmV0dXJuZWQgbm9uLXplcm8gZXhpdCBjb2RlLlxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5leGVjID0gYXN5bmMgZnVuY3Rpb24gZXhlYyAoY21kLCBvcHRzID0ge30pIHtcbiAgaWYgKCFjbWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHBhc3MgaW4gYSBjb21tYW5kIHRvIGV4ZWMoKScpO1xuICB9XG4gIGNtZCA9IF8uaXNBcnJheShjbWQpID8gY21kIDogW2NtZF07XG5cbiAgb3B0cyA9IF8uY2xvbmVEZWVwKG9wdHMpO1xuICAvLyBzZXR0aW5nIGRlZmF1bHQgdGltZW91dCBmb3IgZWFjaCBjb21tYW5kIHRvIHByZXZlbnQgaW5maW5pdGUgd2FpdC5cbiAgb3B0cy50aW1lb3V0ID0gb3B0cy50aW1lb3V0IHx8IHRoaXMuZXhlY1RpbWVvdXQgfHwgREVGQVVMVF9JREJfRVhFQ19USU1FT1VUO1xuICBvcHRzLnRpbWVvdXRDYXBOYW1lID0gb3B0cy50aW1lb3V0Q2FwTmFtZSB8fCAnZXhlY1RpbWVvdXQnOyAvLyBGb3IgZXJyb3IgbWVzc2FnZVxuXG4gIGNvbnN0IGFyZ3MgPSBbLi4uY21kLCAuLi50aGlzLmV4ZWN1dGFibGUuZGVmYXVsdEFyZ3NdO1xuICBsb2cuZGVidWcoYFJ1bm5pbmcgJyR7dGhpcy5leGVjdXRhYmxlLnBhdGh9ICR7cXVvdGUoYXJncyl9J2ApO1xuICB0cnkge1xuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgdHBFeGVjKHRoaXMuZXhlY3V0YWJsZS5wYXRoLCBhcmdzLCBvcHRzKTtcbiAgICByZXR1cm4gc3Rkb3V0O1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUoZS5jb2RlKSkge1xuICAgICAgZS5tZXNzYWdlID0gYEVycm9yIGV4ZWN1dGluZyAke0lEQl9FWEVDVVRBQkxFfS4gT3JpZ2luYWwgZXJyb3I6ICcke2UubWVzc2FnZX0nOyBgICtcbiAgICAgICAgYFN0ZG91dDogJyR7KGUuc3Rkb3V0IHx8ICcnKS50cmltKCl9JzsgYCArXG4gICAgICAgIGBTdGRlcnI6ICckeyhlLnN0ZGVyciB8fCAnJykudHJpbSgpfSc7IGAgK1xuICAgICAgICBgQ29kZTogJyR7ZS5jb2RlfSdgO1xuICAgIH0gZWxzZSB7XG4gICAgICBlLm1lc3NhZ2UgPSBgRXJyb3IgZXhlY3V0aW5nICR7SURCX0VYRUNVVEFCTEV9LiBPcmlnaW5hbCBlcnJvcjogJyR7ZS5tZXNzYWdlfScuIGAgK1xuICAgICAgICBgVHJ5IHRvIGluY3JlYXNlIHRoZSAke29wdHMudGltZW91dH1tcyAke0lEQl9FWEVDVVRBQkxFfSBleGVjdXRpb24gdGltZW91dCByZXByZXNlbnRlZCBieSAnJHtvcHRzLnRpbWVvdXRDYXBOYW1lfScgY2FwYWJpbGl0eWA7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBTdWJQcm9jZXNzIGluc3RhbmNlIG9mIGlkYiBmb3IgYmFja2dyb3VuZFxuICogZXhlY3V0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gYXJncyBhZGRpdGlvbmFsIGlkYiBhcmd1bWVudHNcbiAqIEByZXR1cm5zIHtTdWJQcm9jZXNzfVxuICovXG5zeXN0ZW1DYWxsTWV0aG9kcy5jcmVhdGVTdWJQcm9jZXNzID0gZnVuY3Rpb24gY3JlYXRlU3ViUHJvY2VzcyAoYXJncyA9IFtdKSB7XG4gIGNvbnN0IGlkYkFyZ3MgPSBbLi4uYXJncywgLi4udGhpcy5leGVjdXRhYmxlLmRlZmF1bHRBcmdzXTtcbiAgbG9nLmRlYnVnKGBDcmVhdGluZyAke0lEQl9FWEVDVVRBQkxFfSBzdWJwcm9jZXNzIHdpdGggYXJnczogJHtxdW90ZShhcmdzKX1gKTtcbiAgcmV0dXJuIG5ldyBTdWJQcm9jZXNzKHRoaXMuZXhlY3V0YWJsZS5wYXRoLCBpZGJBcmdzKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN5c3RlbUNhbGxNZXRob2RzO1xuIl0sImZpbGUiOiJsaWIvdG9vbHMvc3lzdGVtLWNvbW1hbmRzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
