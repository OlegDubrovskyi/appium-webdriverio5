"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSim = createSim;
exports.getExistingSim = getExistingSim;
exports.runSimulatorReset = runSimulatorReset;
exports.installToSimulator = installToSimulator;
exports.shutdownSimulator = shutdownSimulator;
exports.shutdownOtherSimulators = shutdownOtherSimulators;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _appiumIosSimulator = require("appium-ios-simulator");

var _nodeSimctl = require("node-simctl");

var _utils = require("./utils");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _desiredCaps = require("./desired-caps");

const INSTALL_DAEMON_CACHE = 'com.apple.mobile.installd.staging';

async function createSim(caps, platform = _desiredCaps.PLATFORM_NAME_IOS) {
  const appiumTestDeviceName = `appiumTest-${_uuidJs.default.create().toString().toUpperCase()}-${caps.deviceName}`;
  const udid = await (0, _nodeSimctl.createDevice)(appiumTestDeviceName, caps.deviceName, caps.platformVersion, {
    platform
  });
  return await (0, _appiumIosSimulator.getSimulator)(udid);
}

async function getExistingSim(opts) {
  const devices = await (0, _nodeSimctl.getDevices)(opts.platformVersion);
  const appiumTestDeviceName = `appiumTest-${opts.deviceName}`;
  let appiumTestDevice;

  for (const device of _lodash.default.values(devices)) {
    if (device.name === opts.deviceName) {
      return await (0, _appiumIosSimulator.getSimulator)(device.udid);
    }

    if (device.name === appiumTestDeviceName) {
      appiumTestDevice = device;
    }
  }

  if (appiumTestDevice) {
    _logger.default.warn(`Unable to find device '${opts.deviceName}'. Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);

    return await (0, _appiumIosSimulator.getSimulator)(appiumTestDevice.udid);
  }

  return null;
}

async function shutdownSimulator(device) {
  await (0, _utils.resetXCTestProcesses)(device.udid, true);
  await device.shutdown();
}

async function runSimulatorReset(device, opts) {
  if (opts.noReset && !opts.fullReset) {
    _logger.default.debug('Reset: noReset is on. Leaving simulator as is');

    return;
  }

  if (!device) {
    _logger.default.debug('Reset: no device available. Skipping');

    return;
  }

  if (opts.fullReset) {
    _logger.default.debug('Reset: fullReset is on. Cleaning simulator');

    await shutdownSimulator(device);
    let isKeychainsBackupSuccessful = false;

    if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
      isKeychainsBackupSuccessful = await device.backupKeychains();
    }

    await device.clean();

    if (isKeychainsBackupSuccessful) {
      await device.restoreKeychains(opts.keychainsExcludePatterns || []);

      _logger.default.info(`Successfully restored keychains after full reset`);
    } else if (opts.keychainsExcludePatterns || opts.keepKeyChains) {
      _logger.default.warn('Cannot restore keychains after full reset, because ' + 'the backup operation did not succeed');
    }
  } else if (opts.bundleId) {
    if (await device.isRunning()) {
      if (opts.enforceSimulatorShutdown) {
        await shutdownSimulator(device);
      } else {
        try {
          await (0, _nodeSimctl.terminate)(device.udid, opts.bundleId);
        } catch (err) {
          _logger.default.warn(`Reset: failed to terminate Simulator application with id "${opts.bundleId}"`);
        }
      }
    }

    if (opts.app) {
      _logger.default.info('Not scrubbing third party app in anticipation of uninstall');

      return;
    }

    const isSafari = (opts.browserName || '').toLowerCase() === 'safari';

    try {
      if (isSafari) {
        await device.cleanSafari();
      } else {
        await device.scrubCustomApp('', opts.bundleId);
      }
    } catch (err) {
      _logger.default.warn(err.message);

      _logger.default.warn(`Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"'}. Leaving as is.`);
    }
  }
}

async function installToSimulator(device, app, bundleId, noReset = true) {
  if (!app) {
    _logger.default.debug('No app path is given. Nothing to install.');

    return;
  }

  if (bundleId) {
    if (await device.isAppInstalled(bundleId)) {
      if (noReset) {
        _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);

        return;
      }

      _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);

      await device.removeApp(bundleId);
    }
  }

  const installdCacheRoot = _path.default.resolve(device.getDir(), 'Library', 'Caches', INSTALL_DAEMON_CACHE);

  let tmpRoot = null;

  if (await _appiumSupport.fs.exists(installdCacheRoot)) {
    tmpRoot = await _appiumSupport.tempDir.openDir();

    _logger.default.debug('Cleaning installd cache to save the disk space');

    await _appiumSupport.fs.mv(installdCacheRoot, _path.default.resolve(tmpRoot, INSTALL_DAEMON_CACHE), {
      mkdirp: true
    });
    await (0, _appiumSupport.mkdirp)(installdCacheRoot);
  }

  _logger.default.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);

  try {
    try {
      await device.installApp(app);
    } catch (e) {
      _logger.default.info(`Got an error on '${app}' install: ${e.message}`);

      if (e.message.includes('MIInstallerErrorDomain') && tmpRoot) {
        _logger.default.info(`installd requires the cache to be available in order to install '${app}'. ` + `Restoring the cache`);

        await _appiumSupport.fs.rimraf(installdCacheRoot);
        await _appiumSupport.fs.mv(_path.default.resolve(tmpRoot, INSTALL_DAEMON_CACHE), installdCacheRoot, {
          mkdirp: true
        });
      }

      _logger.default.info('Retrying application install');

      await device.installApp(app);
    }

    _logger.default.debug('The app has been installed successfully.');
  } finally {
    if (tmpRoot && (await _appiumSupport.fs.exists(tmpRoot))) {
      await _appiumSupport.fs.rimraf(tmpRoot);
    }
  }
}

async function shutdownOtherSimulators(currentDevice) {
  const allDevices = _lodash.default.flatMap(_lodash.default.values((await (0, _nodeSimctl.getDevices)())));

  const otherBootedDevices = allDevices.filter(device => device.udid !== currentDevice.udid && device.state === 'Booted');

  if (_lodash.default.isEmpty(otherBootedDevices)) {
    _logger.default.info('No other running simulators have been detected');

    return;
  }

  _logger.default.info(`Detected ${otherBootedDevices.length} other running Simulator${otherBootedDevices.length === 1 ? '' : 's'}.` + `Shutting ${otherBootedDevices.length === 1 ? 'it' : 'them'} down...`);

  for (const {
    udid
  } of otherBootedDevices) {
    await (0, _utils.resetXCTestProcesses)(udid, true);
    await (0, _nodeSimctl.shutdown)(udid);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
