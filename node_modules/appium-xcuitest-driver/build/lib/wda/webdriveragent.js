"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BOOTSTRAP_PATH", {
  enumerable: true,
  get: function () {
    return _appiumWebdriveragent.BOOTSTRAP_PATH;
  }
});
Object.defineProperty(exports, "WDA_BUNDLE_ID", {
  enumerable: true,
  get: function () {
    return _appiumWebdriveragent.WDA_BUNDLE_ID;
  }
});
exports.WDA_BASE_URL = exports.WebDriverAgent = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url2 = _interopRequireDefault(require("url"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _noSessionProxy = require("./no-session-proxy");

var _utils = require("./utils");

var _utils2 = require("../utils");

var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));

var _iproxy = _interopRequireDefault(require("./iproxy"));

var _teen_process = require("teen_process");

var _asyncLock = _interopRequireDefault(require("async-lock"));

var _appiumWebdriveragent = require("appium-webdriveragent");

const WDA_LAUNCH_TIMEOUT = 60 * 1000;
const WDA_AGENT_PORT = 8100;
const WDA_BASE_URL = 'http://localhost';
exports.WDA_BASE_URL = WDA_BASE_URL;
const SHARED_RESOURCES_GUARD = new _asyncLock.default();

class WebDriverAgent {
  constructor(xcodeVersion, args = {}) {
    this.xcodeVersion = xcodeVersion;
    this.args = _lodash.default.clone(args);
    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.platformName = args.platformName;
    this.iosSdkVersion = args.iosSdkVersion;
    this.host = args.host;
    this.realDevice = !!args.realDevice;
    this.setWDAPaths(args.bootstrapPath, args.agentPath);
    this.wdaLocalPort = args.wdaLocalPort;
    this.wdaBaseUrl = args.wdaBaseUrl || WDA_BASE_URL;
    this.prebuildWDA = args.prebuildWDA;
    this.webDriverAgentUrl = args.webDriverAgentUrl;
    this.started = false;
    this.wdaConnectionTimeout = args.wdaConnectionTimeout;
    this.useCarthageSsl = _lodash.default.isBoolean(args.useCarthageSsl) && args.useCarthageSsl;
    this.useXctestrunFile = args.useXctestrunFile;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.derivedDataPath = args.derivedDataPath;
    this.xcodebuild = new _xcodebuild.default(this.xcodeVersion, this.device, {
      platformVersion: this.platformVersion,
      platformName: this.platformName,
      iosSdkVersion: this.iosSdkVersion,
      agentPath: this.agentPath,
      bootstrapPath: this.bootstrapPath,
      realDevice: this.realDevice,
      showXcodeLog: args.showXcodeLog,
      xcodeConfigFile: args.xcodeConfigFile,
      xcodeOrgId: args.xcodeOrgId,
      xcodeSigningId: args.xcodeSigningId,
      keychainPath: args.keychainPath,
      keychainPassword: args.keychainPassword,
      useSimpleBuildTest: args.useSimpleBuildTest,
      usePrebuiltWDA: args.usePrebuiltWDA,
      updatedWDABundleId: args.updatedWDABundleId,
      launchTimeout: args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT,
      wdaRemotePort: this.realDevice ? WDA_AGENT_PORT : this.wdaLocalPort || WDA_AGENT_PORT,
      useXctestrunFile: this.useXctestrunFile,
      derivedDataPath: args.derivedDataPath,
      mjpegServerPort: args.mjpegServerPort
    });
  }

  setWDAPaths(bootstrapPath, agentPath) {
    this.bootstrapPath = bootstrapPath || _appiumWebdriveragent.BOOTSTRAP_PATH;

    _logger.default.info(`Using WDA path: '${this.bootstrapPath}'`);

    this.agentPath = agentPath || _path.default.resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');

    _logger.default.info(`Using WDA agent: '${this.agentPath}'`);
  }

  async cleanupObsoleteProcesses() {
    const obsoletePids = await (0, _utils2.getPIDsListeningOnPort)(this.url.port, cmdLine => cmdLine.includes('/WebDriverAgentRunner') && !cmdLine.toLowerCase().includes(this.device.udid.toLowerCase()));

    if (_lodash.default.isEmpty(obsoletePids)) {
      _logger.default.debug(`No obsolete cached processes from previous WDA sessions ` + `listening on port ${this.url.port} have been found`);

      return;
    }

    _logger.default.info(`Detected ${obsoletePids.length} obsolete cached process${obsoletePids.length === 1 ? '' : 'es'} ` + `from previous WDA sessions. Cleaning them up`);

    try {
      await (0, _teen_process.exec)('kill', obsoletePids);
    } catch (e) {
      _logger.default.warn(`Failed to kill obsolete cached process${obsoletePids.length === 1 ? '' : 'es'} '${obsoletePids}'. ` + `Original error: ${e.message}`);
    }
  }

  async isRunning() {
    return !!(await this.getStatus());
  }

  async getStatus() {
    const noSessionProxy = new _noSessionProxy.NoSessionProxy({
      server: this.url.hostname,
      port: this.url.port,
      base: '',
      timeout: 3000
    });

    try {
      return await noSessionProxy.command('/status', 'GET');
    } catch (err) {
      _logger.default.debug(`WDA is not listening at '${this.url.href}'`);

      return null;
    }
  }

  async uninstall() {
    _logger.default.debug(`Removing WDA application from device`);

    try {
      await this.device.removeApp(_appiumWebdriveragent.WDA_BUNDLE_ID);
    } catch (e) {
      _logger.default.warn(`WebDriverAgent uninstall failed. Perhaps, it is already uninstalled? Original error: ${JSON.stringify(e)}`);
    }
  }

  async launch(sessionId) {
    if (this.webDriverAgentUrl) {
      _logger.default.info(`Using provided WebdriverAgent at '${this.webDriverAgentUrl}'`);

      this.url = this.webDriverAgentUrl;
      this.setupProxies(sessionId);
      return await this.getStatus();
    }

    _logger.default.info('Launching WebDriverAgent on the device');

    this.setupProxies(sessionId);

    if (!this.useXctestrunFile && !(await _appiumSupport.fs.exists(this.agentPath))) {
      throw new Error(`Trying to use WebDriverAgent project at '${this.agentPath}' but the ` + 'file does not exist');
    }

    if (this.useXctestrunFile || this.derivedDataPath && this.usePrebuiltWDA) {
      _logger.default.info('Skipped WDA dependencies resolution according to the provided capabilities');
    } else {
      const synchronizationKey = _path.default.normalize(this.bootstrapPath);

      await SHARED_RESOURCES_GUARD.acquire(synchronizationKey, async () => {
        const didPerformUpgrade = await (0, _appiumWebdriveragent.checkForDependencies)({
          useSsl: this.useCarthageSsl
        });

        if (didPerformUpgrade) {
          await this.xcodebuild.cleanProject();
        }
      });
    }

    await (0, _utils2.resetXCTestProcesses)(this.device.udid, !this.realDevice);

    if (this.realDevice) {
      if ((0, _utils2.isLocalHost)(this.wdaBaseUrl)) {
        this.iproxy = this.createIProxy();
      } else {
        _logger.default.info(`Skip starting iproxy since Appium will communicate with WDA via '${this.wdaBaseUrl}'`);
      }
    }

    await this.xcodebuild.init(this.noSessionProxy);

    if (this.prebuildWDA) {
      await this.xcodebuild.prebuild();
    }

    return await this.xcodebuild.start();
  }

  createIProxy() {
    if (this.iproxy) {
      return this.iproxy;
    }

    const iproxy = new _iproxy.default(this.device.udid, this.url.port, WDA_AGENT_PORT);

    try {
      iproxy.start();
      return iproxy;
    } catch (e) {
      iproxy.quit();
      throw new Error(`Couldn't start port forwarding on port ${WDA_AGENT_PORT}. Please provide a different port using 'wdaLocalPort' capability`);
    }
  }

  async isSourceFresh() {
    for (const subPath of [_utils.CARTHAGE_ROOT, 'Resources', `Resources${_path.default.sep}WebDriverAgent.bundle`]) {
      if (!(await _appiumSupport.fs.exists(_path.default.resolve(this.bootstrapPath, subPath)))) {
        return true;
      }
    }

    return false;
  }

  setupProxies(sessionId) {
    const proxyOpts = {
      server: this.url.hostname,
      port: this.url.port,
      base: '',
      timeout: this.wdaConnectionTimeout,
      keepAlive: true
    };
    this.jwproxy = new _appiumBaseDriver.JWProxy(proxyOpts);
    this.jwproxy.sessionId = sessionId;
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.noSessionProxy = new _noSessionProxy.NoSessionProxy(proxyOpts);
    this.noSessionProxyReqRes = this.noSessionProxy.proxyReqRes.bind(this.noSessionProxy);
  }

  async quit() {
    _logger.default.info('Shutting down sub-processes');

    if (this.iproxy) {
      this.iproxy.quit();
    }

    await this.xcodebuild.quit();
    await this.xcodebuild.reset();

    if (this.jwproxy) {
      this.jwproxy.sessionId = null;
    }

    this.started = false;

    if (!this.args.webDriverAgentUrl) {
      this.webDriverAgentUrl = null;
    }
  }

  get url() {
    if (!this._url) {
      const port = this.wdaLocalPort || WDA_AGENT_PORT;

      const {
        protocol,
        hostname
      } = _url2.default.parse(this.wdaBaseUrl || WDA_BASE_URL);

      this._url = _url2.default.parse(`${protocol}//${hostname}:${port}`);
    }

    return this._url;
  }

  set url(_url) {
    this._url = _url2.default.parse(_url);
  }

  get fullyStarted() {
    return this.started;
  }

  set fullyStarted(started = false) {
    this.started = started;
  }

  async retrieveDerivedDataPath() {
    return await this.xcodebuild.retrieveDerivedDataPath();
  }

  async setupCaching(updatedWDABundleId) {
    const status = await this.getStatus();

    if (!status || !status.build) {
      _logger.default.debug('WDA is currently not running. There is nothing to cache');

      return;
    }

    const {
      productBundleIdentifier,
      upgradedAt
    } = status.build;

    if (_appiumSupport.util.hasValue(productBundleIdentifier) && _appiumSupport.util.hasValue(updatedWDABundleId) && updatedWDABundleId !== productBundleIdentifier) {
      _logger.default.info(`Will uninstall running WDA since it has different bundle id. The actual value is '${productBundleIdentifier}'.`);

      return await this.uninstall();
    }

    if (_appiumSupport.util.hasValue(productBundleIdentifier) && !_appiumSupport.util.hasValue(updatedWDABundleId) && _appiumWebdriveragent.WDA_RUNNER_BUNDLE_ID !== productBundleIdentifier) {
      _logger.default.info(`Will uninstall running WDA since its bundle id is not equal to the default value ${_appiumWebdriveragent.WDA_RUNNER_BUNDLE_ID}`);

      return await this.uninstall();
    }

    const actualUpgradeTimestamp = await (0, _utils.getWDAUpgradeTimestamp)(this.bootstrapPath);

    _logger.default.debug(`Upgrade timestamp of the currently bundled WDA: ${actualUpgradeTimestamp}`);

    _logger.default.debug(`Upgrade timestamp of the WDA on the device: ${upgradedAt}`);

    if (actualUpgradeTimestamp && upgradedAt && _lodash.default.toLower(`${actualUpgradeTimestamp}`) !== _lodash.default.toLower(`${upgradedAt}`)) {
      _logger.default.info('Will uninstall running WDA since it has different version in comparison to the one ' + `which is bundled with appium-xcuitest-driver module (${actualUpgradeTimestamp} != ${upgradedAt})`);

      return await this.uninstall();
    }

    const message = _appiumSupport.util.hasValue(productBundleIdentifier) ? `Will reuse previously cached WDA instance at '${this.url.href}' with '${productBundleIdentifier}'` : `Will reuse previously cached WDA instance at '${this.url.href}'`;

    _logger.default.info(`${message}. Set the wdaLocalPort capability to a value different from ${this.url.port} if this is an undesired behavior.`);

    this.webDriverAgentUrl = this.url.href;
  }

  async quitAndUninstall() {
    await this.quit();
    await this.uninstall();
  }

}

exports.WebDriverAgent = WebDriverAgent;
var _default = WebDriverAgent;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZGEvd2ViZHJpdmVyYWdlbnQuanMiXSwibmFtZXMiOlsiV0RBX0xBVU5DSF9USU1FT1VUIiwiV0RBX0FHRU5UX1BPUlQiLCJXREFfQkFTRV9VUkwiLCJTSEFSRURfUkVTT1VSQ0VTX0dVQVJEIiwiQXN5bmNMb2NrIiwiV2ViRHJpdmVyQWdlbnQiLCJjb25zdHJ1Y3RvciIsInhjb2RlVmVyc2lvbiIsImFyZ3MiLCJfIiwiY2xvbmUiLCJkZXZpY2UiLCJwbGF0Zm9ybVZlcnNpb24iLCJwbGF0Zm9ybU5hbWUiLCJpb3NTZGtWZXJzaW9uIiwiaG9zdCIsInJlYWxEZXZpY2UiLCJzZXRXREFQYXRocyIsImJvb3RzdHJhcFBhdGgiLCJhZ2VudFBhdGgiLCJ3ZGFMb2NhbFBvcnQiLCJ3ZGFCYXNlVXJsIiwicHJlYnVpbGRXREEiLCJ3ZWJEcml2ZXJBZ2VudFVybCIsInN0YXJ0ZWQiLCJ3ZGFDb25uZWN0aW9uVGltZW91dCIsInVzZUNhcnRoYWdlU3NsIiwiaXNCb29sZWFuIiwidXNlWGN0ZXN0cnVuRmlsZSIsInVzZVByZWJ1aWx0V0RBIiwiZGVyaXZlZERhdGFQYXRoIiwieGNvZGVidWlsZCIsIlhjb2RlQnVpbGQiLCJzaG93WGNvZGVMb2ciLCJ4Y29kZUNvbmZpZ0ZpbGUiLCJ4Y29kZU9yZ0lkIiwieGNvZGVTaWduaW5nSWQiLCJrZXljaGFpblBhdGgiLCJrZXljaGFpblBhc3N3b3JkIiwidXNlU2ltcGxlQnVpbGRUZXN0IiwidXBkYXRlZFdEQUJ1bmRsZUlkIiwibGF1bmNoVGltZW91dCIsIndkYUxhdW5jaFRpbWVvdXQiLCJ3ZGFSZW1vdGVQb3J0IiwibWpwZWdTZXJ2ZXJQb3J0IiwiQk9PVFNUUkFQX1BBVEgiLCJsb2ciLCJpbmZvIiwicGF0aCIsInJlc29sdmUiLCJjbGVhbnVwT2Jzb2xldGVQcm9jZXNzZXMiLCJvYnNvbGV0ZVBpZHMiLCJ1cmwiLCJwb3J0IiwiY21kTGluZSIsImluY2x1ZGVzIiwidG9Mb3dlckNhc2UiLCJ1ZGlkIiwiaXNFbXB0eSIsImRlYnVnIiwibGVuZ3RoIiwiZSIsIndhcm4iLCJtZXNzYWdlIiwiaXNSdW5uaW5nIiwiZ2V0U3RhdHVzIiwibm9TZXNzaW9uUHJveHkiLCJOb1Nlc3Npb25Qcm94eSIsInNlcnZlciIsImhvc3RuYW1lIiwiYmFzZSIsInRpbWVvdXQiLCJjb21tYW5kIiwiZXJyIiwiaHJlZiIsInVuaW5zdGFsbCIsInJlbW92ZUFwcCIsIldEQV9CVU5ETEVfSUQiLCJKU09OIiwic3RyaW5naWZ5IiwibGF1bmNoIiwic2Vzc2lvbklkIiwic2V0dXBQcm94aWVzIiwiZnMiLCJleGlzdHMiLCJFcnJvciIsInN5bmNocm9uaXphdGlvbktleSIsIm5vcm1hbGl6ZSIsImFjcXVpcmUiLCJkaWRQZXJmb3JtVXBncmFkZSIsInVzZVNzbCIsImNsZWFuUHJvamVjdCIsImlwcm94eSIsImNyZWF0ZUlQcm94eSIsImluaXQiLCJwcmVidWlsZCIsInN0YXJ0IiwiaVByb3h5IiwicXVpdCIsImlzU291cmNlRnJlc2giLCJzdWJQYXRoIiwiQ0FSVEhBR0VfUk9PVCIsInNlcCIsInByb3h5T3B0cyIsImtlZXBBbGl2ZSIsImp3cHJveHkiLCJKV1Byb3h5IiwicHJveHlSZXFSZXMiLCJiaW5kIiwibm9TZXNzaW9uUHJveHlSZXFSZXMiLCJyZXNldCIsIl91cmwiLCJwcm90b2NvbCIsInBhcnNlIiwiZnVsbHlTdGFydGVkIiwicmV0cmlldmVEZXJpdmVkRGF0YVBhdGgiLCJzZXR1cENhY2hpbmciLCJzdGF0dXMiLCJidWlsZCIsInByb2R1Y3RCdW5kbGVJZGVudGlmaWVyIiwidXBncmFkZWRBdCIsInV0aWwiLCJoYXNWYWx1ZSIsIldEQV9SVU5ORVJfQlVORExFX0lEIiwiYWN0dWFsVXBncmFkZVRpbWVzdGFtcCIsInRvTG93ZXIiLCJxdWl0QW5kVW5pbnN0YWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNB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QXNCLElBQUlKLFVBQTFCLElBQXdDL0csZ0JBQUVvSCxPQUFGLENBQVcsR0FBRUQsc0JBQXVCLEVBQXBDLE1BQTJDbkgsZ0JBQUVvSCxPQUFGLENBQVcsR0FBRUwsVUFBVyxFQUF4QixDQUF2RixFQUFtSDtBQUNqSDFFLHNCQUFJQyxJQUFKLENBQVMsd0ZBQ04sd0RBQXVENkUsc0JBQXVCLE9BQU1KLFVBQVcsR0FEbEc7O0FBRUEsYUFBTyxNQUFNLEtBQUs3QyxTQUFMLEVBQWI7QUFDRDs7QUFFRCxVQUFNWixPQUFPLEdBQUcwRCxvQkFBS0MsUUFBTCxDQUFjSCx1QkFBZCxJQUNYLGlEQUFnRCxLQUFLbkUsR0FBTCxDQUFTc0IsSUFBSyxXQUFVNkMsdUJBQXdCLEdBRHJGLEdBRVgsaURBQWdELEtBQUtuRSxHQUFMLENBQVNzQixJQUFLLEdBRm5FOztBQUdBNUIsb0JBQUlDLElBQUosQ0FBVSxHQUFFZ0IsT0FBUSwrREFBOEQsS0FBS1gsR0FBTCxDQUFTQyxJQUFLLG9DQUFoRzs7QUFDQSxTQUFLOUIsaUJBQUwsR0FBeUIsS0FBSzZCLEdBQUwsQ0FBU3NCLElBQWxDO0FBQ0Q7O0FBRUQsUUFBTW9ELGdCQUFOLEdBQTBCO0FBQ3hCLFVBQU0sS0FBSzVCLElBQUwsRUFBTjtBQUNBLFVBQU0sS0FBS3ZCLFNBQUwsRUFBTjtBQUNEOztBQXJXa0I7OztlQXdXTnRFLGMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgeyBKV1Byb3h5IH0gZnJvbSAnYXBwaXVtLWJhc2UtZHJpdmVyJztcbmltcG9ydCB7IGZzLCB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgTm9TZXNzaW9uUHJveHkgfSBmcm9tICcuL25vLXNlc3Npb24tcHJveHknO1xuaW1wb3J0IHsgZ2V0V0RBVXBncmFkZVRpbWVzdGFtcCwgQ0FSVEhBR0VfUk9PVCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgcmVzZXRYQ1Rlc3RQcm9jZXNzZXMsIGdldFBJRHNMaXN0ZW5pbmdPblBvcnQsIGlzTG9jYWxIb3N0IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IFhjb2RlQnVpbGQgZnJvbSAnLi94Y29kZWJ1aWxkJztcbmltcG9ydCBpUHJveHkgZnJvbSAnLi9pcHJveHknO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgQXN5bmNMb2NrIGZyb20gJ2FzeW5jLWxvY2snO1xuaW1wb3J0IHsgQk9PVFNUUkFQX1BBVEgsIFdEQV9CVU5ETEVfSUQsIFdEQV9SVU5ORVJfQlVORExFX0lELCBjaGVja0ZvckRlcGVuZGVuY2llcyB9IGZyb20gJ2FwcGl1bS13ZWJkcml2ZXJhZ2VudCc7XG5cblxuY29uc3QgV0RBX0xBVU5DSF9USU1FT1VUID0gNjAgKiAxMDAwO1xuY29uc3QgV0RBX0FHRU5UX1BPUlQgPSA4MTAwO1xuY29uc3QgV0RBX0JBU0VfVVJMID0gJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuXG5jb25zdCBTSEFSRURfUkVTT1VSQ0VTX0dVQVJEID0gbmV3IEFzeW5jTG9jaygpO1xuXG5cbmNsYXNzIFdlYkRyaXZlckFnZW50IHtcbiAgY29uc3RydWN0b3IgKHhjb2RlVmVyc2lvbiwgYXJncyA9IHt9KSB7XG4gICAgdGhpcy54Y29kZVZlcnNpb24gPSB4Y29kZVZlcnNpb247XG5cbiAgICB0aGlzLmFyZ3MgPSBfLmNsb25lKGFyZ3MpO1xuXG4gICAgdGhpcy5kZXZpY2UgPSBhcmdzLmRldmljZTtcbiAgICB0aGlzLnBsYXRmb3JtVmVyc2lvbiA9IGFyZ3MucGxhdGZvcm1WZXJzaW9uO1xuICAgIHRoaXMucGxhdGZvcm1OYW1lID0gYXJncy5wbGF0Zm9ybU5hbWU7XG4gICAgdGhpcy5pb3NTZGtWZXJzaW9uID0gYXJncy5pb3NTZGtWZXJzaW9uO1xuICAgIHRoaXMuaG9zdCA9IGFyZ3MuaG9zdDtcbiAgICB0aGlzLnJlYWxEZXZpY2UgPSAhIWFyZ3MucmVhbERldmljZTtcblxuICAgIHRoaXMuc2V0V0RBUGF0aHMoYXJncy5ib290c3RyYXBQYXRoLCBhcmdzLmFnZW50UGF0aCk7XG5cbiAgICB0aGlzLndkYUxvY2FsUG9ydCA9IGFyZ3Mud2RhTG9jYWxQb3J0O1xuICAgIHRoaXMud2RhQmFzZVVybCA9IGFyZ3Mud2RhQmFzZVVybCB8fCBXREFfQkFTRV9VUkw7XG5cbiAgICB0aGlzLnByZWJ1aWxkV0RBID0gYXJncy5wcmVidWlsZFdEQTtcblxuICAgIHRoaXMud2ViRHJpdmVyQWdlbnRVcmwgPSBhcmdzLndlYkRyaXZlckFnZW50VXJsO1xuXG4gICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG5cbiAgICB0aGlzLndkYUNvbm5lY3Rpb25UaW1lb3V0ID0gYXJncy53ZGFDb25uZWN0aW9uVGltZW91dDtcblxuICAgIHRoaXMudXNlQ2FydGhhZ2VTc2wgPSBfLmlzQm9vbGVhbihhcmdzLnVzZUNhcnRoYWdlU3NsKSAmJiBhcmdzLnVzZUNhcnRoYWdlU3NsO1xuXG4gICAgdGhpcy51c2VYY3Rlc3RydW5GaWxlID0gYXJncy51c2VYY3Rlc3RydW5GaWxlO1xuICAgIHRoaXMudXNlUHJlYnVpbHRXREEgPSBhcmdzLnVzZVByZWJ1aWx0V0RBO1xuICAgIHRoaXMuZGVyaXZlZERhdGFQYXRoID0gYXJncy5kZXJpdmVkRGF0YVBhdGg7XG5cbiAgICB0aGlzLnhjb2RlYnVpbGQgPSBuZXcgWGNvZGVCdWlsZCh0aGlzLnhjb2RlVmVyc2lvbiwgdGhpcy5kZXZpY2UsIHtcbiAgICAgIHBsYXRmb3JtVmVyc2lvbjogdGhpcy5wbGF0Zm9ybVZlcnNpb24sXG4gICAgICBwbGF0Zm9ybU5hbWU6IHRoaXMucGxhdGZvcm1OYW1lLFxuICAgICAgaW9zU2RrVmVyc2lvbjogdGhpcy5pb3NTZGtWZXJzaW9uLFxuICAgICAgYWdlbnRQYXRoOiB0aGlzLmFnZW50UGF0aCxcbiAgICAgIGJvb3RzdHJhcFBhdGg6IHRoaXMuYm9vdHN0cmFwUGF0aCxcbiAgICAgIHJlYWxEZXZpY2U6IHRoaXMucmVhbERldmljZSxcbiAgICAgIHNob3dYY29kZUxvZzogYXJncy5zaG93WGNvZGVMb2csXG4gICAgICB4Y29kZUNvbmZpZ0ZpbGU6IGFyZ3MueGNvZGVDb25maWdGaWxlLFxuICAgICAgeGNvZGVPcmdJZDogYXJncy54Y29kZU9yZ0lkLFxuICAgICAgeGNvZGVTaWduaW5nSWQ6IGFyZ3MueGNvZGVTaWduaW5nSWQsXG4gICAgICBrZXljaGFpblBhdGg6IGFyZ3Mua2V5Y2hhaW5QYXRoLFxuICAgICAga2V5Y2hhaW5QYXNzd29yZDogYXJncy5rZXljaGFpblBhc3N3b3JkLFxuICAgICAgdXNlU2ltcGxlQnVpbGRUZXN0OiBhcmdzLnVzZVNpbXBsZUJ1aWxkVGVzdCxcbiAgICAgIHVzZVByZWJ1aWx0V0RBOiBhcmdzLnVzZVByZWJ1aWx0V0RBLFxuICAgICAgdXBkYXRlZFdEQUJ1bmRsZUlkOiBhcmdzLnVwZGF0ZWRXREFCdW5kbGVJZCxcbiAgICAgIGxhdW5jaFRpbWVvdXQ6IGFyZ3Mud2RhTGF1bmNoVGltZW91dCB8fCBXREFfTEFVTkNIX1RJTUVPVVQsXG4gICAgICB3ZGFSZW1vdGVQb3J0OiB0aGlzLnJlYWxEZXZpY2UgPyBXREFfQUdFTlRfUE9SVCA6ICh0aGlzLndkYUxvY2FsUG9ydCB8fCBXREFfQUdFTlRfUE9SVCksXG4gICAgICB1c2VYY3Rlc3RydW5GaWxlOiB0aGlzLnVzZVhjdGVzdHJ1bkZpbGUsXG4gICAgICBkZXJpdmVkRGF0YVBhdGg6IGFyZ3MuZGVyaXZlZERhdGFQYXRoLFxuICAgICAgbWpwZWdTZXJ2ZXJQb3J0OiBhcmdzLm1qcGVnU2VydmVyUG9ydCxcbiAgICB9KTtcbiAgfVxuXG4gIHNldFdEQVBhdGhzIChib290c3RyYXBQYXRoLCBhZ2VudFBhdGgpIHtcbiAgICAvLyBhbGxvdyB0aGUgdXNlciB0byBzcGVjaWZ5IGEgcGxhY2UgZm9yIFdEQS4gVGhpcyBpcyB1bmRvY3VtZW50ZWQgYW5kXG4gICAgLy8gb25seSBoZXJlIGZvciB0aGUgcHVycG9zZXMgb2YgdGVzdGluZyBkZXZlbG9wbWVudCBvZiBXREFcbiAgICB0aGlzLmJvb3RzdHJhcFBhdGggPSBib290c3RyYXBQYXRoIHx8IEJPT1RTVFJBUF9QQVRIO1xuICAgIGxvZy5pbmZvKGBVc2luZyBXREEgcGF0aDogJyR7dGhpcy5ib290c3RyYXBQYXRofSdgKTtcblxuICAgIC8vIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdlIG5lZWQgdG8gYmUgYWJsZSB0byBzcGVjaWZ5IGFnZW50UGF0aCB0b29cbiAgICB0aGlzLmFnZW50UGF0aCA9IGFnZW50UGF0aCB8fCBwYXRoLnJlc29sdmUodGhpcy5ib290c3RyYXBQYXRoLCAnV2ViRHJpdmVyQWdlbnQueGNvZGVwcm9qJyk7XG4gICAgbG9nLmluZm8oYFVzaW5nIFdEQSBhZ2VudDogJyR7dGhpcy5hZ2VudFBhdGh9J2ApO1xuICB9XG5cbiAgYXN5bmMgY2xlYW51cE9ic29sZXRlUHJvY2Vzc2VzICgpIHtcbiAgICBjb25zdCBvYnNvbGV0ZVBpZHMgPSBhd2FpdCBnZXRQSURzTGlzdGVuaW5nT25Qb3J0KHRoaXMudXJsLnBvcnQsXG4gICAgICAoY21kTGluZSkgPT4gY21kTGluZS5pbmNsdWRlcygnL1dlYkRyaXZlckFnZW50UnVubmVyJykgJiZcbiAgICAgICAgIWNtZExpbmUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh0aGlzLmRldmljZS51ZGlkLnRvTG93ZXJDYXNlKCkpKTtcblxuICAgIGlmIChfLmlzRW1wdHkob2Jzb2xldGVQaWRzKSkge1xuICAgICAgbG9nLmRlYnVnKGBObyBvYnNvbGV0ZSBjYWNoZWQgcHJvY2Vzc2VzIGZyb20gcHJldmlvdXMgV0RBIHNlc3Npb25zIGAgK1xuICAgICAgICBgbGlzdGVuaW5nIG9uIHBvcnQgJHt0aGlzLnVybC5wb3J0fSBoYXZlIGJlZW4gZm91bmRgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2cuaW5mbyhgRGV0ZWN0ZWQgJHtvYnNvbGV0ZVBpZHMubGVuZ3RofSBvYnNvbGV0ZSBjYWNoZWQgcHJvY2VzcyR7b2Jzb2xldGVQaWRzLmxlbmd0aCA9PT0gMSA/ICcnIDogJ2VzJ30gYCArXG4gICAgICBgZnJvbSBwcmV2aW91cyBXREEgc2Vzc2lvbnMuIENsZWFuaW5nIHRoZW0gdXBgKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZXhlYygna2lsbCcsIG9ic29sZXRlUGlkcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLndhcm4oYEZhaWxlZCB0byBraWxsIG9ic29sZXRlIGNhY2hlZCBwcm9jZXNzJHtvYnNvbGV0ZVBpZHMubGVuZ3RoID09PSAxID8gJycgOiAnZXMnfSAnJHtvYnNvbGV0ZVBpZHN9Jy4gYCArXG4gICAgICAgIGBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBib29sZWFuIGlmIFdEQSBpcyBydW5uaW5nIG9yIG5vdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIFdEQSBpcyBydW5uaW5nXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGVyZSB3YXMgaW52YWxpZCByZXNwb25zZSBjb2RlIG9yIGJvZHlcbiAgICovXG4gIGFzeW5jIGlzUnVubmluZyAoKSB7XG4gICAgcmV0dXJuICEhKGF3YWl0IHRoaXMuZ2V0U3RhdHVzKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBjdXJyZW50IHJ1bm5pbmcgV0RBJ3Mgc3RhdHVzIGxpa2UgYmVsb3dcbiAgICoge1xuICAgKiAgIFwic3RhdGVcIjogXCJzdWNjZXNzXCIsXG4gICAqICAgXCJvc1wiOiB7XG4gICAqICAgICBcIm5hbWVcIjogXCJpT1NcIixcbiAgICogICAgIFwidmVyc2lvblwiOiBcIjExLjRcIixcbiAgICogICAgIFwic2RrVmVyc2lvblwiOiBcIjExLjNcIlxuICAgKiAgIH0sXG4gICAqICAgXCJpb3NcIjoge1xuICAgKiAgICAgXCJzaW11bGF0b3JWZXJzaW9uXCI6IFwiMTEuNFwiLFxuICAgKiAgICAgXCJpcFwiOiBcIjE3Mi4yNTQuOTkuMzRcIlxuICAgKiAgIH0sXG4gICAqICAgXCJidWlsZFwiOiB7XG4gICAqICAgICBcInRpbWVcIjogXCJKdW4gMjQgMjAxOCAxNzowODoyMVwiLFxuICAgKiAgICAgXCJwcm9kdWN0QnVuZGxlSWRlbnRpZmllclwiOiBcImNvbS5mYWNlYm9vay5XZWJEcml2ZXJBZ2VudFJ1bm5lclwiXG4gICAqICAgfVxuICAgKiB9XG4gICAqXG4gICAqIEByZXR1cm4gez9vYmplY3R9IFN0YXRlIE9iamVjdFxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGludmFsaWQgcmVzcG9uc2UgY29kZSBvciBib2R5XG4gICAqL1xuICBhc3luYyBnZXRTdGF0dXMgKCkge1xuICAgIGNvbnN0IG5vU2Vzc2lvblByb3h5ID0gbmV3IE5vU2Vzc2lvblByb3h5KHtcbiAgICAgIHNlcnZlcjogdGhpcy51cmwuaG9zdG5hbWUsXG4gICAgICBwb3J0OiB0aGlzLnVybC5wb3J0LFxuICAgICAgYmFzZTogJycsXG4gICAgICB0aW1lb3V0OiAzMDAwLFxuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgbm9TZXNzaW9uUHJveHkuY29tbWFuZCgnL3N0YXR1cycsICdHRVQnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgV0RBIGlzIG5vdCBsaXN0ZW5pbmcgYXQgJyR7dGhpcy51cmwuaHJlZn0nYCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBhc3luYyB1bmluc3RhbGwgKCkge1xuICAgIGxvZy5kZWJ1ZyhgUmVtb3ZpbmcgV0RBIGFwcGxpY2F0aW9uIGZyb20gZGV2aWNlYCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuZGV2aWNlLnJlbW92ZUFwcChXREFfQlVORExFX0lEKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsb2cud2FybihgV2ViRHJpdmVyQWdlbnQgdW5pbnN0YWxsIGZhaWxlZC4gUGVyaGFwcywgaXQgaXMgYWxyZWFkeSB1bmluc3RhbGxlZD8gT3JpZ2luYWwgZXJyb3I6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YCk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogUmV0dXJuIGN1cnJlbnQgcnVubmluZyBXREEncyBzdGF0dXMgbGlrZSBiZWxvdyBhZnRlciBsYXVuY2hpbmcgV0RBXG4gICAqIHtcbiAgICogICBcInN0YXRlXCI6IFwic3VjY2Vzc1wiLFxuICAgKiAgIFwib3NcIjoge1xuICAgKiAgICAgXCJuYW1lXCI6IFwiaU9TXCIsXG4gICAqICAgICBcInZlcnNpb25cIjogXCIxMS40XCIsXG4gICAqICAgICBcInNka1ZlcnNpb25cIjogXCIxMS4zXCJcbiAgICogICB9LFxuICAgKiAgIFwiaW9zXCI6IHtcbiAgICogICAgIFwic2ltdWxhdG9yVmVyc2lvblwiOiBcIjExLjRcIixcbiAgICogICAgIFwiaXBcIjogXCIxNzIuMjU0Ljk5LjM0XCJcbiAgICogICB9LFxuICAgKiAgIFwiYnVpbGRcIjoge1xuICAgKiAgICAgXCJ0aW1lXCI6IFwiSnVuIDI0IDIwMTggMTc6MDg6MjFcIixcbiAgICogICAgIFwicHJvZHVjdEJ1bmRsZUlkZW50aWZpZXJcIjogXCJjb20uZmFjZWJvb2suV2ViRHJpdmVyQWdlbnRSdW5uZXJcIlxuICAgKiAgIH1cbiAgICogfVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbklkIExhdW5jaCBXREEgYW5kIGVzdGFibGlzaCB0aGUgc2Vzc2lvbiB3aXRoIHRoaXMgc2Vzc2lvbklkXG4gICAqIEByZXR1cm4gez9vYmplY3R9IFN0YXRlIE9iamVjdFxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlcmUgd2FzIGludmFsaWQgcmVzcG9uc2UgY29kZSBvciBib2R5XG4gICAqL1xuICBhc3luYyBsYXVuY2ggKHNlc3Npb25JZCkge1xuICAgIGlmICh0aGlzLndlYkRyaXZlckFnZW50VXJsKSB7XG4gICAgICBsb2cuaW5mbyhgVXNpbmcgcHJvdmlkZWQgV2ViZHJpdmVyQWdlbnQgYXQgJyR7dGhpcy53ZWJEcml2ZXJBZ2VudFVybH0nYCk7XG4gICAgICB0aGlzLnVybCA9IHRoaXMud2ViRHJpdmVyQWdlbnRVcmw7XG4gICAgICB0aGlzLnNldHVwUHJveGllcyhzZXNzaW9uSWQpO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U3RhdHVzKCk7XG4gICAgfVxuXG4gICAgbG9nLmluZm8oJ0xhdW5jaGluZyBXZWJEcml2ZXJBZ2VudCBvbiB0aGUgZGV2aWNlJyk7XG5cbiAgICB0aGlzLnNldHVwUHJveGllcyhzZXNzaW9uSWQpO1xuXG4gICAgaWYgKCF0aGlzLnVzZVhjdGVzdHJ1bkZpbGUgJiYgIWF3YWl0IGZzLmV4aXN0cyh0aGlzLmFnZW50UGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJ5aW5nIHRvIHVzZSBXZWJEcml2ZXJBZ2VudCBwcm9qZWN0IGF0ICcke3RoaXMuYWdlbnRQYXRofScgYnV0IHRoZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAnZmlsZSBkb2VzIG5vdCBleGlzdCcpO1xuICAgIH1cblxuICAgIC8vIHVzZVhjdGVzdHJ1bkZpbGUgYW5kIHVzZVByZWJ1aWx0V0RBIHVzZSBleGlzdGluZyBkZXBlbmRlbmNpZXNcbiAgICAvLyBJdCBkZXBlbmRzIG9uIHVzZXIgc2lkZVxuICAgIGlmICh0aGlzLnVzZVhjdGVzdHJ1bkZpbGUgfHwgKHRoaXMuZGVyaXZlZERhdGFQYXRoICYmIHRoaXMudXNlUHJlYnVpbHRXREEpKSB7XG4gICAgICBsb2cuaW5mbygnU2tpcHBlZCBXREEgZGVwZW5kZW5jaWVzIHJlc29sdXRpb24gYWNjb3JkaW5nIHRvIHRoZSBwcm92aWRlZCBjYXBhYmlsaXRpZXMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgdGhlIFdEQSBkZXBlbmRlbmNpZXMgaGF2ZSBiZWVuIGJ1aWx0XG4gICAgICBjb25zdCBzeW5jaHJvbml6YXRpb25LZXkgPSBwYXRoLm5vcm1hbGl6ZSh0aGlzLmJvb3RzdHJhcFBhdGgpO1xuICAgICAgYXdhaXQgU0hBUkVEX1JFU09VUkNFU19HVUFSRC5hY3F1aXJlKHN5bmNocm9uaXphdGlvbktleSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBkaWRQZXJmb3JtVXBncmFkZSA9IGF3YWl0IGNoZWNrRm9yRGVwZW5kZW5jaWVzKHt1c2VTc2w6IHRoaXMudXNlQ2FydGhhZ2VTc2x9KTtcbiAgICAgICAgaWYgKGRpZFBlcmZvcm1VcGdyYWRlKSB7XG4gICAgICAgICAgLy8gT25seSBwZXJmb3JtIHRoZSBjbGVhbnVwIGFmdGVyIFdEQSB1cGdyYWRlXG4gICAgICAgICAgYXdhaXQgdGhpcy54Y29kZWJ1aWxkLmNsZWFuUHJvamVjdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gV2UgbmVlZCB0byBwcm92aWRlIFdEQSBsb2NhbCBwb3J0LCBiZWNhdXNlIGl0IG1pZ2h0IGJlIG9jY3VwaWVkIHdpdGhcbiAgICBhd2FpdCByZXNldFhDVGVzdFByb2Nlc3Nlcyh0aGlzLmRldmljZS51ZGlkLCAhdGhpcy5yZWFsRGV2aWNlKTtcblxuICAgIGlmICh0aGlzLnJlYWxEZXZpY2UpIHtcbiAgICAgIGlmIChpc0xvY2FsSG9zdCh0aGlzLndkYUJhc2VVcmwpKSB7XG4gICAgICAgIHRoaXMuaXByb3h5ID0gdGhpcy5jcmVhdGVJUHJveHkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5pbmZvKGBTa2lwIHN0YXJ0aW5nIGlwcm94eSBzaW5jZSBBcHBpdW0gd2lsbCBjb21tdW5pY2F0ZSB3aXRoIFdEQSB2aWEgJyR7dGhpcy53ZGFCYXNlVXJsfSdgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnhjb2RlYnVpbGQuaW5pdCh0aGlzLm5vU2Vzc2lvblByb3h5KTtcblxuICAgIC8vIFN0YXJ0IHRoZSB4Y29kZWJ1aWxkIHByb2Nlc3NcbiAgICBpZiAodGhpcy5wcmVidWlsZFdEQSkge1xuICAgICAgYXdhaXQgdGhpcy54Y29kZWJ1aWxkLnByZWJ1aWxkKCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnhjb2RlYnVpbGQuc3RhcnQoKTtcbiAgfVxuXG4gIGNyZWF0ZUlQcm94eSAoKSB7XG4gICAgaWYgKHRoaXMuaXByb3h5KSB7XG4gICAgICByZXR1cm4gdGhpcy5pcHJveHk7XG4gICAgfVxuICAgIGNvbnN0IGlwcm94eSA9IG5ldyBpUHJveHkodGhpcy5kZXZpY2UudWRpZCwgdGhpcy51cmwucG9ydCwgV0RBX0FHRU5UX1BPUlQpO1xuICAgIHRyeSB7XG4gICAgICBpcHJveHkuc3RhcnQoKTtcbiAgICAgIHJldHVybiBpcHJveHk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaXByb3h5LnF1aXQoKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGRuJ3Qgc3RhcnQgcG9ydCBmb3J3YXJkaW5nIG9uIHBvcnQgJHtXREFfQUdFTlRfUE9SVH0uIFBsZWFzZSBwcm92aWRlIGEgZGlmZmVyZW50IHBvcnQgdXNpbmcgJ3dkYUxvY2FsUG9ydCcgY2FwYWJpbGl0eWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGlzU291cmNlRnJlc2ggKCkge1xuICAgIGZvciAoY29uc3Qgc3ViUGF0aCBvZiBbXG4gICAgICBDQVJUSEFHRV9ST09ULFxuICAgICAgJ1Jlc291cmNlcycsXG4gICAgICBgUmVzb3VyY2VzJHtwYXRoLnNlcH1XZWJEcml2ZXJBZ2VudC5idW5kbGVgLFxuICAgIF0pIHtcbiAgICAgIGlmICghYXdhaXQgZnMuZXhpc3RzKHBhdGgucmVzb2x2ZSh0aGlzLmJvb3RzdHJhcFBhdGgsIHN1YlBhdGgpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc2V0dXBQcm94aWVzIChzZXNzaW9uSWQpIHtcbiAgICBjb25zdCBwcm94eU9wdHMgPSB7XG4gICAgICBzZXJ2ZXI6IHRoaXMudXJsLmhvc3RuYW1lLFxuICAgICAgcG9ydDogdGhpcy51cmwucG9ydCxcbiAgICAgIGJhc2U6ICcnLFxuICAgICAgdGltZW91dDogdGhpcy53ZGFDb25uZWN0aW9uVGltZW91dCxcbiAgICAgIGtlZXBBbGl2ZTogdHJ1ZSxcbiAgICB9O1xuXG4gICAgdGhpcy5qd3Byb3h5ID0gbmV3IEpXUHJveHkocHJveHlPcHRzKTtcbiAgICB0aGlzLmp3cHJveHkuc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICAgIHRoaXMucHJveHlSZXFSZXMgPSB0aGlzLmp3cHJveHkucHJveHlSZXFSZXMuYmluZCh0aGlzLmp3cHJveHkpO1xuXG4gICAgdGhpcy5ub1Nlc3Npb25Qcm94eSA9IG5ldyBOb1Nlc3Npb25Qcm94eShwcm94eU9wdHMpO1xuICAgIHRoaXMubm9TZXNzaW9uUHJveHlSZXFSZXMgPSB0aGlzLm5vU2Vzc2lvblByb3h5LnByb3h5UmVxUmVzLmJpbmQodGhpcy5ub1Nlc3Npb25Qcm94eSk7XG4gIH1cblxuICBhc3luYyBxdWl0ICgpIHtcbiAgICBsb2cuaW5mbygnU2h1dHRpbmcgZG93biBzdWItcHJvY2Vzc2VzJyk7XG5cbiAgICBpZiAodGhpcy5pcHJveHkpIHtcbiAgICAgIHRoaXMuaXByb3h5LnF1aXQoKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLnhjb2RlYnVpbGQucXVpdCgpO1xuICAgIGF3YWl0IHRoaXMueGNvZGVidWlsZC5yZXNldCgpO1xuXG4gICAgaWYgKHRoaXMuandwcm94eSkge1xuICAgICAgdGhpcy5qd3Byb3h5LnNlc3Npb25JZCA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIXRoaXMuYXJncy53ZWJEcml2ZXJBZ2VudFVybCkge1xuICAgICAgLy8gaWYgd2UgcG9wdWxhdGVkIHRoZSB1cmwgb3Vyc2VsdmVzIChkdXJpbmcgYHNldHVwQ2FjaGluZ2AgY2FsbCwgZm9yIGluc3RhbmNlKVxuICAgICAgLy8gdGhlbiBjbGVhbiB0aGF0IHVwLiBJZiB0aGUgdXJsIHdhcyBzdXBwbGllZCwgd2Ugd2FudCB0byBrZWVwIGl0XG4gICAgICB0aGlzLndlYkRyaXZlckFnZW50VXJsID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBnZXQgdXJsICgpIHtcbiAgICBpZiAoIXRoaXMuX3VybCkge1xuICAgICAgY29uc3QgcG9ydCA9IHRoaXMud2RhTG9jYWxQb3J0IHx8IFdEQV9BR0VOVF9QT1JUO1xuICAgICAgY29uc3Qge3Byb3RvY29sLCBob3N0bmFtZX0gPSB1cmwucGFyc2UodGhpcy53ZGFCYXNlVXJsIHx8IFdEQV9CQVNFX1VSTCk7XG4gICAgICB0aGlzLl91cmwgPSB1cmwucGFyc2UoYCR7cHJvdG9jb2x9Ly8ke2hvc3RuYW1lfToke3BvcnR9YCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl91cmw7XG4gIH1cblxuICBzZXQgdXJsIChfdXJsKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsLnBhcnNlKF91cmwpO1xuICB9XG5cbiAgZ2V0IGZ1bGx5U3RhcnRlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhcnRlZDtcbiAgfVxuXG4gIHNldCBmdWxseVN0YXJ0ZWQgKHN0YXJ0ZWQgPSBmYWxzZSkge1xuICAgIHRoaXMuc3RhcnRlZCA9IHN0YXJ0ZWQ7XG4gIH1cblxuICBhc3luYyByZXRyaWV2ZURlcml2ZWREYXRhUGF0aCAoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMueGNvZGVidWlsZC5yZXRyaWV2ZURlcml2ZWREYXRhUGF0aCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldXNlIHJ1bm5pbmcgV0RBIGlmIGl0IGhhcyB0aGUgc2FtZSBidW5kbGUgaWQgd2l0aCB1cGRhdGVkV0RBQnVuZGxlSWQuXG4gICAqIE9yIHJldXNlIGl0IGlmIGl0IGhhcyB0aGUgZGVmYXVsdCBpZCB3aXRob3V0IHVwZGF0ZWRXREFCdW5kbGVJZC5cbiAgICogVW5pbnN0YWxsIGl0IGlmIHRoZSBtZXRob2QgZmFjZXMgYW4gZXhjZXB0aW9uIGZvciB0aGUgYWJvdmUgc2l0dWF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXBkYXRlZFdEQUJ1bmRsZUlkIEJ1bmRsZUlkIHlvdSdkIGxpa2UgdG8gdXNlXG4gICAqL1xuICBhc3luYyBzZXR1cENhY2hpbmcgKHVwZGF0ZWRXREFCdW5kbGVJZCkge1xuICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHRoaXMuZ2V0U3RhdHVzKCk7XG4gICAgaWYgKCFzdGF0dXMgfHwgIXN0YXR1cy5idWlsZCkge1xuICAgICAgbG9nLmRlYnVnKCdXREEgaXMgY3VycmVudGx5IG5vdCBydW5uaW5nLiBUaGVyZSBpcyBub3RoaW5nIHRvIGNhY2hlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgcHJvZHVjdEJ1bmRsZUlkZW50aWZpZXIsXG4gICAgICB1cGdyYWRlZEF0LFxuICAgIH0gPSBzdGF0dXMuYnVpbGQ7XG4gICAgaWYgKHV0aWwuaGFzVmFsdWUocHJvZHVjdEJ1bmRsZUlkZW50aWZpZXIpICYmIHV0aWwuaGFzVmFsdWUodXBkYXRlZFdEQUJ1bmRsZUlkKSAmJiB1cGRhdGVkV0RBQnVuZGxlSWQgIT09IHByb2R1Y3RCdW5kbGVJZGVudGlmaWVyKSB7XG4gICAgICBsb2cuaW5mbyhgV2lsbCB1bmluc3RhbGwgcnVubmluZyBXREEgc2luY2UgaXQgaGFzIGRpZmZlcmVudCBidW5kbGUgaWQuIFRoZSBhY3R1YWwgdmFsdWUgaXMgJyR7cHJvZHVjdEJ1bmRsZUlkZW50aWZpZXJ9Jy5gKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnVuaW5zdGFsbCgpO1xuICAgIH1cbiAgICBpZiAodXRpbC5oYXNWYWx1ZShwcm9kdWN0QnVuZGxlSWRlbnRpZmllcikgJiYgIXV0aWwuaGFzVmFsdWUodXBkYXRlZFdEQUJ1bmRsZUlkKSAmJiBXREFfUlVOTkVSX0JVTkRMRV9JRCAhPT0gcHJvZHVjdEJ1bmRsZUlkZW50aWZpZXIpIHtcbiAgICAgIGxvZy5pbmZvKGBXaWxsIHVuaW5zdGFsbCBydW5uaW5nIFdEQSBzaW5jZSBpdHMgYnVuZGxlIGlkIGlzIG5vdCBlcXVhbCB0byB0aGUgZGVmYXVsdCB2YWx1ZSAke1dEQV9SVU5ORVJfQlVORExFX0lEfWApO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudW5pbnN0YWxsKCk7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0dWFsVXBncmFkZVRpbWVzdGFtcCA9IGF3YWl0IGdldFdEQVVwZ3JhZGVUaW1lc3RhbXAodGhpcy5ib290c3RyYXBQYXRoKTtcbiAgICBsb2cuZGVidWcoYFVwZ3JhZGUgdGltZXN0YW1wIG9mIHRoZSBjdXJyZW50bHkgYnVuZGxlZCBXREE6ICR7YWN0dWFsVXBncmFkZVRpbWVzdGFtcH1gKTtcbiAgICBsb2cuZGVidWcoYFVwZ3JhZGUgdGltZXN0YW1wIG9mIHRoZSBXREEgb24gdGhlIGRldmljZTogJHt1cGdyYWRlZEF0fWApO1xuICAgIGlmIChhY3R1YWxVcGdyYWRlVGltZXN0YW1wICYmIHVwZ3JhZGVkQXQgJiYgXy50b0xvd2VyKGAke2FjdHVhbFVwZ3JhZGVUaW1lc3RhbXB9YCkgIT09IF8udG9Mb3dlcihgJHt1cGdyYWRlZEF0fWApKSB7XG4gICAgICBsb2cuaW5mbygnV2lsbCB1bmluc3RhbGwgcnVubmluZyBXREEgc2luY2UgaXQgaGFzIGRpZmZlcmVudCB2ZXJzaW9uIGluIGNvbXBhcmlzb24gdG8gdGhlIG9uZSAnICtcbiAgICAgICAgYHdoaWNoIGlzIGJ1bmRsZWQgd2l0aCBhcHBpdW0teGN1aXRlc3QtZHJpdmVyIG1vZHVsZSAoJHthY3R1YWxVcGdyYWRlVGltZXN0YW1wfSAhPSAke3VwZ3JhZGVkQXR9KWApO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudW5pbnN0YWxsKCk7XG4gICAgfVxuXG4gICAgY29uc3QgbWVzc2FnZSA9IHV0aWwuaGFzVmFsdWUocHJvZHVjdEJ1bmRsZUlkZW50aWZpZXIpXG4gICAgICA/IGBXaWxsIHJldXNlIHByZXZpb3VzbHkgY2FjaGVkIFdEQSBpbnN0YW5jZSBhdCAnJHt0aGlzLnVybC5ocmVmfScgd2l0aCAnJHtwcm9kdWN0QnVuZGxlSWRlbnRpZmllcn0nYFxuICAgICAgOiBgV2lsbCByZXVzZSBwcmV2aW91c2x5IGNhY2hlZCBXREEgaW5zdGFuY2UgYXQgJyR7dGhpcy51cmwuaHJlZn0nYDtcbiAgICBsb2cuaW5mbyhgJHttZXNzYWdlfS4gU2V0IHRoZSB3ZGFMb2NhbFBvcnQgY2FwYWJpbGl0eSB0byBhIHZhbHVlIGRpZmZlcmVudCBmcm9tICR7dGhpcy51cmwucG9ydH0gaWYgdGhpcyBpcyBhbiB1bmRlc2lyZWQgYmVoYXZpb3IuYCk7XG4gICAgdGhpcy53ZWJEcml2ZXJBZ2VudFVybCA9IHRoaXMudXJsLmhyZWY7XG4gIH1cblxuICBhc3luYyBxdWl0QW5kVW5pbnN0YWxsICgpIHtcbiAgICBhd2FpdCB0aGlzLnF1aXQoKTtcbiAgICBhd2FpdCB0aGlzLnVuaW5zdGFsbCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFdlYkRyaXZlckFnZW50O1xuZXhwb3J0IHsgV2ViRHJpdmVyQWdlbnQsIFdEQV9CVU5ETEVfSUQsIEJPT1RTVFJBUF9QQVRILCBXREFfQkFTRV9VUkwgfTtcbiJdLCJmaWxlIjoibGliL3dkYS93ZWJkcml2ZXJhZ2VudC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
