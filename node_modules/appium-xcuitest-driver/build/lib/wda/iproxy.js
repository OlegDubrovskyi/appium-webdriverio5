"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.iProxy = void 0;

require("source-map-support/register");

var _net = _interopRequireDefault(require("net"));

var _appiumSupport = require("appium-support");

var _appiumIosDevice = require("appium-ios-device");

const log = _appiumSupport.logger.getLogger('iProxy');

class iProxy {
  constructor(udid, localport, deviceport) {
    this.localport = parseInt(localport, 10);
    this.deviceport = parseInt(deviceport, 10);
    this.udid = udid;
    this.serverSocket = null;
  }

  start() {
    if (this.serverSocket) {
      return;
    }

    this.serverSocket = _net.default.createServer(async connection => {
      try {
        const socket = await _appiumIosDevice.utilities.connectPort(this.udid, this.deviceport);
        socket.on('close', connection.destroy);
        socket.on('error', log.error);
        connection.on('close', socket.destroy);
        connection.on('error', log.error);
        connection.pipe(socket);
        socket.pipe(connection);
      } catch (e) {
        log.warn(e.message);
        connection.destroy();
      }
    });
    this.serverSocket.listen(this.localport);
  }

  quit() {
    if (!this.serverSocket) {
      return;
    }

    this.serverSocket.close();
    this.serverSocket = null;
  }

}

exports.iProxy = iProxy;
var _default = iProxy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZGEvaXByb3h5LmpzIl0sIm5hbWVzIjpbImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImlQcm94eSIsImNvbnN0cnVjdG9yIiwidWRpZCIsImxvY2FscG9ydCIsImRldmljZXBvcnQiLCJwYXJzZUludCIsInNlcnZlclNvY2tldCIsInN0YXJ0IiwibmV0IiwiY3JlYXRlU2VydmVyIiwiY29ubmVjdGlvbiIsInNvY2tldCIsInV0aWxpdGllcyIsImNvbm5lY3RQb3J0Iiwib24iLCJkZXN0cm95IiwiZXJyb3IiLCJwaXBlIiwiZSIsIndhcm4iLCJtZXNzYWdlIiwibGlzdGVuIiwicXVpdCIsImNsb3NlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLEdBQUcsR0FBR0Msc0JBQU9DLFNBQVAsQ0FBaUIsUUFBakIsQ0FBWjs7QUFFQSxNQUFNQyxNQUFOLENBQWE7QUFDWEMsRUFBQUEsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFNBQVIsRUFBbUJDLFVBQW5CLEVBQStCO0FBQ3hDLFNBQUtELFNBQUwsR0FBaUJFLFFBQVEsQ0FBQ0YsU0FBRCxFQUFZLEVBQVosQ0FBekI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCQyxRQUFRLENBQUNELFVBQUQsRUFBYSxFQUFiLENBQTFCO0FBQ0EsU0FBS0YsSUFBTCxHQUFZQSxJQUFaO0FBQ0EsU0FBS0ksWUFBTCxHQUFvQixJQUFwQjtBQUNEOztBQUVEQyxFQUFBQSxLQUFLLEdBQUk7QUFDUCxRQUFJLEtBQUtELFlBQVQsRUFBdUI7QUFDckI7QUFDRDs7QUFDRCxTQUFLQSxZQUFMLEdBQW9CRSxhQUFJQyxZQUFKLENBQWlCLE1BQU9DLFVBQVAsSUFBc0I7QUFDekQsVUFBSTtBQUNGLGNBQU1DLE1BQU0sR0FBRyxNQUFNQywyQkFBVUMsV0FBVixDQUFzQixLQUFLWCxJQUEzQixFQUFpQyxLQUFLRSxVQUF0QyxDQUFyQjtBQUNBTyxRQUFBQSxNQUFNLENBQUNHLEVBQVAsQ0FBVSxPQUFWLEVBQW1CSixVQUFVLENBQUNLLE9BQTlCO0FBQ0FKLFFBQUFBLE1BQU0sQ0FBQ0csRUFBUCxDQUFVLE9BQVYsRUFBbUJqQixHQUFHLENBQUNtQixLQUF2QjtBQUNBTixRQUFBQSxVQUFVLENBQUNJLEVBQVgsQ0FBYyxPQUFkLEVBQXVCSCxNQUFNLENBQUNJLE9BQTlCO0FBQ0FMLFFBQUFBLFVBQVUsQ0FBQ0ksRUFBWCxDQUFjLE9BQWQsRUFBdUJqQixHQUFHLENBQUNtQixLQUEzQjtBQUNBTixRQUFBQSxVQUFVLENBQUNPLElBQVgsQ0FBZ0JOLE1BQWhCO0FBQ0FBLFFBQUFBLE1BQU0sQ0FBQ00sSUFBUCxDQUFZUCxVQUFaO0FBQ0QsT0FSRCxDQVFFLE9BQU9RLENBQVAsRUFBVTtBQUNWckIsUUFBQUEsR0FBRyxDQUFDc0IsSUFBSixDQUFTRCxDQUFDLENBQUNFLE9BQVg7QUFDQVYsUUFBQUEsVUFBVSxDQUFDSyxPQUFYO0FBQ0Q7QUFDRixLQWJtQixDQUFwQjtBQWNBLFNBQUtULFlBQUwsQ0FBa0JlLE1BQWxCLENBQXlCLEtBQUtsQixTQUE5QjtBQUNEOztBQUVEbUIsRUFBQUEsSUFBSSxHQUFJO0FBQ04sUUFBSSxDQUFDLEtBQUtoQixZQUFWLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBQ0QsU0FBS0EsWUFBTCxDQUFrQmlCLEtBQWxCO0FBQ0EsU0FBS2pCLFlBQUwsR0FBb0IsSUFBcEI7QUFDRDs7QUFuQ1U7OztlQXVDRU4sTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuZXQgZnJvbSAnbmV0JztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCB7IHV0aWxpdGllcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcblxuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignaVByb3h5Jyk7XG5cbmNsYXNzIGlQcm94eSB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCBsb2NhbHBvcnQsIGRldmljZXBvcnQpIHtcbiAgICB0aGlzLmxvY2FscG9ydCA9IHBhcnNlSW50KGxvY2FscG9ydCwgMTApO1xuICAgIHRoaXMuZGV2aWNlcG9ydCA9IHBhcnNlSW50KGRldmljZXBvcnQsIDEwKTtcbiAgICB0aGlzLnVkaWQgPSB1ZGlkO1xuICAgIHRoaXMuc2VydmVyU29ja2V0ID0gbnVsbDtcbiAgfVxuXG4gIHN0YXJ0ICgpIHtcbiAgICBpZiAodGhpcy5zZXJ2ZXJTb2NrZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXJ2ZXJTb2NrZXQgPSBuZXQuY3JlYXRlU2VydmVyKGFzeW5jIChjb25uZWN0aW9uKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzb2NrZXQgPSBhd2FpdCB1dGlsaXRpZXMuY29ubmVjdFBvcnQodGhpcy51ZGlkLCB0aGlzLmRldmljZXBvcnQpO1xuICAgICAgICBzb2NrZXQub24oJ2Nsb3NlJywgY29ubmVjdGlvbi5kZXN0cm95KTtcbiAgICAgICAgc29ja2V0Lm9uKCdlcnJvcicsIGxvZy5lcnJvcik7XG4gICAgICAgIGNvbm5lY3Rpb24ub24oJ2Nsb3NlJywgc29ja2V0LmRlc3Ryb3kpO1xuICAgICAgICBjb25uZWN0aW9uLm9uKCdlcnJvcicsIGxvZy5lcnJvcik7XG4gICAgICAgIGNvbm5lY3Rpb24ucGlwZShzb2NrZXQpO1xuICAgICAgICBzb2NrZXQucGlwZShjb25uZWN0aW9uKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLndhcm4oZS5tZXNzYWdlKTtcbiAgICAgICAgY29ubmVjdGlvbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zZXJ2ZXJTb2NrZXQubGlzdGVuKHRoaXMubG9jYWxwb3J0KTtcbiAgfVxuXG4gIHF1aXQgKCkge1xuICAgIGlmICghdGhpcy5zZXJ2ZXJTb2NrZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXJ2ZXJTb2NrZXQuY2xvc2UoKTtcbiAgICB0aGlzLnNlcnZlclNvY2tldCA9IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IHsgaVByb3h5IH07XG5leHBvcnQgZGVmYXVsdCBpUHJveHk7XG4iXSwiZmlsZSI6ImxpYi93ZGEvaXByb3h5LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
