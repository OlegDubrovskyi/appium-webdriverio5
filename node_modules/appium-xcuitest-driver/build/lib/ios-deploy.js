"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDevice = require("appium-ios-device");

var _bluebird = _interopRequireDefault(require("bluebird"));

const APPLICATION_INSTALLED_NOTIFICATION = 'com.apple.mobile.application_installed';
const INSTALLATION_STAGING_DIR = 'PublicStaging';
const APPLICATION_PUSH_TIMEOUT = 60 * 1000;

class IOSDeploy {
  constructor(udid) {
    this.udid = udid;
  }

  async remove(bundleid) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      await service.uninstallApplication(bundleid);
    } finally {
      service.close();
    }
  }

  async removeApp(bundleId) {
    await this.remove(bundleId);
  }

  async install(app) {
    try {
      const bundlePathOnPhone = await this.pushAppBundle(app);
      await this.installApplcation(bundlePathOnPhone);
    } catch (err) {
      throw new Error(`Could not install app: '${err.message}'`);
    }
  }

  async installApplcation(bundlePathOnPhone) {
    const notificationService = await _appiumIosDevice.services.startNotificationProxyService(this.udid);
    const installationService = await _appiumIosDevice.services.startInstallationProxyService(this.udid);
    const appInstalledNotification = new _bluebird.default(resolve => {
      notificationService.observeNotification(APPLICATION_INSTALLED_NOTIFICATION, {
        notification: resolve
      });
    });

    try {
      await installationService.installApplication(bundlePathOnPhone, {
        PackageType: 'Developer'
      });
      await appInstalledNotification;
    } finally {
      installationService.close();
      notificationService.close();
    }
  }

  async pushAppBundle(app) {
    const afcService = await _appiumIosDevice.services.startAfcService(this.udid);

    try {
      const bundlePathOnPhone = await this.createAppPath(afcService, app);
      const promises = [];
      await this.walkDir(app, async (itemPath, isDir) => {
        const pathOnPhone = _path.default.join(bundlePathOnPhone, _path.default.relative(app, itemPath));

        if (isDir) {
          await afcService.createDirectory(pathOnPhone);
        } else {
          const readStream = _appiumSupport.fs.createReadStream(itemPath, {
            autoClose: true
          });

          const writeStream = await afcService.createWriteStream(pathOnPhone, {
            autoDestroy: true
          });
          promises.push(new _bluebird.default(resolve => writeStream.on('close', resolve)));
          readStream.pipe(writeStream);
        }
      });
      await _bluebird.default.all(promises).timeout(APPLICATION_PUSH_TIMEOUT);
      return bundlePathOnPhone;
    } finally {
      afcService.close();
    }
  }

  async createAppPath(afcService, localAppPath) {
    const basename = _path.default.basename(localAppPath);

    const relativePath = _path.default.join(INSTALLATION_STAGING_DIR, basename);

    try {
      await afcService.deleteDirectory(relativePath);
    } catch (ign) {}

    await afcService.createDirectory(relativePath);
    return relativePath;
  }

  async walkDir(dir, callback) {
    for (const file of await _appiumSupport.fs.readdir(dir, {
      withFileTypes: true
    })) {
      const itemPath = _path.default.join(dir, file.name);

      const isDirectory = file.isDirectory();
      await callback(itemPath, isDirectory);

      if (!isDirectory) {
        continue;
      }

      await this.walkDir(itemPath, callback);
    }
  }

  async installApp(app) {
    await this.install(app);
  }

  async isAppInstalled(bundleid) {
    const service = await _appiumIosDevice.services.startInstallationProxyService(this.udid);

    try {
      const applications = await service.lookupApplications({
        bundleIds: bundleid
      });
      return !!applications[bundleid];
    } finally {
      service.close();
    }
  }

}

var _default = IOSDeploy;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
