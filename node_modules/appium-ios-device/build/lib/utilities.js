"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConnectedDevices = getConnectedDevices;
exports.getOSVersion = getOSVersion;
exports.getDeviceName = getDeviceName;
exports.getDeviceTime = getDeviceTime;
exports.startLockdownSession = startLockdownSession;
exports.connectPort = connectPort;
exports.connectPortSSL = connectPortSSL;

require("source-map-support/register");

var _usbmux = _interopRequireDefault(require("./usbmux"));

var _sslHelper = require("./ssl-helper");

var _lodash = _interopRequireDefault(require("lodash"));

const LOCKDOWN_REQUEST = {
  DEVICE_TIME: {
    Key: 'TimeIntervalSince1970'
  },
  DEVICE_VERSION: {
    Key: 'ProductVersion'
  },
  DEVICE_NAME: {
    Key: 'DeviceName'
  }
};

async function getConnectedDevices(socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const devices = await usbmux.listDevices();
    const udids = devices.map(device => device.Properties.SerialNumber);
    return _lodash.default.uniq(udids);
  } finally {
    usbmux.close();
  }
}

async function getOSVersion(udid, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const lockdown = await usbmux.connectLockdown(udid);
    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_VERSION);
  } finally {
    usbmux.close();
  }
}

async function getDeviceName(udid, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const lockdown = await usbmux.connectLockdown(udid);
    return await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_NAME);
  } finally {
    usbmux.close();
  }
}

async function getDeviceTime(udid, socket) {
  const lockdown = await startLockdownSession(udid, socket);

  try {
    const epochValue = await lockdown.getValue(LOCKDOWN_REQUEST.DEVICE_TIME);
    const date = new Date(0);
    date.setUTCSeconds(epochValue);
    return date;
  } finally {
    lockdown.close();
  }
}

async function startLockdownSession(udid, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const pairRecord = await usbmux.readPairRecord(udid);

    if (!pairRecord) {
      throw new Error(`Couldn't find a pair record for device ${udid}. Please first pair with the device`);
    }

    const lockdown = await usbmux.connectLockdown(udid);
    await lockdown.startSession(pairRecord.HostID, pairRecord.SystemBUID);
    lockdown.enableSessionSSL(pairRecord.HostPrivateKey, pairRecord.HostCertificate);
    return lockdown;
  } catch (e) {
    usbmux.close();
    throw e;
  }
}

async function connectPortSSL(udid, port, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const device = await usbmux.findDevice(udid);

    if (!device) {
      throw new Error(`Couldn't find the expected device ${udid}`);
    }

    const pairRecord = await usbmux.readPairRecord(udid);

    if (!pairRecord) {
      throw new Error(`Couldn't find a pair record for device ${udid}. Please first pair with the device`);
    }

    const socket = await usbmux.connect(device.Properties.DeviceID, port);
    return (0, _sslHelper.upgradeToSSL)(socket, pairRecord.HostPrivateKey, pairRecord.HostCertificate);
  } catch (e) {
    usbmux.close();
    throw e;
  }
}

async function connectPort(udid, port, socket) {
  const usbmux = new _usbmux.default(socket);

  try {
    const device = await usbmux.findDevice(udid);

    if (!device) {
      throw new Error(`Couldn't find the expected device ${udid}`);
    }

    return await usbmux.connect(device.Properties.DeviceID, port);
  } catch (e) {
    usbmux.close();
    throw e;
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlsaXRpZXMuanMiXSwibmFtZXMiOlsiTE9DS0RPV05fUkVRVUVTVCIsIkRFVklDRV9USU1FIiwiS2V5IiwiREVWSUNFX1ZFUlNJT04iLCJERVZJQ0VfTkFNRSIsImdldENvbm5lY3RlZERldmljZXMiLCJzb2NrZXQiLCJ1c2JtdXgiLCJVc2JtdXgiLCJkZXZpY2VzIiwibGlzdERldmljZXMiLCJ1ZGlkcyIsIm1hcCIsImRldmljZSIsIlByb3BlcnRpZXMiLCJTZXJpYWxOdW1iZXIiLCJfIiwidW5pcSIsImNsb3NlIiwiZ2V0T1NWZXJzaW9uIiwidWRpZCIsImxvY2tkb3duIiwiY29ubmVjdExvY2tkb3duIiwiZ2V0VmFsdWUiLCJnZXREZXZpY2VOYW1lIiwiZ2V0RGV2aWNlVGltZSIsInN0YXJ0TG9ja2Rvd25TZXNzaW9uIiwiZXBvY2hWYWx1ZSIsImRhdGUiLCJEYXRlIiwic2V0VVRDU2Vjb25kcyIsInBhaXJSZWNvcmQiLCJyZWFkUGFpclJlY29yZCIsIkVycm9yIiwic3RhcnRTZXNzaW9uIiwiSG9zdElEIiwiU3lzdGVtQlVJRCIsImVuYWJsZVNlc3Npb25TU0wiLCJIb3N0UHJpdmF0ZUtleSIsIkhvc3RDZXJ0aWZpY2F0ZSIsImUiLCJjb25uZWN0UG9ydFNTTCIsInBvcnQiLCJmaW5kRGV2aWNlIiwiY29ubmVjdCIsIkRldmljZUlEIiwiY29ubmVjdFBvcnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsZ0JBQWdCLEdBQUc7QUFDdkJDLEVBQUFBLFdBQVcsRUFBRTtBQUFFQyxJQUFBQSxHQUFHLEVBQUU7QUFBUCxHQURVO0FBRXZCQyxFQUFBQSxjQUFjLEVBQUU7QUFBRUQsSUFBQUEsR0FBRyxFQUFFO0FBQVAsR0FGTztBQUd2QkUsRUFBQUEsV0FBVyxFQUFFO0FBQUVGLElBQUFBLEdBQUcsRUFBRTtBQUFQO0FBSFUsQ0FBekI7O0FBTUEsZUFBZUcsbUJBQWYsQ0FBb0NDLE1B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UUFBSSxDQUFDUCxNQUFMLEVBQWE7QUFDWCxZQUFNLElBQUlvQixLQUFKLENBQVcscUNBQW9DYixJQUFLLEVBQXBELENBQU47QUFDRDs7QUFDRCxXQUFPLE1BQU1iLE1BQU0sQ0FBQ3FDLE9BQVAsQ0FBZS9CLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQitCLFFBQWpDLEVBQTJDSCxJQUEzQyxDQUFiO0FBQ0QsR0FORCxDQU1FLE9BQU9GLENBQVAsRUFBVTtBQUNWakMsSUFBQUEsTUFBTSxDQUFDVyxLQUFQO0FBQ0EsVUFBTXNCLENBQU47QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVzYm11eCBmcm9tICcuL3VzYm11eCc7XG5pbXBvcnQgeyB1cGdyYWRlVG9TU0wgfSBmcm9tICcuL3NzbC1oZWxwZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgTE9DS0RPV05fUkVRVUVTVCA9IHtcbiAgREVWSUNFX1RJTUU6IHsgS2V5OiAnVGltZUludGVydmFsU2luY2UxOTcwJyB9LFxuICBERVZJQ0VfVkVSU0lPTjogeyBLZXk6ICdQcm9kdWN0VmVyc2lvbicgfSxcbiAgREVWSUNFX05BTUU6IHsgS2V5OiAnRGV2aWNlTmFtZScgfVxufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0Q29ubmVjdGVkRGV2aWNlcyAoc29ja2V0KSB7XG4gIGNvbnN0IHVzYm11eCA9IG5ldyBVc2JtdXgoc29ja2V0KTtcbiAgdHJ5IHtcbiAgICBjb25zdCBkZXZpY2VzID0gYXdhaXQgdXNibXV4Lmxpc3REZXZpY2VzKCk7XG4gICAgY29uc3QgdWRpZHMgPSBkZXZpY2VzLm1hcCgoZGV2aWNlKSA9PiBkZXZpY2UuUHJvcGVydGllcy5TZXJpYWxOdW1iZXIpO1xuICAgIHJldHVybiBfLnVuaXEodWRpZHMpO1xuICB9IGZpbmFsbHkge1xuICAgIHVzYm11eC5jbG9zZSgpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE9TVmVyc2lvbiAodWRpZCwgc29ja2V0KSB7XG4gIGNvbnN0IHVzYm11eCA9IG5ldyBVc2JtdXgoc29ja2V0KTtcbiAgdHJ5IHtcbiAgICAvLyBsb2NrZG93biBkb2Vzbid0IG5lZWQgdG8gYmUgY2xvc2VkIHNpbmNlIGl0IHVzZXMgdGhlIHNhbWUgc29ja2V0IHVzYm11eCB1c2VzXG4gICAgY29uc3QgbG9ja2Rvd24gPSBhd2FpdCB1c2JtdXguY29ubmVjdExvY2tkb3duKHVkaWQpO1xuICAgIHJldHVybiBhd2FpdCBsb2NrZG93bi5nZXRWYWx1ZShMT0NLRE9XTl9SRVFVRVNULkRFVklDRV9WRVJTSU9OKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB1c2JtdXguY2xvc2UoKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXREZXZpY2VOYW1lICh1ZGlkLCBzb2NrZXQpIHtcbiAgY29uc3QgdXNibXV4ID0gbmV3IFVzYm11eChzb2NrZXQpO1xuICB0cnkge1xuICAgIC8vIGxvY2tkb3duIGRvZXNuJ3QgbmVlZCB0byBiZSBjbG9zZWQgc2luY2UgaXQgdXNlcyB0aGUgc2FtZSBzb2NrZXQgdXNibXV4IHVzZXNcbiAgICBjb25zdCBsb2NrZG93biA9IGF3YWl0IHVzYm11eC5jb25uZWN0TG9ja2Rvd24odWRpZCk7XG4gICAgcmV0dXJuIGF3YWl0IGxvY2tkb3duLmdldFZhbHVlKExPQ0tET1dOX1JFUVVFU1QuREVWSUNFX05BTUUpO1xuICB9IGZpbmFsbHkge1xuICAgIHVzYm11eC5jbG9zZSgpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERldmljZVRpbWUgKHVkaWQsIHNvY2tldCkge1xuICBjb25zdCBsb2NrZG93biA9IGF3YWl0IHN0YXJ0TG9ja2Rvd25TZXNzaW9uKHVkaWQsIHNvY2tldCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZXBvY2hWYWx1ZSA9IGF3YWl0IGxvY2tkb3duLmdldFZhbHVlKExPQ0tET1dOX1JFUVVFU1QuREVWSUNFX1RJTUUpO1xuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgwKTsgLy8gVGhlIDAgdGhlcmUgaXMgdGhlIGtleSwgd2hpY2ggc2V0cyB0aGUgZGF0ZSB0byB0aGUgZXBvY2hcbiAgICBkYXRlLnNldFVUQ1NlY29uZHMoZXBvY2hWYWx1ZSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH0gZmluYWxseSB7XG4gICAgbG9ja2Rvd24uY2xvc2UoKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzdGFydExvY2tkb3duU2Vzc2lvbiAodWRpZCwgc29ja2V0KSB7XG4gIGNvbnN0IHVzYm11eCA9IG5ldyBVc2JtdXgoc29ja2V0KTtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYWlyUmVjb3JkID0gYXdhaXQgdXNibXV4LnJlYWRQYWlyUmVjb3JkKHVkaWQpO1xuICAgIGlmICghcGFpclJlY29yZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBmaW5kIGEgcGFpciByZWNvcmQgZm9yIGRldmljZSAke3VkaWR9LiBQbGVhc2UgZmlyc3QgcGFpciB3aXRoIHRoZSBkZXZpY2VgKTtcbiAgICB9XG4gICAgLy8gbG9ja2Rvd24gZG9lc24ndCBuZWVkIHRvIGJlIGNsb3NlZCBzaW5jZSBpdCB1c2VzIHRoZSBzYW1lIHNvY2tldCB1c2JtdXggdXNlc1xuICAgIGNvbnN0IGxvY2tkb3duID0gYXdhaXQgdXNibXV4LmNvbm5lY3RMb2NrZG93bih1ZGlkKTtcbiAgICBhd2FpdCBsb2NrZG93bi5zdGFydFNlc3Npb24ocGFpclJlY29yZC5Ib3N0SUQsIHBhaXJSZWNvcmQuU3lzdGVtQlVJRCk7XG4gICAgbG9ja2Rvd24uZW5hYmxlU2Vzc2lvblNTTChwYWlyUmVjb3JkLkhvc3RQcml2YXRlS2V5LCBwYWlyUmVjb3JkLkhvc3RDZXJ0aWZpY2F0ZSk7XG4gICAgcmV0dXJuIGxvY2tkb3duO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdXNibXV4LmNsb3NlKCk7XG4gICAgdGhyb3cgZTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjb25uZWN0UG9ydFNTTCAodWRpZCwgcG9ydCwgc29ja2V0KSB7XG4gIGNvbnN0IHVzYm11eCA9IG5ldyBVc2JtdXgoc29ja2V0KTtcbiAgdHJ5IHtcbiAgICBjb25zdCBkZXZpY2UgPSBhd2FpdCB1c2JtdXguZmluZERldmljZSh1ZGlkKTtcbiAgICBpZiAoIWRldmljZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBmaW5kIHRoZSBleHBlY3RlZCBkZXZpY2UgJHt1ZGlkfWApO1xuICAgIH1cbiAgICBjb25zdCBwYWlyUmVjb3JkID0gYXdhaXQgdXNibXV4LnJlYWRQYWlyUmVjb3JkKHVkaWQpO1xuICAgIGlmICghcGFpclJlY29yZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBmaW5kIGEgcGFpciByZWNvcmQgZm9yIGRldmljZSAke3VkaWR9LiBQbGVhc2UgZmlyc3QgcGFpciB3aXRoIHRoZSBkZXZpY2VgKTtcbiAgICB9XG4gICAgY29uc3Qgc29ja2V0ID0gYXdhaXQgdXNibXV4LmNvbm5lY3QoZGV2aWNlLlByb3BlcnRpZXMuRGV2aWNlSUQsIHBvcnQpO1xuICAgIHJldHVybiB1cGdyYWRlVG9TU0woc29ja2V0LCBwYWlyUmVjb3JkLkhvc3RQcml2YXRlS2V5LCBwYWlyUmVjb3JkLkhvc3RDZXJ0aWZpY2F0ZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1c2JtdXguY2xvc2UoKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RQb3J0ICh1ZGlkLCBwb3J0LCBzb2NrZXQpIHtcbiAgY29uc3QgdXNibXV4ID0gbmV3IFVzYm11eChzb2NrZXQpO1xuICB0cnkge1xuICAgIGNvbnN0IGRldmljZSA9IGF3YWl0IHVzYm11eC5maW5kRGV2aWNlKHVkaWQpO1xuICAgIGlmICghZGV2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkbid0IGZpbmQgdGhlIGV4cGVjdGVkIGRldmljZSAke3VkaWR9YCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB1c2JtdXguY29ubmVjdChkZXZpY2UuUHJvcGVydGllcy5EZXZpY2VJRCwgcG9ydCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB1c2JtdXguY2xvc2UoKTtcbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmV4cG9ydCB7IGdldENvbm5lY3RlZERldmljZXMsIGdldE9TVmVyc2lvbiwgZ2V0RGV2aWNlTmFtZSwgZ2V0RGV2aWNlVGltZSwgc3RhcnRMb2NrZG93blNlc3Npb24sIGNvbm5lY3RQb3J0LCBjb25uZWN0UG9ydFNTTCB9O1xuIl0sImZpbGUiOiJsaWIvdXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
