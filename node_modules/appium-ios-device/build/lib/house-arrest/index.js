"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HOUSE_ARREST_SERVICE_NAME = exports.HouseArrestService = void 0;

require("source-map-support/register");

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _constants = require("../constants");

var _afc = _interopRequireDefault(require("../afc"));

var _bluebird = _interopRequireDefault(require("bluebird"));

const HOUSE_ARREST_SERVICE_NAME = 'com.apple.mobile.house_arrest';
exports.HOUSE_ARREST_SERVICE_NAME = HOUSE_ARREST_SERVICE_NAME;

class HouseArrestService {
  constructor(socketClient) {
    this._socketClient = socketClient;
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default(false, _constants.KB, 0, 4, 4);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);
  }

  async vendContainer(bundleId) {
    const responsePromise = this.receivePlistPromise();

    this._encoder.write({
      Command: 'VendContainer',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application container. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  async vendDocuments(bundleId) {
    const responsePromise = this.receivePlistPromise();

    this._encoder.write({
      Command: 'VendDocuments',
      Identifier: bundleId
    });

    const response = await responsePromise;

    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application documents. Error: ${response.Error}`);
    }

    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    return new _afc.default(this._socketClient);
  }

  receivePlistPromise(timeout = 10000) {
    return new _bluebird.default((resolve, reject) => {
      this._decoder.once('data', resolve);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
  }

  close() {
    this._socketClient.destroy();
  }

}

exports.HouseArrestService = HouseArrestService;
var _default = HouseArrestService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ob3VzZS1hcnJlc3QvaW5kZXguanMiXSwibmFtZXMiOlsiSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSIsIkhvdXNlQXJyZXN0U2VydmljZSIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiX3NvY2tldENsaWVudCIsIl9kZWNvZGVyIiwiUGxpc3RTZXJ2aWNlRGVjb2RlciIsIl9zcGxpdHRlciIsIkxlbmd0aEJhc2VkU3BsaXR0ZXIiLCJLQiIsInBpcGUiLCJfZW5jb2RlciIsIlBsaXN0U2VydmljZUVuY29kZXIiLCJ2ZW5kQ29udGFpbmVyIiwiYnVuZGxlSWQiLCJyZXNwb25zZVByb21pc2UiLCJyZWNlaXZlUGxpc3RQcm9taXNlIiwid3JpdGUiLCJDb21tYW5kIiwiSWRlbnRpZmllciIsInJlc3BvbnNlIiwiU3RhdHVzIiwiRXJyb3IiLCJ1bnBpcGUiLCJBZmNTZXJ2aWNlIiwidmVuZERvY3VtZW50cyIsInRpbWVvdXQiLCJCIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uY2UiLCJzZXRUaW1lb3V0IiwiY2xvc2UiLCJkZXN0cm95Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLHlCQUF5QixHQUFHLCtCQUFsQzs7O0FBRUEsTUFBTUMsa0JBQU4sQ0FBeUI7QUFDdkJDLEVBQUFBLFdBQVcsQ0FBRUMsWUFBRixFQUFnQjtBQUN6QixTQUFLQyxhQUFMLEdBQXFCRCxZQUFyQjtBQUNBLFNBQUtFLFFBQUwsR0FBZ0IsSUFBSUMsNEJBQUosRUFBaEI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLElBQUlDLDRCQUFKLENBQXdCLEtBQXhCLEVBQStCQyxhQUEvQixFQUFtQyxDQUFuQyxFQUFzQyxDQUF0QyxFQUF5QyxDQUF6QyxDQUFqQjs7QUFDQSxTQUFLTCxhQUFMLENBQW1CTSxJQUFuQixDQUF3QixLQUFLSCxTQUE3QixFQUF3Q0csSUFBeEMsQ0FBNkMsS0FBS0wsUUFBbEQ7O0FBRUEsU0FBS00sUUFBTCxHQUFnQixJQUFJQyw0QkFBSixFQUFoQjs7QUFDQSxTQUFLRCxRQUFMLENBQWNELElBQWQsQ0FBbUIsS0FBS04sYUFBeEI7QUFDRDs7QUFRRCxRQUFNUyxhQUFOLENBQXFCQyxRQUFyQixFQUErQjtBQUM3QixVQUFNQyxlQUFlLEdBQUcsS0FBS0MsbUJBQUwsRUFBeEI7O0FBQ0EsU0FBS0wsUUFBTCxDQUFjTSxLQUFkLENBQW9CO0FBQ2xCQyxNQUFBQSxPQUFPLEVBQUUsZUFEUztBQUVsQkMsTUFBQUEsVUFBVSxFQUFFTDtBQUZNLEtBQXBCOztBQUlBLFVBQU1NLFFBQVEsR0FBRyxNQUFNTCxlQUF2Qjs7QUFDQSxRQUFJSyxRQUFRLENBQUNDLE1BQVQsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsWUFBTSxJQUFJQyxLQUFKLENBQVcseURBQXdERixRQUFRLENBQUNFLEtBQU0sRUFBbEYsQ0FBTjtBQUNEOztBQUNELFNBQUtsQixhQUFMLENBQW1CbUIsTUFBbkIsQ0FBMEIsS0FBS2hCLFNBQS9COztBQUNBLFNBQUtBLFNBQUwsQ0FBZWdCLE1BQWYsQ0FBc0IsS0FBS2xCLFFBQTNCOztBQUNBLFdBQU8sSUFBSW1CLFlBQUosQ0FBZSxLQUFLcEIsYUFBcEIsQ0FBUDtBQUNEOztBQVFELFFBQU1xQixhQUFOLENBQXFCWCxRQUFyQixFQUErQjtBQUM3QixVQUFNQyxlQUFlLEdBQUcsS0FBS0MsbUJBQUwsRUFBeEI7O0FBQ0EsU0FBS0wsUUFBTCxDQUFjTSxLQUFkLENBQW9CO0FBQ2xCQyxNQUFBQSxPQUFPLEVBQUUsZUFEUztBQUVsQkMsTUFBQUEsVUFBVSxFQUFFTDtBQUZNLEtBQXBCOztBQUlBLFVBQU1NLFFBQVEsR0FBRyxNQUFNTCxlQUF2Qjs7QUFDQSxRQUFJSyxRQUFRLENBQUNDLE1BQVQsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsWUFBTSxJQUFJQyxLQUFKLENBQVcseURBQXdERixRQUFRLENBQUNFLEtBQU0sRUFBbEYsQ0FBTjtBQUNEOztBQUNELFNBQUtsQixhQUFMLENBQW1CbUIsTUFBbkIsQ0FBMEIsS0FBS2hCLFNBQS9COztBQUNBLFNBQUtBLFNBQUwsQ0FBZWdCLE1BQWYsQ0FBc0IsS0FBS2xCLFFBQTNCOztBQUNBLFdBQU8sSUFBSW1CLFlBQUosQ0FBZSxLQUFLcEIsYUFBcEIsQ0FBUDtBQUNEOztBQUVEWSxFQUFBQSxtQkFBbUIsQ0FBRVUsT0FBTyxHQUFHLEtBQVosRUFBbUI7QUFDcEMsV0FBTyxJQUFJQyxpQkFBSixDQUFNLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNoQyxXQUFLeEIsUUFBTCxDQUFjeUIsSUFBZCxDQUFtQixNQUFuQixFQUEyQkYsT0FBM0I7O0FBQ0FHLE1BQUFBLFVBQVUsQ0FBQyxNQUFNRixNQUFNLENBQUMsSUFBSVAsS0FBSixDQUFXLGtEQUFpREksT0FBUSxFQUFwRSxDQUFELENBQWIsRUFBdUZBLE9BQXZGLENBQVY7QUFDRCxLQUhNLENBQVA7QUFJRDs7QUFFRE0sRUFBQUEsS0FBSyxHQUFJO0FBQ1AsU0FBSzVCLGFBQUwsQ0FBbUI2QixPQUFuQjtBQUNEOztBQTlEc0I7OztlQWtFVmhDLGtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBsaXN0U2VydmljZURlY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWRlY29kZXInO1xuaW1wb3J0IFBsaXN0U2VydmljZUVuY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWVuY29kZXInO1xuaW1wb3J0IExlbmd0aEJhc2VkU3BsaXR0ZXIgZnJvbSAnLi4vdXRpbC90cmFuc2Zvcm1lci9sZW5ndGgtYmFzZWQtc3BsaXR0ZXInO1xuaW1wb3J0IHsgS0IgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IEFmY1NlcnZpY2UgZnJvbSAnLi4vYWZjJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuY29uc3QgSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSA9ICdjb20uYXBwbGUubW9iaWxlLmhvdXNlX2FycmVzdCc7XG5cbmNsYXNzIEhvdXNlQXJyZXN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQgPSBzb2NrZXRDbGllbnQ7XG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgdGhpcy5fc3BsaXR0ZXIgPSBuZXcgTGVuZ3RoQmFzZWRTcGxpdHRlcihmYWxzZSwgS0IsIDAsIDQsIDQpO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuXG4gICAgdGhpcy5fZW5jb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VFbmNvZGVyKCk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gIH1cblxuICAvKipcbiAgICogVmVuZHMgaW50byB0aGUgYXBwbGljYXRpb24gY29udGFpbmVyIGFuZCByZXR1cm5zIGFuIEFmY1NlcnZpY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIFRoZSBidW5kbGUgaWQgb2YgdGhlIGFwcCBjb250YWluZXIgdGhhdCB3ZSB3aWxsIGVudGVyIHRvXG4gICAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiBob3VzZSBhcnJlc3QgZmFpbHMgdG8gYWNjZXNzIHRoZSBhcHBsaWNhdGlvbidzIGNvbnRhaW5lclxuICAgKiBAcmV0dXJucyB7QWZjU2VydmljZX1cbiAgICovXG4gIGFzeW5jIHZlbmRDb250YWluZXIgKGJ1bmRsZUlkKSB7XG4gICAgY29uc3QgcmVzcG9uc2VQcm9taXNlID0gdGhpcy5yZWNlaXZlUGxpc3RQcm9taXNlKCk7XG4gICAgdGhpcy5fZW5jb2Rlci53cml0ZSh7XG4gICAgICBDb21tYW5kOiAnVmVuZENvbnRhaW5lcicsXG4gICAgICBJZGVudGlmaWVyOiBidW5kbGVJZCxcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlUHJvbWlzZTtcbiAgICBpZiAocmVzcG9uc2UuU3RhdHVzICE9PSAnQ29tcGxldGUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB2ZW5kIGludG8gdGhlIGFwcGxpY2F0aW9uIGNvbnRhaW5lci4gRXJyb3I6ICR7cmVzcG9uc2UuRXJyb3J9YCk7XG4gICAgfVxuICAgIHRoaXMuX3NvY2tldENsaWVudC51bnBpcGUodGhpcy5fc3BsaXR0ZXIpO1xuICAgIHRoaXMuX3NwbGl0dGVyLnVucGlwZSh0aGlzLl9kZWNvZGVyKTtcbiAgICByZXR1cm4gbmV3IEFmY1NlcnZpY2UodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZW5kcyBpbnRvIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudHMgYW5kIHJldHVybnMgYW4gQWZjU2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwIGRvY3VtZW50cyB0aGF0IHdlIHdpbGwgZW50ZXIgdG9cbiAgICogQHRocm93cyBXaWxsIHRocm93IGFuIGVycm9yIGlmIGhvdXNlIGFycmVzdCBmYWlscyB0byBhY2Nlc3MgdGhlIGFwcGxpY2F0aW9uJ3MgZG9jdW1lbnRzXG4gICAqIEByZXR1cm5zIHtBZmNTZXJ2aWNlfVxuICAgKi9cbiAgYXN5bmMgdmVuZERvY3VtZW50cyAoYnVuZGxlSWQpIHtcbiAgICBjb25zdCByZXNwb25zZVByb21pc2UgPSB0aGlzLnJlY2VpdmVQbGlzdFByb21pc2UoKTtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdWZW5kRG9jdW1lbnRzJyxcbiAgICAgIElkZW50aWZpZXI6IGJ1bmRsZUlkLFxuICAgIH0pO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2VQcm9taXNlO1xuICAgIGlmIChyZXNwb25zZS5TdGF0dXMgIT09ICdDb21wbGV0ZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHZlbmQgaW50byB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnRzLiBFcnJvcjogJHtyZXNwb25zZS5FcnJvcn1gKTtcbiAgICB9XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHJldHVybiBuZXcgQWZjU2VydmljZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICB9XG5cbiAgcmVjZWl2ZVBsaXN0UHJvbWlzZSAodGltZW91dCA9IDEwMDAwKSB7XG4gICAgcmV0dXJuIG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuX2RlY29kZXIub25jZSgnZGF0YScsIHJlc29sdmUpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKGBGYWlsZWQgdG8gcmVjZWl2ZSBhbnkgZGF0YSB3aXRoaW4gdGhlIHRpbWVvdXQ6ICR7dGltZW91dH1gKSksIHRpbWVvdXQpO1xuICAgIH0pO1xuICB9XG5cbiAgY2xvc2UgKCkge1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5kZXN0cm95KCk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSG91c2VBcnJlc3RTZXJ2aWNlLCBIT1VTRV9BUlJFU1RfU0VSVklDRV9OQU1FIH07XG5leHBvcnQgZGVmYXVsdCBIb3VzZUFycmVzdFNlcnZpY2U7XG5cbiJdLCJmaWxlIjoibGliL2hvdXNlLWFycmVzdC9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
