"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LOCKDOWN_PORT = exports.Lockdown = void 0;

require("source-map-support/register");

const LOCKDOWN_PORT = 62078;
exports.LOCKDOWN_PORT = LOCKDOWN_PORT;
const LABEL = 'usbmuxd';
const PROTOCOL_VERSION = 2;

class Lockdown {
  constructor(plistService) {
    this.plistService = plistService;
  }

  async queryType(timeout = 5000) {
    const data = await this.plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'QueryType'
    }, timeout);

    if (data.Request === 'QueryType' && data.Type === 'com.apple.mobile.lockdown') {
      return data;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async startSession(hostID, systemBUID, timeout = 5000) {
    const data = await this.plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'StartSession',
      HostID: hostID,
      SystemBUID: systemBUID
    }, timeout);

    if (data.Request === 'StartSession' && data.SessionID) {
      return {
        sessionID: data.SessionID,
        enableSessionSSL: data.EnableSessionSSL
      };
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this.plistService.enableSessionSSL(hostPrivateKey, hostCertificate);
  }

  async getValue(query = {}, timeout = 5000) {
    let plist = {
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'GetValue'
    };
    Object.assign(plist, query);
    const data = await this.plistService.sendPlistAndReceive(plist, timeout);

    if (data.Request === 'GetValue' && data.Value) {
      return data.Value;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async startService(serviceName, timeout = 5000) {
    const data = await this.plistService.sendPlistAndReceive({
      Label: LABEL,
      ProtocolVersion: PROTOCOL_VERSION,
      Request: 'StartService',
      Service: serviceName
    }, timeout);

    if (data.Error) {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    } else {
      return data;
    }
  }

  close() {
    this.plistService.close();
  }

}

exports.Lockdown = Lockdown;
var _default = Lockdown;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9sb2NrZG93bi9pbmRleC5qcyJdLCJuYW1lcyI6WyJMT0NLRE9XTl9QT1JUIiwiTEFCRUwiLCJQUk9UT0NPTF9WRVJTSU9OIiwiTG9ja2Rvd24iLCJjb25zdHJ1Y3RvciIsInBsaXN0U2VydmljZSIsInF1ZXJ5VHlwZSIsInRpbWVvdXQiLCJkYXRhIiwic2VuZFBsaXN0QW5kUmVjZWl2ZSIsIkxhYmVsIiwiUHJvdG9jb2xWZXJzaW9uIiwiUmVxdWVzdCIsIlR5cGUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJzdGFydFNlc3Npb24iLCJob3N0SUQiLCJzeXN0ZW1CVUlEIiwiSG9zdElEIiwiU3lzdGVtQlVJRCIsIlNlc3Npb25JRCIsInNlc3Npb25JRCIsImVuYWJsZVNlc3Npb25TU0wiLCJFbmFibGVTZXNzaW9uU1NMIiwiaG9zdFByaXZhdGVLZXkiLCJob3N0Q2VydGlmaWNhdGUiLCJnZXRWYWx1ZSIsInF1ZXJ5IiwicGxpc3QiLCJPYmplY3QiLCJhc3NpZ24iLCJWYWx1ZSIsInN0YXJ0U2VydmljZSIsInNlcnZpY2VOYW1lIiwiU2VydmljZSIsImNsb3NlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFNQSxhQUFhLEdBQUcsS0FBdEI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHLFNBQWQ7QUFDQSxNQUFNQyxnQkFBZ0IsR0FBRyxDQUF6Qjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFFYkMsRUFBQUEsV0FBVyxDQUFFQyxZQUFGLEVBQWdCO0FBQ3pCLFNBQUtBLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0Q7O0FBRUQsUUFBTUMsU0FBTixDQUFpQkMsT0FBTyxHQUFHLElBQTNCLEVBQWlDO0FBQy9CLFVBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtILFlBQUwsQ0FBa0JJLG1CQUFsQixDQUFzQztBQUN2REMsTUFBQUEsS0FBSyxFQUFFVCxLQURnRDtBQUV2RFUsTUFBQUEsZUFBZSxFQUFFVCxnQkFGc0M7QUFHdkRVLE1BQUFBLE9BQU8sRUFB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U0FBTCxDQUFlUixJQUFmLENBQXFCLEVBQW5ELENBQU47QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPQSxJQUFQO0FBQ0Q7QUFDRjs7QUFFRDZCLEVBQUFBLEtBQUssR0FBSTtBQUNQLFNBQUtoQyxZQUFMLENBQWtCZ0MsS0FBbEI7QUFDRDs7QUF2RVk7OztlQTJFQWxDLFEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBMT0NLRE9XTl9QT1JUID0gNjIwNzg7XG5jb25zdCBMQUJFTCA9ICd1c2JtdXhkJztcbmNvbnN0IFBST1RPQ09MX1ZFUlNJT04gPSAyO1xuXG5jbGFzcyBMb2NrZG93biB7XG5cbiAgY29uc3RydWN0b3IgKHBsaXN0U2VydmljZSkge1xuICAgIHRoaXMucGxpc3RTZXJ2aWNlID0gcGxpc3RTZXJ2aWNlO1xuICB9XG5cbiAgYXN5bmMgcXVlcnlUeXBlICh0aW1lb3V0ID0gNTAwMCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLnBsaXN0U2VydmljZS5zZW5kUGxpc3RBbmRSZWNlaXZlKHtcbiAgICAgIExhYmVsOiBMQUJFTCxcbiAgICAgIFByb3RvY29sVmVyc2lvbjogUFJPVE9DT0xfVkVSU0lPTixcbiAgICAgIFJlcXVlc3Q6ICdRdWVyeVR5cGUnXG4gICAgfSwgdGltZW91dCk7XG4gICAgaWYgKGRhdGEuUmVxdWVzdCA9PT0gJ1F1ZXJ5VHlwZScgJiYgZGF0YS5UeXBlID09PSAnY29tLmFwcGxlLm1vYmlsZS5sb2NrZG93bicpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZGF0YTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdGFydFNlc3Npb24gKGhvc3RJRCwgc3lzdGVtQlVJRCwgdGltZW91dCA9IDUwMDApIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7XG4gICAgICBMYWJlbDogTEFCRUwsXG4gICAgICBQcm90b2NvbFZlcnNpb246IFBST1RPQ09MX1ZFUlNJT04sXG4gICAgICBSZXF1ZXN0OiAnU3RhcnRTZXNzaW9uJyxcbiAgICAgIEhvc3RJRDogaG9zdElELFxuICAgICAgU3lzdGVtQlVJRDogc3lzdGVtQlVJRFxuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgaWYgKGRhdGEuUmVxdWVzdCA9PT0gJ1N0YXJ0U2Vzc2lvbicgJiYgZGF0YS5TZXNzaW9uSUQpIHtcbiAgICAgIHJldHVybiB7IHNlc3Npb25JRDogZGF0YS5TZXNzaW9uSUQsIGVuYWJsZVNlc3Npb25TU0w6IGRhdGEuRW5hYmxlU2Vzc2lvblNTTCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZGF0YTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKTtcbiAgICB9XG4gIH1cblxuICBlbmFibGVTZXNzaW9uU1NMIChob3N0UHJpdmF0ZUtleSwgaG9zdENlcnRpZmljYXRlKSB7XG4gICAgdGhpcy5wbGlzdFNlcnZpY2UuZW5hYmxlU2Vzc2lvblNTTChob3N0UHJpdmF0ZUtleSwgaG9zdENlcnRpZmljYXRlKTtcbiAgfVxuXG4gIGFzeW5jIGdldFZhbHVlIChxdWVyeSA9IHt9LCB0aW1lb3V0ID0gNTAwMCkge1xuICAgIGxldCBwbGlzdCA9IHtcbiAgICAgIExhYmVsOiBMQUJFTCxcbiAgICAgIFByb3RvY29sVmVyc2lvbjogUFJPVE9DT0xfVkVSU0lPTixcbiAgICAgIFJlcXVlc3Q6ICdHZXRWYWx1ZSdcbiAgICB9O1xuICAgIE9iamVjdC5hc3NpZ24ocGxpc3QsIHF1ZXJ5KTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZShwbGlzdCwgdGltZW91dCk7XG4gICAgaWYgKGRhdGEuUmVxdWVzdCA9PT0gJ0dldFZhbHVlJyAmJiBkYXRhLlZhbHVlKSB7XG4gICAgICByZXR1cm4gZGF0YS5WYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc3RhcnRTZXJ2aWNlIChzZXJ2aWNlTmFtZSwgdGltZW91dCA9IDUwMDApIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wbGlzdFNlcnZpY2Uuc2VuZFBsaXN0QW5kUmVjZWl2ZSh7XG4gICAgICBMYWJlbDogTEFCRUwsXG4gICAgICBQcm90b2NvbFZlcnNpb246IFBST1RPQ09MX1ZFUlNJT04sXG4gICAgICBSZXF1ZXN0OiAnU3RhcnRTZXJ2aWNlJyxcbiAgICAgIFNlcnZpY2U6IHNlcnZpY2VOYW1lLFxuICAgIH0sIHRpbWVvdXQpO1xuXG4gICAgaWYgKGRhdGEuRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBkYXRhOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cblxuICBjbG9zZSAoKSB7XG4gICAgdGhpcy5wbGlzdFNlcnZpY2UuY2xvc2UoKTtcbiAgfVxufVxuXG5leHBvcnQgeyBMb2NrZG93biwgTE9DS0RPV05fUE9SVCB9O1xuZXhwb3J0IGRlZmF1bHQgTG9ja2Rvd247Il0sImZpbGUiOiJsaWIvbG9ja2Rvd24vaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
