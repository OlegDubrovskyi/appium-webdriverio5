"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Usbmux = void 0;

require("source-map-support/register");

var _net = _interopRequireDefault(require("net"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _usbmuxDecoder = _interopRequireDefault(require("./transformer/usbmux-decoder.js"));

var _usbmuxEncoder = _interopRequireDefault(require("./transformer/usbmux-encoder.js"));

var _path = _interopRequireDefault(require("path"));

var _plistService = _interopRequireDefault(require("../plist-service"));

var _lockdown = require("../lockdown");

const USBMUX_RESULT = {
  OK: 0,
  BADCOMMAND: 1,
  BADDEV: 2,
  CONNREFUSED: 3
};
let name, version;

try {
  ({
    name,
    version
  } = require(_path.default.resolve(__dirname, '..', '..', '..', 'package.json')));
} catch (err) {
  ({
    name,
    version
  } = require(_path.default.resolve(__dirname, '..', '..', 'package.json')));
}

const DEFAULT_USBMUXD_SOCKET = '/var/run/usbmuxd';
const PROG_NAME = name;
const CLIENT_VERSION_STRING = `${name}-${version}`;

function swap16(val) {
  return (val & 0xFF) << 8 | val >> 8 & 0xFF;
}

class Usbmux {
  constructor(socketClient = _net.default.createConnection(DEFAULT_USBMUXD_SOCKET)) {
    this._socketClient = socketClient;
    this._decoder = new _usbmuxDecoder.default();
    this._splitter = new _lengthBasedSplitter.default(true, 1000000, 0, 4, 0);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _usbmuxEncoder.default();

    this._encoder.pipe(this._socketClient);
  }

  async readBUID(timeout = 5000) {
    const receivePromise = this.receivePlistPromise(timeout);
    this.sendPlist({
      MessageType: 'ReadBUID',
      ProgName: PROG_NAME,
      ClientVersionString: CLIENT_VERSION_STRING
    });
    const data = await receivePromise;

    if (data.payload.BUID) {
      return data.payload.BUID;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async readPairRecord(udid, timeout = 5000) {
    const receivePromise = this.receivePlistPromise(timeout);
    this.sendPlist({
      MessageType: 'ReadPairRecord',
      PairRecordID: udid,
      ProgName: PROG_NAME,
      ClientVersionString: CLIENT_VERSION_STRING
    });
    const data = await receivePromise;

    if (data.payload.PairRecordData) {
      try {
        return _appiumSupport.plist.parsePlist(data.payload.PairRecordData);
      } catch (err) {
        throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
      }
    } else {
      return null;
    }
  }

  sendPlist(json) {
    this._encoder.write(json);
  }

  receivePlistPromise(timeout = 5000) {
    return new _bluebird.default((resolve, reject) => {
      this._decoder.once('data', resolve);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
  }

  async listDevices(timeout = 5000) {
    const receivePromise = this.receivePlistPromise(timeout);
    this.sendPlist({
      MessageType: 'ListDevices',
      ProgName: PROG_NAME,
      ClientVersionString: CLIENT_VERSION_STRING
    });
    const data = await receivePromise;

    if (data.payload.DeviceList) {
      return data.payload.DeviceList;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async findDevice(udid) {
    let devices = await this.listDevices();
    return _lodash.default.find(devices, device => device.Properties.SerialNumber === udid);
  }

  async connectLockdown(udid) {
    let device = await this.findDevice(udid);

    if (!device) {
      throw new Error(`Could not find the expected device '${udid}'`);
    }

    let plistService = new _plistService.default((await this.connect(device.Properties.DeviceID, _lockdown.LOCKDOWN_PORT)));
    return new _lockdown.Lockdown(plistService);
  }

  async connect(deviceID, port, timeout = 5000) {
    const receivePromise = this.receivePlistPromise(timeout);
    this.sendPlist({
      MessageType: 'Connect',
      ProgName: PROG_NAME,
      ClientVersionString: CLIENT_VERSION_STRING,
      DeviceID: deviceID,
      PortNumber: swap16(port)
    });
    const data = await receivePromise;

    if (data.payload.MessageType !== 'Result') {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }

    if (data.payload.Number === USBMUX_RESULT.OK) {
      this._socketClient.unpipe(this._splitter);

      this._splitter.unpipe(this._decoder);

      return this._socketClient;
    } else if (data.payload.Number === USBMUX_RESULT.CONNREFUSED) {
      throw new Error(`Connection was refused to port ${port}`);
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  close() {
    this._socketClient.destroy();
  }

}

exports.Usbmux = Usbmux;
var _default = Usbmux;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
