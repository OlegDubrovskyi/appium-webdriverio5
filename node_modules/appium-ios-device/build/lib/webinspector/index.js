"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WEB_INSPECTOR_SERVICE_NAME = exports.WebInspectorService = void 0;

require("source-map-support/register");

var _webinspectorDecoder = _interopRequireDefault(require("./transformer/webinspector-decoder"));

var _webinspectorEncoder = _interopRequireDefault(require("./transformer/webinspector-encoder"));

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _constants = require("../constants");

const WEB_INSPECTOR_SERVICE_NAME = 'com.apple.webinspector';
exports.WEB_INSPECTOR_SERVICE_NAME = WEB_INSPECTOR_SERVICE_NAME;
const PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION = 11;

class WebInspectorService {
  constructor(majorOsVersion, socketClient) {
    this._socketClient = socketClient;

    if (majorOsVersion < PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {
      this._decoder = new _webinspectorDecoder.default(_constants.MB);
      const plistDecoder = new _plistServiceDecoder.default();
      const splitter = new _lengthBasedSplitter.default(false, 1000000, 0, 4, 4);

      this._socketClient.pipe(splitter).pipe(plistDecoder).pipe(this._decoder);

      this._encoder = new _webinspectorEncoder.default();
      const plistEncoder = new _plistServiceEncoder.default();

      this._encoder.pipe(plistEncoder).pipe(this._socketClient);
    } else {
      this._decoder = new _plistServiceDecoder.default();
      const splitter = new _lengthBasedSplitter.default(false, 1000000, 0, 4, 4);

      this._socketClient.pipe(splitter).pipe(this._decoder);

      this._encoder = new _plistServiceEncoder.default();

      this._encoder.pipe(this._socketClient);
    }
  }

  sendMessage(rpcObject) {
    if (!rpcObject) {
      throw new Error('Cant send a null object');
    }

    this._encoder.write(rpcObject);
  }

  listenMessage(callback) {
    this._decoder.on('data', callback);
  }

  close() {
    this._socketClient.destroy();
  }

}

exports.WebInspectorService = WebInspectorService;
var _default = WebInspectorService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJpbnNwZWN0b3IvaW5kZXguanMiXSwibmFtZXMiOlsiV0VCX0lOU1BFQ1RPUl9TRVJWSUNFX05BTUUiLCJQQVJUSUFMX01FU1NBR0VfU1VQUE9SVF9ERVBSRUNBVElPTl9WRVJTSU9OIiwiV2ViSW5zcGVjdG9yU2VydmljZSIsImNvbnN0cnVjdG9yIiwibWFqb3JPc1ZlcnNpb24iLCJzb2NrZXRDbGllbnQiLCJfc29ja2V0Q2xpZW50IiwiX2RlY29kZXIiLCJXZWJJbnNwZWN0b3JEZWNvZGVyIiwiTUIiLCJwbGlzdERlY29kZXIiLCJQbGlzdFNlcnZpY2VEZWNvZGVyIiwic3BsaXR0ZXIiLCJMZW5ndGhCYXNlZFNwbGl0dGVyIiwicGlwZSIsIl9lbmNvZGVyIiwiV2ViSW5zcGVjdG9yRW5jb2RlciIsInBsaXN0RW5jb2RlciIsIlBsaXN0U2VydmljZUVuY29kZXIiLCJzZW5kTWVzc2FnZSIsInJwY09iamVjdCIsIkVycm9yIiwid3JpdGUiLCJsaXN0ZW5NZXNzYWdlIiwiY2FsbGJhY2siLCJvbiIsImNsb3NlIiwiZGVzdHJveSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSwwQkFBMEIsR0FBRyx3QkFBbkM7O0FBRUEsTUFBTUMsMkNBQTJDLEdBQUcsRUFBcEQ7O0FBRUEsTUFBTUMsbUJBQU4sQ0FBMEI7QUFPeEJDLEVBQUFBLFdBQVcsQ0FBRUMsY0FBRixFQUFrQkMsWUFBbEIsRUFBZ0M7QUFDekMsU0FBS0MsYUFBTCxHQUFxQkQsWUFBckI7O0FBRUEsUUFBSUQsY0FBYyxHQUFHSCwyQ0FBckIsRUFBa0U7QUFFaEUsV0FBS00sUUFBTCxHQUFnQixJQUFJQyw0QkFBSixDQUF3QkMsYUFBeEIsQ0FBaEI7QUFDQSxZQUFNQyxZQUFZLEdBQUcsSUFBSUMsNEJBQUosRUFBckI7QUFDQSxZQUFNQyxRQUFRLEdBQUcsSUFBSUMsNEJBQUosQ0FBd0IsS0FBeEIsRUFBK0IsT0FBL0IsRUFBd0MsQ0FBeEMsRUFBMkMsQ0FBM0MsRUFBOEMsQ0FBOUMsQ0FBakI7O0FBQ0EsV0FBS1AsYUFBTCxDQUFtQlEsSUFBbkIsQ0FBd0JGLFFBQXhCLEVBQWtDRSxJQUFsQyxDQUF1Q0osWUFBdkMsRUFBcURJLElBQXJELENBQTBELEtBQUtQLFFBQS9EOztBQUVBLFdBQUtRLFFBQUwsR0FBZ0IsSUFBSUMsNEJBQUosRUFBaEI7QUFDQSxZQUFNQyxZQUFZLEdBQUcsSUFBSUMsNEJBQUosRUFBckI7O0FBQ0EsV0FBS0gsUUFBTCxDQUFjRCxJQUFkLENBQW1CRyxZQUFuQixFQUFpQ0gsSUFBakMsQ0FBc0MsS0FBS1IsYUFBM0M7QUFDRCxLQVZELE1BVU87QUFDTCxXQUFLQyxRQUFMLEdBQWdCLElBQUlJLDRCQUFKLEVBQWhCO0FBQ0EsWUFBTUMsUUFBUSxHQUFHLElBQUlDLDRCQUFKLENBQXdCLEtBQXhCLEVBQStCLE9BQS9CLEVBQXdDLENBQXhDLEVBQTJDLENBQTNDLEVBQThDLENBQTlDLENBQWpCOztBQUNBLFdBQUtQLGFBQUwsQ0FBbUJRLElBQW5CLENBQXdCRixRQUF4QixFQUFrQ0UsSUFBbEMsQ0FBdUMsS0FBS1AsUUFBNUM7O0FBRUEsV0FBS1EsUUFBTCxHQUFnQixJQUFJRyw0QkFBSixFQUFoQjs7QUFDQSxXQUFLSCxRQUFMLENBQWNELElBQWQsQ0FBbUIsS0FBS1IsYUFBeEI7QUFDRDtBQUNGOztBQUVEYSxFQUFBQSxXQUFXLENBQUVDLFNBQUYsRUFBYTtBQUN0QixRQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDZCxZQUFNLElBQUlDLEtBQUosQ0FBVSx5QkFBVixDQUFOO0FBQ0Q7O0FBQ0QsU0FBS04sUUFBTCxDQUFjTyxLQUFkLENBQW9CRixTQUFwQjtBQUNEOztBQUVERyxFQUFBQSxhQUFhLENBQUVDLFFBQUYsRUFBWTtBQUN2QixTQUFLakIsUUFBTCxDQUFja0IsRUFBZCxDQUFpQixNQUFqQixFQUF5QkQsUUFBekI7QUFDRDs7QUFFREUsRUFBQUEsS0FBSyxHQUFJO0FBQ1AsU0FBS3BCLGFBQUwsQ0FBbUJxQixPQUFuQjtBQUNEOztBQTNDdUI7OztlQWdEWHpCLG1CIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzICovXG5pbXBvcnQgV2ViSW5zcGVjdG9yRGVjb2RlciBmcm9tICcuL3RyYW5zZm9ybWVyL3dlYmluc3BlY3Rvci1kZWNvZGVyJztcbmltcG9ydCBXZWJJbnNwZWN0b3JFbmNvZGVyIGZyb20gJy4vdHJhbnNmb3JtZXIvd2ViaW5zcGVjdG9yLWVuY29kZXInO1xuaW1wb3J0IFBsaXN0U2VydmljZURlY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWRlY29kZXInO1xuaW1wb3J0IFBsaXN0U2VydmljZUVuY29kZXIgZnJvbSAnLi4vcGxpc3Qtc2VydmljZS90cmFuc2Zvcm1lci9wbGlzdC1zZXJ2aWNlLWVuY29kZXInO1xuaW1wb3J0IExlbmd0aEJhc2VkU3BsaXR0ZXIgZnJvbSAnLi4vdXRpbC90cmFuc2Zvcm1lci9sZW5ndGgtYmFzZWQtc3BsaXR0ZXInO1xuaW1wb3J0IHsgTUIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5jb25zdCBXRUJfSU5TUEVDVE9SX1NFUlZJQ0VfTkFNRSA9ICdjb20uYXBwbGUud2ViaW5zcGVjdG9yJztcblxuY29uc3QgUEFSVElBTF9NRVNTQUdFX1NVUFBPUlRfREVQUkVDQVRJT05fVkVSU0lPTiA9IDExO1xuXG5jbGFzcyBXZWJJbnNwZWN0b3JTZXJ2aWNlIHtcblxuICAvKipcbiAgICogVGhlIG1haW4gc2VydmljZSBmb3IgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSB3ZWJpbnNwZWN0b3JkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYWpvck9zVmVyc2lvbiBUaGUgbWFqb3IgdmVyc2lvbiBvZiB0aGUgb3MgdmVyc2lvblxuICAgKiBAcGFyYW0geyp9IHNvY2tldENsaWVudCBUaGUgc29ja2V0IGNsaWVudCB3aGVyZSB0aGUgY29tbXVuaWNhdGlvbiB3aWxsIGhhcHBlblxuICAgKi9cbiAgY29uc3RydWN0b3IgKG1ham9yT3NWZXJzaW9uLCBzb2NrZXRDbGllbnQpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQgPSBzb2NrZXRDbGllbnQ7XG5cbiAgICBpZiAobWFqb3JPc1ZlcnNpb24gPCBQQVJUSUFMX01FU1NBR0VfU1VQUE9SVF9ERVBSRUNBVElPTl9WRVJTSU9OKSB7XG4gICAgICAvLyAxTUIgYXMgYnVmZmVyIGZvciBidWxkaW5nIHdlYmluc3BlY3RvciBmdWxsIG1lc3NhZ2VzLiBXZSBjYW4gaW5jcmVhc2UgdGhlIHZhbHVlIGlmIG1vcmUgYnVmZmVyIGlzIG5lZWRlZFxuICAgICAgdGhpcy5fZGVjb2RlciA9IG5ldyBXZWJJbnNwZWN0b3JEZWNvZGVyKE1CKTtcbiAgICAgIGNvbnN0IHBsaXN0RGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgICBjb25zdCBzcGxpdHRlciA9IG5ldyBMZW5ndGhCYXNlZFNwbGl0dGVyKGZhbHNlLCAxMDAwMDAwLCAwLCA0LCA0KTtcbiAgICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHNwbGl0dGVyKS5waXBlKHBsaXN0RGVjb2RlcikucGlwZSh0aGlzLl9kZWNvZGVyKTtcblxuICAgICAgdGhpcy5fZW5jb2RlciA9IG5ldyBXZWJJbnNwZWN0b3JFbmNvZGVyKCk7XG4gICAgICBjb25zdCBwbGlzdEVuY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRW5jb2RlcigpO1xuICAgICAgdGhpcy5fZW5jb2Rlci5waXBlKHBsaXN0RW5jb2RlcikucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFBsaXN0U2VydmljZURlY29kZXIoKTtcbiAgICAgIGNvbnN0IHNwbGl0dGVyID0gbmV3IExlbmd0aEJhc2VkU3BsaXR0ZXIoZmFsc2UsIDEwMDAwMDAsIDAsIDQsIDQpO1xuICAgICAgdGhpcy5fc29ja2V0Q2xpZW50LnBpcGUoc3BsaXR0ZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICAgIHRoaXMuX2VuY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRW5jb2RlcigpO1xuICAgICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgfVxuICB9XG5cbiAgc2VuZE1lc3NhZ2UgKHJwY09iamVjdCkge1xuICAgIGlmICghcnBjT2JqZWN0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbnQgc2VuZCBhIG51bGwgb2JqZWN0Jyk7XG4gICAgfVxuICAgIHRoaXMuX2VuY29kZXIud3JpdGUocnBjT2JqZWN0KTtcbiAgfVxuXG4gIGxpc3Rlbk1lc3NhZ2UgKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fZGVjb2Rlci5vbignZGF0YScsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGNsb3NlICgpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQuZGVzdHJveSgpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgV2ViSW5zcGVjdG9yU2VydmljZSwgV0VCX0lOU1BFQ1RPUl9TRVJWSUNFX05BTUUgfTtcbmV4cG9ydCBkZWZhdWx0IFdlYkluc3BlY3RvclNlcnZpY2U7Il0sImZpbGUiOiJsaWIvd2ViaW5zcGVjdG9yL2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
