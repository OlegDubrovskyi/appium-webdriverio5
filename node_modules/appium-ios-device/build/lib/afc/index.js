"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AFC_SERVICE_NAME = exports.AfcService = exports.default = void 0;

require("source-map-support/register");

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _protocol = require("./protocol");

var _streams = require("./streams");

var _afcencoder = _interopRequireDefault(require("./transformer/afcencoder"));

var _afcdecoder = _interopRequireDefault(require("./transformer/afcdecoder"));

var _constants = require("../constants");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

const AFC_SERVICE_NAME = 'com.apple.afc';
exports.AFC_SERVICE_NAME = AFC_SERVICE_NAME;
const NULL_DELIMETER_CODE = 0x00;

class AfcService {
  constructor(socketClient) {
    this._socketClient = socketClient;
    this._splitter = new _lengthBasedSplitter.default(true, _constants.MB, 8, 8, -8);
    this._decoder = new _afcdecoder.default();

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _afcencoder.default();

    this._encoder.pipe(this._socketClient);

    this._responseCallbacks = {};
    this._packetNumber = 0;

    this._decoder.on('data', this._handleData.bind(this));
  }

  _handleData(data) {
    const cb = this._responseCallbacks[data.packetNumber];

    if (!_lodash.default.isFunction(cb)) {
      return;
    }

    cb(data);
  }

  async createDirectory(path) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const data = {
      opCode: _protocol.Operations.MAKE_DIR,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;
    this.checkStatus(res);
  }

  async deleteDirectory(path) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const data = {
      opCode: _protocol.Operations.REMOVE_PATH_AND_CONTENTS,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;
    this.checkStatus(res);
  }

  async listDirectory(path) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const data = {
      opCode: _protocol.Operations.READ_DIR,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.DATA) {
      this.checkStatus(res);
    }

    return this.parseArray(res.content);
  }

  async openFile(path, mode) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const pathPayload = Buffer.from(path);
    const fileModePayload = Buffer.alloc(8);
    fileModePayload.writeUInt32LE(mode, 0);
    const data = {
      opCode: _protocol.Operations.FILE_OPEN,
      packetNumber,
      headerPayload: Buffer.concat([fileModePayload, pathPayload])
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.FILE_OPEN_RES) {
      this.checkStatus(res);
    }

    return res.headerPayload.readUInt32LE(0);
  }

  async createWriteStream(filePath, options) {
    const fileHandle = await this.openFile(filePath, _protocol.FileModes.w);
    return new _streams.AfcWritableFileStream(fileHandle, this, options);
  }

  async createReadStream(filePath, options) {
    const fileHandle = await this.openFile(filePath, _protocol.FileModes.r);
    return new _streams.AfcReadableFileStream(fileHandle, this, options);
  }

  async closeFileHandle(fileHande) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const fileModePayload = Buffer.alloc(8);
    fileModePayload.writeUInt32LE(fileHande, 0);
    const data = {
      opCode: _protocol.Operations.FILE_CLOSE,
      packetNumber,
      headerPayload: fileModePayload
    };

    this._encoder.write(data);

    const res = await response;
    this.checkStatus(res);
  }

  async writeFile(fileHande, buffer) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const headerPayload = Buffer.alloc(8);
    headerPayload.writeUInt32LE(fileHande, 0);
    const data = {
      opCode: _protocol.Operations.FILE_WRITE,
      packetNumber,
      headerPayload,
      content: buffer
    };

    this._encoder.write(data);

    const res = await response;
    this.checkStatus(res);
  }

  async readFile(fileHande, length) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const headerPayload = Buffer.alloc(16);
    headerPayload.writeUInt32LE(fileHande, 0);
    headerPayload.writeUInt32LE(length, 8);
    const data = {
      opCode: _protocol.Operations.FILE_READ,
      packetNumber,
      headerPayload
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.DATA) {
      this.checkStatus(res);
    }

    return res.content;
  }

  async getFileInfo(path) {
    const {
      packetNumber,
      response
    } = this.createPacketPromise();
    const data = {
      opCode: _protocol.Operations.GET_FILE_INFO,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.DATA) {
      this.checkStatus(res);
    }

    return this.parseObject(res.content);
  }

  checkStatus(res) {
    if (res.opCode !== _protocol.Operations.STATUS) {
      throw new Error(`Unexpected response ${(0, _protocol.operationCode)(res.opCode)}`);
    }

    if (_lodash.default.isEmpty(res.headerPayload)) {
      throw new Error('Header payload cant be empty for a status response');
    }

    if (res.headerPayload[0] !== _protocol.Errors.SUCCESS) {
      throw new Error(`Unexpected response ${(0, _protocol.errorCode)(res.headerPayload[0])}`);
    }
  }

  parseArray(buffer) {
    const items = [];
    let start = 0;

    for (let end = 0; end < buffer.length; end++) {
      if (buffer[end] !== NULL_DELIMETER_CODE) {
        continue;
      }

      const item = buffer.toString('utf8', start, end);
      items.push(item);
      start = end + 1;
    }

    return items;
  }

  parseObject(buffer) {
    const items = {};
    let start = 0;
    let currentKey;

    for (let end = 0; end < buffer.length; end++) {
      if (buffer[end] !== NULL_DELIMETER_CODE) {
        continue;
      }

      const item = buffer.toString('utf8', start, end);

      if (_lodash.default.isNil(currentKey)) {
        currentKey = item;
      } else {
        items[currentKey] = item;
        currentKey = null;
      }

      start = end + 1;
    }

    if (currentKey) {
      throw new Error(`Failed to parse correctly ${buffer}. Please investigate`);
    }

    return items;
  }

  createPacketPromise(timeout = 10000) {
    const packetNumber = this._packetNumber++;
    const response = new _bluebird.default((resolve, reject) => {
      this._responseCallbacks[packetNumber] = data => resolve(data);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
    return {
      packetNumber,
      response
    };
  }

  close() {
    this._socketClient.destroy();
  }

}

exports.AfcService = AfcService;
var _default = AfcService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
