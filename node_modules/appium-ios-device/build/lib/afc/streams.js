"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AfcWritableFileStream = exports.AfcReadableFileStream = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _lodash = _interopRequireDefault(require("lodash"));

class AfcReadableFileStream extends _stream.default.Readable {
  constructor(fileHandle, afcService, options) {
    super(options);
    this._fileHandle = fileHandle;
    this._afcService = afcService;
    this._destroyed = false;
  }

  async _read(size) {
    const data = await this._afcService.readFile(this._fileHandle, size);

    if (this._destroyed) {
      return;
    }

    if (_lodash.default.isEmpty(data)) {
      await this._destroy();
      return;
    }

    this.push(data);
  }

  async _destroy() {
    if (this._destroyed) {
      return;
    }

    this._destroyed = true;
    await this._afcService.closeFileHandle(this._fileHandle);
    this.push(null);
  }

}

exports.AfcReadableFileStream = AfcReadableFileStream;

class AfcWritableFileStream extends _stream.default.Writable {
  constructor(fileHandle, afcService, options) {
    super(options);
    this._fileHandle = fileHandle;
    this._afcService = afcService;
    this._destroyed = false;
  }

  async _write(chunk, encoding, callback) {
    await this._afcService.writeFile(this._fileHandle, chunk);
    callback();
  }

  async _destroy() {
    if (this._destroyed) {
      return;
    }

    this._destroyed = true;
    await this._afcService.closeFileHandle(this._fileHandle);
    this.emit('close');
  }

}

exports.AfcWritableFileStream = AfcWritableFileStream;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hZmMvc3RyZWFtcy5qcyJdLCJuYW1lcyI6WyJBZmNSZWFkYWJsZUZpbGVTdHJlYW0iLCJzdHJlYW0iLCJSZWFkYWJsZSIsImNvbnN0cnVjdG9yIiwiZmlsZUhhbmRsZSIsImFmY1NlcnZpY2UiLCJvcHRpb25zIiwiX2ZpbGVIYW5kbGUiLCJfYWZjU2VydmljZSIsIl9kZXN0cm95ZWQiLCJfcmVhZCIsInNpemUiLCJkYXRhIiwicmVhZEZpbGUiLCJfIiwiaXNFbXB0eSIsIl9kZXN0cm95IiwicHVzaCIsImNsb3NlRmlsZUhhbmRsZSIsIkFmY1dyaXRhYmxlRmlsZVN0cmVhbSIsIldyaXRhYmxlIiwiX3dyaXRlIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwid3JpdGVGaWxlIiwiZW1pdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxxQkFBTixTQUFvQ0MsZ0JBQU9DLFFBQTNDLENBQW9EO0FBRWxEQyxFQUFBQSxXQUFXLENBQUVDLFVBQUYsRUFBY0MsVUFBZCxFQUEwQkMsT0FBMUIsRUFBbUM7QUFDNUMsVUFBTUEsT0FBTjtBQUVBLFNBQUtDLFdBQUwsR0FBbUJILFVBQW5CO0FBQ0EsU0FBS0ksV0FBTCxHQUFtQkgsVUFBbkI7QUFDQSxTQUFLSSxVQUFMLEdBQWtCLEtBQWxCO0FBQ0Q7O0FBRUQsUUFBTUMsS0FBTixDQUFhQyxJQUFiLEVBQW1CO0FBQ2pCLFVBQU1DLElBQUksR0FBRyxNQUFNLEtBQUtKLFdBQUwsQ0FBaUJLLFFBQWpCLENBQTBCLEtBQUtOLFdBQS9CLEVBQTRDSSxJQUE1QyxDQUFuQjs7QUFFQSxRQUFJLEtBQUtGLFVBQVQsRUFBcUI7QUFDbkI7QUFDRDs7QUFFRCxRQUFJSyxnQkFBRUMsT0FBRixDQUFVSCxJQUFWLENBQUosRUFBcUI7QUFDbkIsWUFBTSxLQUFLSSxRQUFMLEVBQU47QUFDQTtBQUNEOztBQUVELFNBQUtDLElBQUwsQ0FBVUwsSUFBVjtBQUNEOztBQUVELFFBQU1JLFFBQU4sR0FBa0I7QUFDaEIsUUFBSSxLQUFLUCxVQUFULEVBQXFCO0FBQ25CO0FBQ0Q7O0FBQ0QsU0FBS0EsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFVBQU0sS0FBS0QsV0FBTCxDQUFpQlUsZUFBakIsQ0FBaUMsS0FBS1gsV0FBdEMsQ0FBTjtBQUNBLFNBQUtVLElBQUwsQ0FBVSxJQUFWO0FBQ0Q7O0FBaENpRDs7OztBQW1DcEQsTUFBTUUscUJBQU4sU0FBb0NsQixnQkFBT21CLFFBQTNDLENBQW9EO0FBRWxEakIsRUFBQUEsV0FBVyxDQUFFQyxVQUFGLEVBQWNDLFVBQWQsRUFBMEJDLE9BQTFCLEVBQW1DO0FBQzVDLFVBQU1BLE9BQU47QUFDQSxTQUFLQyxXQUFMLEdBQW1CSCxVQUFuQjtBQUNBLFNBQUtJLFdBQUwsR0FBbUJILFVBQW5CO0FBQ0EsU0FBS0ksVUFBTCxHQUFrQixLQUFsQjtBQUNEOztBQUVELFFBQU1ZLE1BQU4sQ0FBY0MsS0FBZCxFQUFxQkMsUUFBckIsRUFBK0JDLFFBQS9CLEVBQXlDO0FBQ3ZDLFVBQU0sS0FBS2hCLFdBQUwsQ0FBaUJpQixTQUFqQixDQUEyQixLQUFLbEIsV0FBaEMsRUFBNkNlLEtBQTdDLENBQU47QUFDQUUsSUFBQUEsUUFBUTtBQUNUOztBQUVELFFBQU1SLFFBQU4sR0FBa0I7QUFDaEIsUUFBSSxLQUFLUCxVQUFULEVBQXFCO0FBQ25CO0FBQ0Q7O0FBQ0QsU0FBS0EsVUFBTCxHQUFrQixJQUFsQjtBQUNBLFVBQU0sS0FBS0QsV0FBTCxDQUFpQlUsZUFBakIsQ0FBaUMsS0FBS1gsV0FBdEMsQ0FBTjtBQUNBLFNBQUttQixJQUFMLENBQVUsT0FBVjtBQUNEOztBQXJCaUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3MgKi9cbmltcG9ydCBzdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNsYXNzIEFmY1JlYWRhYmxlRmlsZVN0cmVhbSBleHRlbmRzIHN0cmVhbS5SZWFkYWJsZSB7XG5cbiAgY29uc3RydWN0b3IgKGZpbGVIYW5kbGUsIGFmY1NlcnZpY2UsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIHRoaXMuX2ZpbGVIYW5kbGUgPSBmaWxlSGFuZGxlO1xuICAgIHRoaXMuX2FmY1NlcnZpY2UgPSBhZmNTZXJ2aWNlO1xuICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgX3JlYWQgKHNpemUpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5fYWZjU2VydmljZS5yZWFkRmlsZSh0aGlzLl9maWxlSGFuZGxlLCBzaXplKTtcblxuICAgIGlmICh0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXy5pc0VtcHR5KGRhdGEpKSB7XG4gICAgICBhd2FpdCB0aGlzLl9kZXN0cm95KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuICB9XG5cbiAgYXN5bmMgX2Rlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLl9kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZTtcbiAgICBhd2FpdCB0aGlzLl9hZmNTZXJ2aWNlLmNsb3NlRmlsZUhhbmRsZSh0aGlzLl9maWxlSGFuZGxlKTtcbiAgICB0aGlzLnB1c2gobnVsbCk7XG4gIH1cbn1cblxuY2xhc3MgQWZjV3JpdGFibGVGaWxlU3RyZWFtIGV4dGVuZHMgc3RyZWFtLldyaXRhYmxlIHtcblxuICBjb25zdHJ1Y3RvciAoZmlsZUhhbmRsZSwgYWZjU2VydmljZSwgb3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIHRoaXMuX2ZpbGVIYW5kbGUgPSBmaWxlSGFuZGxlO1xuICAgIHRoaXMuX2FmY1NlcnZpY2UgPSBhZmNTZXJ2aWNlO1xuICAgIHRoaXMuX2Rlc3Ryb3llZCA9IGZhbHNlO1xuICB9XG5cbiAgYXN5bmMgX3dyaXRlIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgYXdhaXQgdGhpcy5fYWZjU2VydmljZS53cml0ZUZpbGUodGhpcy5fZmlsZUhhbmRsZSwgY2h1bmspO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBhc3luYyBfZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgIGF3YWl0IHRoaXMuX2FmY1NlcnZpY2UuY2xvc2VGaWxlSGFuZGxlKHRoaXMuX2ZpbGVIYW5kbGUpO1xuICAgIHRoaXMuZW1pdCgnY2xvc2UnKTtcbiAgfVxufVxuXG5leHBvcnQgeyBBZmNSZWFkYWJsZUZpbGVTdHJlYW0sIEFmY1dyaXRhYmxlRmlsZVN0cmVhbSB9OyJdLCJmaWxlIjoibGliL2FmYy9zdHJlYW1zLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
